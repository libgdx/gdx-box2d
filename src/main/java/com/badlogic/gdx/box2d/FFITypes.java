package com.badlogic.gdx.box2d;

import com.badlogic.gdx.jnigen.runtime.CHandler;
import com.badlogic.gdx.jnigen.runtime.c.CTypeInfo;
import java.util.HashMap;

public class FFITypes {

    /*JNI
		#include <jnigen.h>
		#include <box2d/box2d.h>
*/
    /*JNI
		#if !((defined(_WIN32) && ARCH_BITS == 32) || (defined(_WIN32) && ARCH_BITS == 64) || (!defined(_WIN32) && ARCH_BITS == 32 && !(defined(__i386__) && defined(__ANDROID__))) || (!defined(_WIN32) && ARCH_BITS == 64) || (defined(__i386__) && defined(__ANDROID__)))
			#error Unsupported OS/Platform
		#endif
		

		#if defined(_WIN32) && ARCH_BITS == 32
		static_assert(sizeof(const uint8_t) == 1, "Type const uint8_t has unexpected size.");
		static_assert(alignof(const uint8_t) == 1, "Type const uint8_t has unexpected alignment.");
		static_assert(sizeof(unsigned int) == 4, "Type unsigned int has unexpected size.");
		static_assert(alignof(unsigned int) == 4, "Type unsigned int has unexpected alignment.");
		static_assert(sizeof(uint16_t) == 2, "Type uint16_t has unexpected size.");
		static_assert(alignof(uint16_t) == 2, "Type uint16_t has unexpected alignment.");
		static_assert(sizeof(bool) == 1, "Type bool has unexpected size.");
		static_assert(alignof(bool) == 1, "Type bool has unexpected alignment.");
		static_assert(sizeof(uint64_t) == 8, "Type uint64_t has unexpected size.");
		static_assert(alignof(uint64_t) == 8, "Type uint64_t has unexpected alignment.");
		static_assert(sizeof(const char) == 1, "Type const char has unexpected size.");
		static_assert(alignof(const char) == 1, "Type const char has unexpected alignment.");
		static_assert(sizeof(uint32_t) == 4, "Type uint32_t has unexpected size.");
		static_assert(alignof(uint32_t) == 4, "Type uint32_t has unexpected alignment.");
		static_assert(sizeof(uint8_t) == 1, "Type uint8_t has unexpected size.");
		static_assert(alignof(uint8_t) == 1, "Type uint8_t has unexpected alignment.");
		static_assert(sizeof(float) == 4, "Type float has unexpected size.");
		static_assert(alignof(float) == 4, "Type float has unexpected alignment.");
		static_assert(sizeof(int) == 4, "Type int has unexpected size.");
		static_assert(alignof(int) == 4, "Type int has unexpected alignment.");
		static_assert(sizeof(int32_t) == 4, "Type int32_t has unexpected size.");
		static_assert(alignof(int32_t) == 4, "Type int32_t has unexpected alignment.");
		static_assert(sizeof(b2Sweep) == 40, "Type b2Sweep has unexpected size.");
		static_assert(alignof(b2Sweep) == 4, "Type b2Sweep has unexpected alignment.");
		static_assert(offsetof(b2Sweep, localCenter) == 0, "Type b2Sweep has unexpected offset.");
		static_assert(offsetof(b2Sweep, c1) == 8, "Type b2Sweep has unexpected offset.");
		static_assert(offsetof(b2Sweep, c2) == 16, "Type b2Sweep has unexpected offset.");
		static_assert(offsetof(b2Sweep, q1) == 24, "Type b2Sweep has unexpected offset.");
		static_assert(offsetof(b2Sweep, q2) == 32, "Type b2Sweep has unexpected offset.");
		static_assert(sizeof(b2SensorEndTouchEvent) == 16, "Type b2SensorEndTouchEvent has unexpected size.");
		static_assert(alignof(b2SensorEndTouchEvent) == 4, "Type b2SensorEndTouchEvent has unexpected alignment.");
		static_assert(offsetof(b2SensorEndTouchEvent, sensorShapeId) == 0, "Type b2SensorEndTouchEvent has unexpected offset.");
		static_assert(offsetof(b2SensorEndTouchEvent, visitorShapeId) == 8, "Type b2SensorEndTouchEvent has unexpected offset.");
		static_assert(sizeof(b2ContactEndTouchEvent) == 16, "Type b2ContactEndTouchEvent has unexpected size.");
		static_assert(alignof(b2ContactEndTouchEvent) == 4, "Type b2ContactEndTouchEvent has unexpected alignment.");
		static_assert(offsetof(b2ContactEndTouchEvent, shapeIdA) == 0, "Type b2ContactEndTouchEvent has unexpected offset.");
		static_assert(offsetof(b2ContactEndTouchEvent, shapeIdB) == 8, "Type b2ContactEndTouchEvent has unexpected offset.");
		static_assert(sizeof(b2Segment) == 16, "Type b2Segment has unexpected size.");
		static_assert(alignof(b2Segment) == 4, "Type b2Segment has unexpected alignment.");
		static_assert(offsetof(b2Segment, point1) == 0, "Type b2Segment has unexpected offset.");
		static_assert(offsetof(b2Segment, point2) == 8, "Type b2Segment has unexpected offset.");
		static_assert(sizeof(b2JointId) == 8, "Type b2JointId has unexpected size.");
		static_assert(alignof(b2JointId) == 4, "Type b2JointId has unexpected alignment.");
		static_assert(offsetof(b2JointId, index1) == 0, "Type b2JointId has unexpected offset.");
		static_assert(offsetof(b2JointId, world0) == 4, "Type b2JointId has unexpected offset.");
		static_assert(offsetof(b2JointId, generation) == 6, "Type b2JointId has unexpected offset.");
		static_assert(sizeof(b2ChainSegment) == 36, "Type b2ChainSegment has unexpected size.");
		static_assert(alignof(b2ChainSegment) == 4, "Type b2ChainSegment has unexpected alignment.");
		static_assert(offsetof(b2ChainSegment, ghost1) == 0, "Type b2ChainSegment has unexpected offset.");
		static_assert(offsetof(b2ChainSegment, segment) == 8, "Type b2ChainSegment has unexpected offset.");
		static_assert(offsetof(b2ChainSegment, ghost2) == 24, "Type b2ChainSegment has unexpected offset.");
		static_assert(offsetof(b2ChainSegment, chainId) == 32, "Type b2ChainSegment has unexpected offset.");
		static_assert(sizeof(b2PlaneSolverResult) == 12, "Type b2PlaneSolverResult has unexpected size.");
		static_assert(alignof(b2PlaneSolverResult) == 4, "Type b2PlaneSolverResult has unexpected alignment.");
		static_assert(offsetof(b2PlaneSolverResult, translation) == 0, "Type b2PlaneSolverResult has unexpected offset.");
		static_assert(offsetof(b2PlaneSolverResult, iterationCount) == 8, "Type b2PlaneSolverResult has unexpected offset.");
		static_assert(sizeof(b2MotorJointDef) == 52, "Type b2MotorJointDef has unexpected size.");
		static_assert(alignof(b2MotorJointDef) == 4, "Type b2MotorJointDef has unexpected alignment.");
		static_assert(offsetof(b2MotorJointDef, bodyIdA) == 0, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, bodyIdB) == 8, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, linearOffset) == 16, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, angularOffset) == 24, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, maxForce) == 28, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, maxTorque) == 32, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, correctionFactor) == 36, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, collideConnected) == 40, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, userData) == 44, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, internalValue) == 48, "Type b2MotorJointDef has unexpected offset.");
		static_assert(sizeof(b2Profile) == 88, "Type b2Profile has unexpected size.");
		static_assert(alignof(b2Profile) == 4, "Type b2Profile has unexpected alignment.");
		static_assert(offsetof(b2Profile, step) == 0, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, pairs) == 4, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, collide) == 8, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, solve) == 12, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, mergeIslands) == 16, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, prepareStages) == 20, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, solveConstraints) == 24, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, prepareConstraints) == 28, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, integrateVelocities) == 32, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, warmStart) == 36, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, solveImpulses) == 40, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, integratePositions) == 44, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, relaxImpulses) == 48, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, applyRestitution) == 52, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, storeImpulses) == 56, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, splitIslands) == 60, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, transforms) == 64, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, hitEvents) == 68, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, refit) == 72, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, bullets) == 76, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, sleepIslands) == 80, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, sensors) == 84, "Type b2Profile has unexpected offset.");
		static_assert(sizeof(b2Counters) == 88, "Type b2Counters has unexpected size.");
		static_assert(alignof(b2Counters) == 4, "Type b2Counters has unexpected alignment.");
		static_assert(offsetof(b2Counters, bodyCount) == 0, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, shapeCount) == 4, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, contactCount) == 8, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, jointCount) == 12, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, islandCount) == 16, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, stackUsed) == 20, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, staticTreeHeight) == 24, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, treeHeight) == 28, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, byteCount) == 32, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, taskCount) == 36, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, colorCounts) == 40, "Type b2Counters has unexpected offset.");
		static_assert(sizeof(b2SensorEvents) == 16, "Type b2SensorEvents has unexpected size.");
		static_assert(alignof(b2SensorEvents) == 4, "Type b2SensorEvents has unexpected alignment.");
		static_assert(offsetof(b2SensorEvents, beginEvents) == 0, "Type b2SensorEvents has unexpected offset.");
		static_assert(offsetof(b2SensorEvents, endEvents) == 4, "Type b2SensorEvents has unexpected offset.");
		static_assert(offsetof(b2SensorEvents, beginCount) == 8, "Type b2SensorEvents has unexpected offset.");
		static_assert(offsetof(b2SensorEvents, endCount) == 12, "Type b2SensorEvents has unexpected offset.");
		static_assert(sizeof(b2RayResult) == 40, "Type b2RayResult has unexpected size.");
		static_assert(alignof(b2RayResult) == 4, "Type b2RayResult has unexpected alignment.");
		static_assert(offsetof(b2RayResult, shapeId) == 0, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, point) == 8, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, normal) == 16, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, fraction) == 24, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, nodeVisits) == 28, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, leafVisits) == 32, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, hit) == 36, "Type b2RayResult has unexpected offset.");
		static_assert(sizeof(b2CastOutput) == 28, "Type b2CastOutput has unexpected size.");
		static_assert(alignof(b2CastOutput) == 4, "Type b2CastOutput has unexpected alignment.");
		static_assert(offsetof(b2CastOutput, normal) == 0, "Type b2CastOutput has unexpected offset.");
		static_assert(offsetof(b2CastOutput, point) == 8, "Type b2CastOutput has unexpected offset.");
		static_assert(offsetof(b2CastOutput, fraction) == 16, "Type b2CastOutput has unexpected offset.");
		static_assert(offsetof(b2CastOutput, iterations) == 20, "Type b2CastOutput has unexpected offset.");
		static_assert(offsetof(b2CastOutput, hit) == 24, "Type b2CastOutput has unexpected offset.");
		static_assert(sizeof(b2ContactBeginTouchEvent) == 128, "Type b2ContactBeginTouchEvent has unexpected size.");
		static_assert(alignof(b2ContactBeginTouchEvent) == 4, "Type b2ContactBeginTouchEvent has unexpected alignment.");
		static_assert(offsetof(b2ContactBeginTouchEvent, shapeIdA) == 0, "Type b2ContactBeginTouchEvent has unexpected offset.");
		static_assert(offsetof(b2ContactBeginTouchEvent, shapeIdB) == 8, "Type b2ContactBeginTouchEvent has unexpected offset.");
		static_assert(offsetof(b2ContactBeginTouchEvent, manifold) == 16, "Type b2ContactBeginTouchEvent has unexpected offset.");
		static_assert(sizeof(b2DynamicTree) == 44, "Type b2DynamicTree has unexpected size.");
		static_assert(alignof(b2DynamicTree) == 4, "Type b2DynamicTree has unexpected alignment.");
		static_assert(offsetof(b2DynamicTree, nodes) == 0, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, root) == 4, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, nodeCount) == 8, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, nodeCapacity) == 12, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, freeList) == 16, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, proxyCount) == 20, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, leafIndices) == 24, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, leafBoxes) == 28, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, leafCenters) == 32, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, binIndices) == 36, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, rebuildCapacity) == 40, "Type b2DynamicTree has unexpected offset.");
		static_assert(sizeof(b2FilterJointDef) == 24, "Type b2FilterJointDef has unexpected size.");
		static_assert(alignof(b2FilterJointDef) == 4, "Type b2FilterJointDef has unexpected alignment.");
		static_assert(offsetof(b2FilterJointDef, bodyIdA) == 0, "Type b2FilterJointDef has unexpected offset.");
		static_assert(offsetof(b2FilterJointDef, bodyIdB) == 8, "Type b2FilterJointDef has unexpected offset.");
		static_assert(offsetof(b2FilterJointDef, userData) == 16, "Type b2FilterJointDef has unexpected offset.");
		static_assert(offsetof(b2FilterJointDef, internalValue) == 20, "Type b2FilterJointDef has unexpected offset.");
		static_assert(sizeof(b2WheelJointDef) == 88, "Type b2WheelJointDef has unexpected size.");
		static_assert(alignof(b2WheelJointDef) == 4, "Type b2WheelJointDef has unexpected alignment.");
		static_assert(offsetof(b2WheelJointDef, bodyIdA) == 0, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, bodyIdB) == 8, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, localAnchorA) == 16, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, localAnchorB) == 24, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, localAxisA) == 32, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, enableSpring) == 40, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, hertz) == 44, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, dampingRatio) == 48, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, enableLimit) == 52, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, lowerTranslation) == 56, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, upperTranslation) == 60, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, enableMotor) == 64, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, maxMotorTorque) == 68, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, motorSpeed) == 72, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, collideConnected) == 76, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, userData) == 80, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, internalValue) == 84, "Type b2WheelJointDef has unexpected offset.");
		static_assert(sizeof(b2ContactData) == 128, "Type b2ContactData has unexpected size.");
		static_assert(alignof(b2ContactData) == 4, "Type b2ContactData has unexpected alignment.");
		static_assert(offsetof(b2ContactData, shapeIdA) == 0, "Type b2ContactData has unexpected offset.");
		static_assert(offsetof(b2ContactData, shapeIdB) == 8, "Type b2ContactData has unexpected offset.");
		static_assert(offsetof(b2ContactData, manifold) == 16, "Type b2ContactData has unexpected offset.");
		static_assert(sizeof(b2SegmentDistanceResult) == 28, "Type b2SegmentDistanceResult has unexpected size.");
		static_assert(alignof(b2SegmentDistanceResult) == 4, "Type b2SegmentDistanceResult has unexpected alignment.");
		static_assert(offsetof(b2SegmentDistanceResult, closest1) == 0, "Type b2SegmentDistanceResult has unexpected offset.");
		static_assert(offsetof(b2SegmentDistanceResult, closest2) == 8, "Type b2SegmentDistanceResult has unexpected offset.");
		static_assert(offsetof(b2SegmentDistanceResult, fraction1) == 16, "Type b2SegmentDistanceResult has unexpected offset.");
		static_assert(offsetof(b2SegmentDistanceResult, fraction2) == 20, "Type b2SegmentDistanceResult has unexpected offset.");
		static_assert(offsetof(b2SegmentDistanceResult, distanceSquared) == 24, "Type b2SegmentDistanceResult has unexpected offset.");
		static_assert(sizeof(b2BodyId) == 8, "Type b2BodyId has unexpected size.");
		static_assert(alignof(b2BodyId) == 4, "Type b2BodyId has unexpected alignment.");
		static_assert(offsetof(b2BodyId, index1) == 0, "Type b2BodyId has unexpected offset.");
		static_assert(offsetof(b2BodyId, world0) == 4, "Type b2BodyId has unexpected offset.");
		static_assert(offsetof(b2BodyId, generation) == 6, "Type b2BodyId has unexpected offset.");
		static_assert(sizeof(b2WeldJointDef) == 64, "Type b2WeldJointDef has unexpected size.");
		static_assert(alignof(b2WeldJointDef) == 4, "Type b2WeldJointDef has unexpected alignment.");
		static_assert(offsetof(b2WeldJointDef, bodyIdA) == 0, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, bodyIdB) == 8, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, localAnchorA) == 16, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, localAnchorB) == 24, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, referenceAngle) == 32, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, linearHertz) == 36, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, angularHertz) == 40, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, linearDampingRatio) == 44, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, angularDampingRatio) == 48, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, collideConnected) == 52, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, userData) == 56, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, internalValue) == 60, "Type b2WeldJointDef has unexpected offset.");
		static_assert(sizeof(b2Manifold) == 112, "Type b2Manifold has unexpected size.");
		static_assert(alignof(b2Manifold) == 4, "Type b2Manifold has unexpected alignment.");
		static_assert(offsetof(b2Manifold, normal) == 0, "Type b2Manifold has unexpected offset.");
		static_assert(offsetof(b2Manifold, rollingImpulse) == 8, "Type b2Manifold has unexpected offset.");
		static_assert(offsetof(b2Manifold, points) == 12, "Type b2Manifold has unexpected offset.");
		static_assert(offsetof(b2Manifold, pointCount) == 108, "Type b2Manifold has unexpected offset.");
		static_assert(sizeof(b2Plane) == 12, "Type b2Plane has unexpected size.");
		static_assert(alignof(b2Plane) == 4, "Type b2Plane has unexpected alignment.");
		static_assert(offsetof(b2Plane, normal) == 0, "Type b2Plane has unexpected offset.");
		static_assert(offsetof(b2Plane, offset) == 8, "Type b2Plane has unexpected offset.");
		static_assert(sizeof(b2ShapeCastInput) == 88, "Type b2ShapeCastInput has unexpected size.");
		static_assert(alignof(b2ShapeCastInput) == 4, "Type b2ShapeCastInput has unexpected alignment.");
		static_assert(offsetof(b2ShapeCastInput, proxy) == 0, "Type b2ShapeCastInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastInput, translation) == 72, "Type b2ShapeCastInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastInput, maxFraction) == 80, "Type b2ShapeCastInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastInput, canEncroach) == 84, "Type b2ShapeCastInput has unexpected offset.");
		static_assert(sizeof(b2SurfaceMaterial) == 24, "Type b2SurfaceMaterial has unexpected size.");
		static_assert(alignof(b2SurfaceMaterial) == 4, "Type b2SurfaceMaterial has unexpected alignment.");
		static_assert(offsetof(b2SurfaceMaterial, friction) == 0, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(offsetof(b2SurfaceMaterial, restitution) == 4, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(offsetof(b2SurfaceMaterial, rollingResistance) == 8, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(offsetof(b2SurfaceMaterial, tangentSpeed) == 12, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(offsetof(b2SurfaceMaterial, userMaterialId) == 16, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(offsetof(b2SurfaceMaterial, customColor) == 20, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(sizeof(b2RevoluteJointDef) == 92, "Type b2RevoluteJointDef has unexpected size.");
		static_assert(alignof(b2RevoluteJointDef) == 4, "Type b2RevoluteJointDef has unexpected alignment.");
		static_assert(offsetof(b2RevoluteJointDef, bodyIdA) == 0, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, bodyIdB) == 8, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, localAnchorA) == 16, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, localAnchorB) == 24, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, referenceAngle) == 32, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, targetAngle) == 36, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, enableSpring) == 40, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, hertz) == 44, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, dampingRatio) == 48, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, enableLimit) == 52, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, lowerAngle) == 56, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, upperAngle) == 60, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, enableMotor) == 64, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, maxMotorTorque) == 68, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, motorSpeed) == 72, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, drawSize) == 76, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, collideConnected) == 80, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, userData) == 84, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, internalValue) == 88, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(sizeof(b2Capsule) == 20, "Type b2Capsule has unexpected size.");
		static_assert(alignof(b2Capsule) == 4, "Type b2Capsule has unexpected alignment.");
		static_assert(offsetof(b2Capsule, center1) == 0, "Type b2Capsule has unexpected offset.");
		static_assert(offsetof(b2Capsule, center2) == 8, "Type b2Capsule has unexpected offset.");
		static_assert(offsetof(b2Capsule, radius) == 16, "Type b2Capsule has unexpected offset.");
		static_assert(sizeof(b2Transform) == 16, "Type b2Transform has unexpected size.");
		static_assert(alignof(b2Transform) == 4, "Type b2Transform has unexpected alignment.");
		static_assert(offsetof(b2Transform, p) == 0, "Type b2Transform has unexpected offset.");
		static_assert(offsetof(b2Transform, q) == 8, "Type b2Transform has unexpected offset.");
		static_assert(sizeof(b2MouseJointDef) == 48, "Type b2MouseJointDef has unexpected size.");
		static_assert(alignof(b2MouseJointDef) == 4, "Type b2MouseJointDef has unexpected alignment.");
		static_assert(offsetof(b2MouseJointDef, bodyIdA) == 0, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, bodyIdB) == 8, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, target) == 16, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, hertz) == 24, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, dampingRatio) == 28, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, maxForce) == 32, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, collideConnected) == 36, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, userData) == 40, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, internalValue) == 44, "Type b2MouseJointDef has unexpected offset.");
		static_assert(sizeof(b2Mat22) == 16, "Type b2Mat22 has unexpected size.");
		static_assert(alignof(b2Mat22) == 4, "Type b2Mat22 has unexpected alignment.");
		static_assert(offsetof(b2Mat22, cx) == 0, "Type b2Mat22 has unexpected offset.");
		static_assert(offsetof(b2Mat22, cy) == 8, "Type b2Mat22 has unexpected offset.");
		static_assert(sizeof(b2CollisionPlane) == 24, "Type b2CollisionPlane has unexpected size.");
		static_assert(alignof(b2CollisionPlane) == 4, "Type b2CollisionPlane has unexpected alignment.");
		static_assert(offsetof(b2CollisionPlane, plane) == 0, "Type b2CollisionPlane has unexpected offset.");
		static_assert(offsetof(b2CollisionPlane, pushLimit) == 12, "Type b2CollisionPlane has unexpected offset.");
		static_assert(offsetof(b2CollisionPlane, push) == 16, "Type b2CollisionPlane has unexpected offset.");
		static_assert(offsetof(b2CollisionPlane, clipVelocity) == 20, "Type b2CollisionPlane has unexpected offset.");
		static_assert(sizeof(b2Filter) == 24, "Type b2Filter has unexpected size.");
		static_assert(alignof(b2Filter) == 8, "Type b2Filter has unexpected alignment.");
		static_assert(offsetof(b2Filter, categoryBits) == 0, "Type b2Filter has unexpected offset.");
		static_assert(offsetof(b2Filter, maskBits) == 8, "Type b2Filter has unexpected offset.");
		static_assert(offsetof(b2Filter, groupIndex) == 16, "Type b2Filter has unexpected offset.");
		static_assert(sizeof(b2ShapeProxy) == 72, "Type b2ShapeProxy has unexpected size.");
		static_assert(alignof(b2ShapeProxy) == 4, "Type b2ShapeProxy has unexpected alignment.");
		static_assert(offsetof(b2ShapeProxy, points) == 0, "Type b2ShapeProxy has unexpected offset.");
		static_assert(offsetof(b2ShapeProxy, count) == 64, "Type b2ShapeProxy has unexpected offset.");
		static_assert(offsetof(b2ShapeProxy, radius) == 68, "Type b2ShapeProxy has unexpected offset.");
		static_assert(sizeof(b2ShapeDef) == 72, "Type b2ShapeDef has unexpected size.");
		static_assert(alignof(b2ShapeDef) == 8, "Type b2ShapeDef has unexpected alignment.");
		static_assert(offsetof(b2ShapeDef, userData) == 0, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, material) == 4, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, density) == 28, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, filter) == 32, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, isSensor) == 56, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, enableSensorEvents) == 57, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, enableContactEvents) == 58, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, enableHitEvents) == 59, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, enablePreSolveEvents) == 60, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, invokeContactCreation) == 61, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, updateBodyMass) == 62, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, internalValue) == 64, "Type b2ShapeDef has unexpected offset.");
		static_assert(sizeof(b2ShapeId) == 8, "Type b2ShapeId has unexpected size.");
		static_assert(alignof(b2ShapeId) == 4, "Type b2ShapeId has unexpected alignment.");
		static_assert(offsetof(b2ShapeId, index1) == 0, "Type b2ShapeId has unexpected offset.");
		static_assert(offsetof(b2ShapeId, world0) == 4, "Type b2ShapeId has unexpected offset.");
		static_assert(offsetof(b2ShapeId, generation) == 6, "Type b2ShapeId has unexpected offset.");
		static_assert(sizeof(b2Polygon) == 144, "Type b2Polygon has unexpected size.");
		static_assert(alignof(b2Polygon) == 4, "Type b2Polygon has unexpected alignment.");
		static_assert(offsetof(b2Polygon, vertices) == 0, "Type b2Polygon has unexpected offset.");
		static_assert(offsetof(b2Polygon, normals) == 64, "Type b2Polygon has unexpected offset.");
		static_assert(offsetof(b2Polygon, centroid) == 128, "Type b2Polygon has unexpected offset.");
		static_assert(offsetof(b2Polygon, radius) == 136, "Type b2Polygon has unexpected offset.");
		static_assert(offsetof(b2Polygon, count) == 140, "Type b2Polygon has unexpected offset.");
		static_assert(sizeof(b2WorldDef) == 68, "Type b2WorldDef has unexpected size.");
		static_assert(alignof(b2WorldDef) == 4, "Type b2WorldDef has unexpected alignment.");
		static_assert(offsetof(b2WorldDef, gravity) == 0, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, restitutionThreshold) == 8, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, hitEventThreshold) == 12, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, contactHertz) == 16, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, contactDampingRatio) == 20, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, maxContactPushSpeed) == 24, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, maximumLinearSpeed) == 28, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, frictionCallback) == 32, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, restitutionCallback) == 36, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, enableSleep) == 40, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, enableContinuous) == 41, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, workerCount) == 44, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, enqueueTask) == 48, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, finishTask) == 52, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, userTaskContext) == 56, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, userData) == 60, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, internalValue) == 64, "Type b2WorldDef has unexpected offset.");
		static_assert(sizeof(b2ManifoldPoint) == 48, "Type b2ManifoldPoint has unexpected size.");
		static_assert(alignof(b2ManifoldPoint) == 4, "Type b2ManifoldPoint has unexpected alignment.");
		static_assert(offsetof(b2ManifoldPoint, point) == 0, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, anchorA) == 8, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, anchorB) == 16, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, separation) == 24, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, normalImpulse) == 28, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, tangentImpulse) == 32, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, totalNormalImpulse) == 36, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, normalVelocity) == 40, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, id) == 44, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, persisted) == 46, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(sizeof(b2ChainDef) == 56, "Type b2ChainDef has unexpected size.");
		static_assert(alignof(b2ChainDef) == 8, "Type b2ChainDef has unexpected alignment.");
		static_assert(offsetof(b2ChainDef, userData) == 0, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, points) == 4, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, count) == 8, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, materials) == 12, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, materialCount) == 16, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, filter) == 24, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, isLoop) == 48, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, enableSensorEvents) == 49, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, internalValue) == 52, "Type b2ChainDef has unexpected offset.");
		static_assert(sizeof(b2ContactEvents) == 24, "Type b2ContactEvents has unexpected size.");
		static_assert(alignof(b2ContactEvents) == 4, "Type b2ContactEvents has unexpected alignment.");
		static_assert(offsetof(b2ContactEvents, beginEvents) == 0, "Type b2ContactEvents has unexpected offset.");
		static_assert(offsetof(b2ContactEvents, endEvents) == 4, "Type b2ContactEvents has unexpected offset.");
		static_assert(offsetof(b2ContactEvents, hitEvents) == 8, "Type b2ContactEvents has unexpected offset.");
		static_assert(offsetof(b2ContactEvents, beginCount) == 12, "Type b2ContactEvents has unexpected offset.");
		static_assert(offsetof(b2ContactEvents, endCount) == 16, "Type b2ContactEvents has unexpected offset.");
		static_assert(offsetof(b2ContactEvents, hitCount) == 20, "Type b2ContactEvents has unexpected offset.");
		static_assert(sizeof(b2BodyMoveEvent) == 32, "Type b2BodyMoveEvent has unexpected size.");
		static_assert(alignof(b2BodyMoveEvent) == 4, "Type b2BodyMoveEvent has unexpected alignment.");
		static_assert(offsetof(b2BodyMoveEvent, transform) == 0, "Type b2BodyMoveEvent has unexpected offset.");
		static_assert(offsetof(b2BodyMoveEvent, bodyId) == 16, "Type b2BodyMoveEvent has unexpected offset.");
		static_assert(offsetof(b2BodyMoveEvent, userData) == 24, "Type b2BodyMoveEvent has unexpected offset.");
		static_assert(offsetof(b2BodyMoveEvent, fellAsleep) == 28, "Type b2BodyMoveEvent has unexpected offset.");
		static_assert(sizeof(b2MassData) == 16, "Type b2MassData has unexpected size.");
		static_assert(alignof(b2MassData) == 4, "Type b2MassData has unexpected alignment.");
		static_assert(offsetof(b2MassData, mass) == 0, "Type b2MassData has unexpected offset.");
		static_assert(offsetof(b2MassData, center) == 4, "Type b2MassData has unexpected offset.");
		static_assert(offsetof(b2MassData, rotationalInertia) == 12, "Type b2MassData has unexpected offset.");
		static_assert(sizeof(b2SimplexVertex) == 36, "Type b2SimplexVertex has unexpected size.");
		static_assert(alignof(b2SimplexVertex) == 4, "Type b2SimplexVertex has unexpected alignment.");
		static_assert(offsetof(b2SimplexVertex, wA) == 0, "Type b2SimplexVertex has unexpected offset.");
		static_assert(offsetof(b2SimplexVertex, wB) == 8, "Type b2SimplexVertex has unexpected offset.");
		static_assert(offsetof(b2SimplexVertex, w) == 16, "Type b2SimplexVertex has unexpected offset.");
		static_assert(offsetof(b2SimplexVertex, a) == 24, "Type b2SimplexVertex has unexpected offset.");
		static_assert(offsetof(b2SimplexVertex, indexA) == 28, "Type b2SimplexVertex has unexpected offset.");
		static_assert(offsetof(b2SimplexVertex, indexB) == 32, "Type b2SimplexVertex has unexpected offset.");
		static_assert(sizeof(b2TOIOutput) == 8, "Type b2TOIOutput has unexpected size.");
		static_assert(alignof(b2TOIOutput) == 4, "Type b2TOIOutput has unexpected alignment.");
		static_assert(offsetof(b2TOIOutput, state) == 0, "Type b2TOIOutput has unexpected offset.");
		static_assert(offsetof(b2TOIOutput, fraction) == 4, "Type b2TOIOutput has unexpected offset.");
		static_assert(sizeof(b2CosSin) == 8, "Type b2CosSin has unexpected size.");
		static_assert(alignof(b2CosSin) == 4, "Type b2CosSin has unexpected alignment.");
		static_assert(offsetof(b2CosSin, cosine) == 0, "Type b2CosSin has unexpected offset.");
		static_assert(offsetof(b2CosSin, sine) == 4, "Type b2CosSin has unexpected offset.");
		static_assert(sizeof(b2WorldId) == 4, "Type b2WorldId has unexpected size.");
		static_assert(alignof(b2WorldId) == 2, "Type b2WorldId has unexpected alignment.");
		static_assert(offsetof(b2WorldId, index1) == 0, "Type b2WorldId has unexpected offset.");
		static_assert(offsetof(b2WorldId, generation) == 2, "Type b2WorldId has unexpected offset.");
		static_assert(sizeof(b2PrismaticJointDef) == 96, "Type b2PrismaticJointDef has unexpected size.");
		static_assert(alignof(b2PrismaticJointDef) == 4, "Type b2PrismaticJointDef has unexpected alignment.");
		static_assert(offsetof(b2PrismaticJointDef, bodyIdA) == 0, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, bodyIdB) == 8, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, localAnchorA) == 16, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, localAnchorB) == 24, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, localAxisA) == 32, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, referenceAngle) == 40, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, targetTranslation) == 44, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, enableSpring) == 48, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, hertz) == 52, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, dampingRatio) == 56, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, enableLimit) == 60, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, lowerTranslation) == 64, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, upperTranslation) == 68, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, enableMotor) == 72, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, maxMotorForce) == 76, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, motorSpeed) == 80, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, collideConnected) == 84, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, userData) == 88, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, internalValue) == 92, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(sizeof(b2Rot) == 8, "Type b2Rot has unexpected size.");
		static_assert(alignof(b2Rot) == 4, "Type b2Rot has unexpected alignment.");
		static_assert(offsetof(b2Rot, c) == 0, "Type b2Rot has unexpected offset.");
		static_assert(offsetof(b2Rot, s) == 4, "Type b2Rot has unexpected offset.");
		static_assert(sizeof(b2SimplexCache) == 8, "Type b2SimplexCache has unexpected size.");
		static_assert(alignof(b2SimplexCache) == 2, "Type b2SimplexCache has unexpected alignment.");
		static_assert(offsetof(b2SimplexCache, count) == 0, "Type b2SimplexCache has unexpected offset.");
		static_assert(offsetof(b2SimplexCache, indexA) == 2, "Type b2SimplexCache has unexpected offset.");
		static_assert(offsetof(b2SimplexCache, indexB) == 5, "Type b2SimplexCache has unexpected offset.");
		static_assert(sizeof(b2SensorBeginTouchEvent) == 16, "Type b2SensorBeginTouchEvent has unexpected size.");
		static_assert(alignof(b2SensorBeginTouchEvent) == 4, "Type b2SensorBeginTouchEvent has unexpected alignment.");
		static_assert(offsetof(b2SensorBeginTouchEvent, sensorShapeId) == 0, "Type b2SensorBeginTouchEvent has unexpected offset.");
		static_assert(offsetof(b2SensorBeginTouchEvent, visitorShapeId) == 8, "Type b2SensorBeginTouchEvent has unexpected offset.");
		static_assert(sizeof(b2Hull) == 68, "Type b2Hull has unexpected size.");
		static_assert(alignof(b2Hull) == 4, "Type b2Hull has unexpected alignment.");
		static_assert(offsetof(b2Hull, points) == 0, "Type b2Hull has unexpected offset.");
		static_assert(offsetof(b2Hull, count) == 64, "Type b2Hull has unexpected offset.");
		static_assert(sizeof(b2ChainId) == 8, "Type b2ChainId has unexpected size.");
		static_assert(alignof(b2ChainId) == 4, "Type b2ChainId has unexpected alignment.");
		static_assert(offsetof(b2ChainId, index1) == 0, "Type b2ChainId has unexpected offset.");
		static_assert(offsetof(b2ChainId, world0) == 4, "Type b2ChainId has unexpected offset.");
		static_assert(offsetof(b2ChainId, generation) == 6, "Type b2ChainId has unexpected offset.");
		static_assert(sizeof(b2RayCastInput) == 20, "Type b2RayCastInput has unexpected size.");
		static_assert(alignof(b2RayCastInput) == 4, "Type b2RayCastInput has unexpected alignment.");
		static_assert(offsetof(b2RayCastInput, origin) == 0, "Type b2RayCastInput has unexpected offset.");
		static_assert(offsetof(b2RayCastInput, translation) == 8, "Type b2RayCastInput has unexpected offset.");
		static_assert(offsetof(b2RayCastInput, maxFraction) == 16, "Type b2RayCastInput has unexpected offset.");
		static_assert(sizeof(b2DistanceOutput) == 36, "Type b2DistanceOutput has unexpected size.");
		static_assert(alignof(b2DistanceOutput) == 4, "Type b2DistanceOutput has unexpected alignment.");
		static_assert(offsetof(b2DistanceOutput, pointA) == 0, "Type b2DistanceOutput has unexpected offset.");
		static_assert(offsetof(b2DistanceOutput, pointB) == 8, "Type b2DistanceOutput has unexpected offset.");
		static_assert(offsetof(b2DistanceOutput, normal) == 16, "Type b2DistanceOutput has unexpected offset.");
		static_assert(offsetof(b2DistanceOutput, distance) == 24, "Type b2DistanceOutput has unexpected offset.");
		static_assert(offsetof(b2DistanceOutput, iterations) == 28, "Type b2DistanceOutput has unexpected offset.");
		static_assert(offsetof(b2DistanceOutput, simplexCount) == 32, "Type b2DistanceOutput has unexpected offset.");
		static_assert(sizeof(b2TreeStats) == 8, "Type b2TreeStats has unexpected size.");
		static_assert(alignof(b2TreeStats) == 4, "Type b2TreeStats has unexpected alignment.");
		static_assert(offsetof(b2TreeStats, nodeVisits) == 0, "Type b2TreeStats has unexpected offset.");
		static_assert(offsetof(b2TreeStats, leafVisits) == 4, "Type b2TreeStats has unexpected offset.");
		static_assert(sizeof(b2Simplex) == 112, "Type b2Simplex has unexpected size.");
		static_assert(alignof(b2Simplex) == 4, "Type b2Simplex has unexpected alignment.");
		static_assert(offsetof(b2Simplex, v1) == 0, "Type b2Simplex has unexpected offset.");
		static_assert(offsetof(b2Simplex, v2) == 36, "Type b2Simplex has unexpected offset.");
		static_assert(offsetof(b2Simplex, v3) == 72, "Type b2Simplex has unexpected offset.");
		static_assert(offsetof(b2Simplex, count) == 108, "Type b2Simplex has unexpected offset.");
		static_assert(sizeof(b2ContactHitEvent) == 36, "Type b2ContactHitEvent has unexpected size.");
		static_assert(alignof(b2ContactHitEvent) == 4, "Type b2ContactHitEvent has unexpected alignment.");
		static_assert(offsetof(b2ContactHitEvent, shapeIdA) == 0, "Type b2ContactHitEvent has unexpected offset.");
		static_assert(offsetof(b2ContactHitEvent, shapeIdB) == 8, "Type b2ContactHitEvent has unexpected offset.");
		static_assert(offsetof(b2ContactHitEvent, point) == 16, "Type b2ContactHitEvent has unexpected offset.");
		static_assert(offsetof(b2ContactHitEvent, normal) == 24, "Type b2ContactHitEvent has unexpected offset.");
		static_assert(offsetof(b2ContactHitEvent, approachSpeed) == 32, "Type b2ContactHitEvent has unexpected offset.");
		static_assert(sizeof(b2Vec2) == 8, "Type b2Vec2 has unexpected size.");
		static_assert(alignof(b2Vec2) == 4, "Type b2Vec2 has unexpected alignment.");
		static_assert(offsetof(b2Vec2, x) == 0, "Type b2Vec2 has unexpected offset.");
		static_assert(offsetof(b2Vec2, y) == 4, "Type b2Vec2 has unexpected offset.");
		static_assert(sizeof(b2AABB) == 16, "Type b2AABB has unexpected size.");
		static_assert(alignof(b2AABB) == 4, "Type b2AABB has unexpected alignment.");
		static_assert(offsetof(b2AABB, lowerBound) == 0, "Type b2AABB has unexpected offset.");
		static_assert(offsetof(b2AABB, upperBound) == 8, "Type b2AABB has unexpected offset.");
		static_assert(sizeof(b2PlaneResult) == 24, "Type b2PlaneResult has unexpected size.");
		static_assert(alignof(b2PlaneResult) == 4, "Type b2PlaneResult has unexpected alignment.");
		static_assert(offsetof(b2PlaneResult, plane) == 0, "Type b2PlaneResult has unexpected offset.");
		static_assert(offsetof(b2PlaneResult, point) == 12, "Type b2PlaneResult has unexpected offset.");
		static_assert(offsetof(b2PlaneResult, hit) == 20, "Type b2PlaneResult has unexpected offset.");
		static_assert(sizeof(b2DistanceInput) == 180, "Type b2DistanceInput has unexpected size.");
		static_assert(alignof(b2DistanceInput) == 4, "Type b2DistanceInput has unexpected alignment.");
		static_assert(offsetof(b2DistanceInput, proxyA) == 0, "Type b2DistanceInput has unexpected offset.");
		static_assert(offsetof(b2DistanceInput, proxyB) == 72, "Type b2DistanceInput has unexpected offset.");
		static_assert(offsetof(b2DistanceInput, transformA) == 144, "Type b2DistanceInput has unexpected offset.");
		static_assert(offsetof(b2DistanceInput, transformB) == 160, "Type b2DistanceInput has unexpected offset.");
		static_assert(offsetof(b2DistanceInput, useRadii) == 176, "Type b2DistanceInput has unexpected offset.");
		static_assert(sizeof(b2ShapeCastPairInput) == 192, "Type b2ShapeCastPairInput has unexpected size.");
		static_assert(alignof(b2ShapeCastPairInput) == 4, "Type b2ShapeCastPairInput has unexpected alignment.");
		static_assert(offsetof(b2ShapeCastPairInput, proxyA) == 0, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, proxyB) == 72, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, transformA) == 144, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, transformB) == 160, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, translationB) == 176, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, maxFraction) == 184, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, canEncroach) == 188, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(sizeof(b2BodyEvents) == 8, "Type b2BodyEvents has unexpected size.");
		static_assert(alignof(b2BodyEvents) == 4, "Type b2BodyEvents has unexpected alignment.");
		static_assert(offsetof(b2BodyEvents, moveEvents) == 0, "Type b2BodyEvents has unexpected offset.");
		static_assert(offsetof(b2BodyEvents, moveCount) == 4, "Type b2BodyEvents has unexpected offset.");
		static_assert(sizeof(b2Version) == 12, "Type b2Version has unexpected size.");
		static_assert(alignof(b2Version) == 4, "Type b2Version has unexpected alignment.");
		static_assert(offsetof(b2Version, major) == 0, "Type b2Version has unexpected offset.");
		static_assert(offsetof(b2Version, minor) == 4, "Type b2Version has unexpected offset.");
		static_assert(offsetof(b2Version, revision) == 8, "Type b2Version has unexpected offset.");
		static_assert(sizeof(b2TOIInput) == 228, "Type b2TOIInput has unexpected size.");
		static_assert(alignof(b2TOIInput) == 4, "Type b2TOIInput has unexpected alignment.");
		static_assert(offsetof(b2TOIInput, proxyA) == 0, "Type b2TOIInput has unexpected offset.");
		static_assert(offsetof(b2TOIInput, proxyB) == 72, "Type b2TOIInput has unexpected offset.");
		static_assert(offsetof(b2TOIInput, sweepA) == 144, "Type b2TOIInput has unexpected offset.");
		static_assert(offsetof(b2TOIInput, sweepB) == 184, "Type b2TOIInput has unexpected offset.");
		static_assert(offsetof(b2TOIInput, maxFraction) == 224, "Type b2TOIInput has unexpected offset.");
		static_assert(sizeof(b2BodyDef) == 68, "Type b2BodyDef has unexpected size.");
		static_assert(alignof(b2BodyDef) == 4, "Type b2BodyDef has unexpected alignment.");
		static_assert(offsetof(b2BodyDef, type) == 0, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, position) == 4, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, rotation) == 12, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, linearVelocity) == 20, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, angularVelocity) == 28, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, linearDamping) == 32, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, angularDamping) == 36, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, gravityScale) == 40, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, sleepThreshold) == 44, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, name) == 48, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, userData) == 52, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, enableSleep) == 56, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, isAwake) == 57, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, fixedRotation) == 58, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, isBullet) == 59, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, isEnabled) == 60, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, allowFastRotation) == 61, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, internalValue) == 64, "Type b2BodyDef has unexpected offset.");
		static_assert(sizeof(b2DebugDraw) == 72, "Type b2DebugDraw has unexpected size.");
		static_assert(alignof(b2DebugDraw) == 4, "Type b2DebugDraw has unexpected alignment.");
		static_assert(offsetof(b2DebugDraw, DrawPolygonFcn) == 0, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawSolidPolygonFcn) == 4, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawCircleFcn) == 8, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawSolidCircleFcn) == 12, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawSolidCapsuleFcn) == 16, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawSegmentFcn) == 20, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawTransformFcn) == 24, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawPointFcn) == 28, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawStringFcn) == 32, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawingBounds) == 36, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, useDrawingBounds) == 52, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawShapes) == 53, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawJoints) == 54, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawJointExtras) == 55, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawBounds) == 56, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawMass) == 57, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawBodyNames) == 58, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawContacts) == 59, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawGraphColors) == 60, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawContactNormals) == 61, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawContactImpulses) == 62, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawContactFeatures) == 63, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawFrictionImpulses) == 64, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawIslands) == 65, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, context) == 68, "Type b2DebugDraw has unexpected offset.");
		static_assert(sizeof(b2DistanceJointDef) == 84, "Type b2DistanceJointDef has unexpected size.");
		static_assert(alignof(b2DistanceJointDef) == 4, "Type b2DistanceJointDef has unexpected alignment.");
		static_assert(offsetof(b2DistanceJointDef, bodyIdA) == 0, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, bodyIdB) == 8, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, localAnchorA) == 16, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, localAnchorB) == 24, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, length) == 32, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, enableSpring) == 36, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, hertz) == 40, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, dampingRatio) == 44, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, enableLimit) == 48, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, minLength) == 52, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, maxLength) == 56, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, enableMotor) == 60, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, maxMotorForce) == 64, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, motorSpeed) == 68, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, collideConnected) == 72, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, userData) == 76, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, internalValue) == 80, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(sizeof(b2Circle) == 12, "Type b2Circle has unexpected size.");
		static_assert(alignof(b2Circle) == 4, "Type b2Circle has unexpected alignment.");
		static_assert(offsetof(b2Circle, center) == 0, "Type b2Circle has unexpected offset.");
		static_assert(offsetof(b2Circle, radius) == 8, "Type b2Circle has unexpected offset.");
		static_assert(sizeof(b2QueryFilter) == 16, "Type b2QueryFilter has unexpected size.");
		static_assert(alignof(b2QueryFilter) == 8, "Type b2QueryFilter has unexpected alignment.");
		static_assert(offsetof(b2QueryFilter, categoryBits) == 0, "Type b2QueryFilter has unexpected offset.");
		static_assert(offsetof(b2QueryFilter, maskBits) == 8, "Type b2QueryFilter has unexpected offset.");
		static_assert(sizeof(b2ExplosionDef) == 32, "Type b2ExplosionDef has unexpected size.");
		static_assert(alignof(b2ExplosionDef) == 8, "Type b2ExplosionDef has unexpected alignment.");
		static_assert(offsetof(b2ExplosionDef, maskBits) == 0, "Type b2ExplosionDef has unexpected offset.");
		static_assert(offsetof(b2ExplosionDef, position) == 8, "Type b2ExplosionDef has unexpected offset.");
		static_assert(offsetof(b2ExplosionDef, radius) == 16, "Type b2ExplosionDef has unexpected offset.");
		static_assert(offsetof(b2ExplosionDef, falloff) == 20, "Type b2ExplosionDef has unexpected offset.");
		static_assert(offsetof(b2ExplosionDef, impulsePerLength) == 24, "Type b2ExplosionDef has unexpected offset.");
		#endif // defined(_WIN32) && ARCH_BITS == 32
		

		#if defined(_WIN32) && ARCH_BITS == 64
		static_assert(sizeof(const uint8_t) == 1, "Type const uint8_t has unexpected size.");
		static_assert(alignof(const uint8_t) == 1, "Type const uint8_t has unexpected alignment.");
		static_assert(sizeof(unsigned int) == 4, "Type unsigned int has unexpected size.");
		static_assert(alignof(unsigned int) == 4, "Type unsigned int has unexpected alignment.");
		static_assert(sizeof(uint16_t) == 2, "Type uint16_t has unexpected size.");
		static_assert(alignof(uint16_t) == 2, "Type uint16_t has unexpected alignment.");
		static_assert(sizeof(bool) == 1, "Type bool has unexpected size.");
		static_assert(alignof(bool) == 1, "Type bool has unexpected alignment.");
		static_assert(sizeof(uint64_t) == 8, "Type uint64_t has unexpected size.");
		static_assert(alignof(uint64_t) == 8, "Type uint64_t has unexpected alignment.");
		static_assert(sizeof(const char) == 1, "Type const char has unexpected size.");
		static_assert(alignof(const char) == 1, "Type const char has unexpected alignment.");
		static_assert(sizeof(uint32_t) == 4, "Type uint32_t has unexpected size.");
		static_assert(alignof(uint32_t) == 4, "Type uint32_t has unexpected alignment.");
		static_assert(sizeof(uint8_t) == 1, "Type uint8_t has unexpected size.");
		static_assert(alignof(uint8_t) == 1, "Type uint8_t has unexpected alignment.");
		static_assert(sizeof(float) == 4, "Type float has unexpected size.");
		static_assert(alignof(float) == 4, "Type float has unexpected alignment.");
		static_assert(sizeof(int) == 4, "Type int has unexpected size.");
		static_assert(alignof(int) == 4, "Type int has unexpected alignment.");
		static_assert(sizeof(int32_t) == 4, "Type int32_t has unexpected size.");
		static_assert(alignof(int32_t) == 4, "Type int32_t has unexpected alignment.");
		static_assert(sizeof(b2Sweep) == 40, "Type b2Sweep has unexpected size.");
		static_assert(alignof(b2Sweep) == 4, "Type b2Sweep has unexpected alignment.");
		static_assert(offsetof(b2Sweep, localCenter) == 0, "Type b2Sweep has unexpected offset.");
		static_assert(offsetof(b2Sweep, c1) == 8, "Type b2Sweep has unexpected offset.");
		static_assert(offsetof(b2Sweep, c2) == 16, "Type b2Sweep has unexpected offset.");
		static_assert(offsetof(b2Sweep, q1) == 24, "Type b2Sweep has unexpected offset.");
		static_assert(offsetof(b2Sweep, q2) == 32, "Type b2Sweep has unexpected offset.");
		static_assert(sizeof(b2SensorEndTouchEvent) == 16, "Type b2SensorEndTouchEvent has unexpected size.");
		static_assert(alignof(b2SensorEndTouchEvent) == 4, "Type b2SensorEndTouchEvent has unexpected alignment.");
		static_assert(offsetof(b2SensorEndTouchEvent, sensorShapeId) == 0, "Type b2SensorEndTouchEvent has unexpected offset.");
		static_assert(offsetof(b2SensorEndTouchEvent, visitorShapeId) == 8, "Type b2SensorEndTouchEvent has unexpected offset.");
		static_assert(sizeof(b2ContactEndTouchEvent) == 16, "Type b2ContactEndTouchEvent has unexpected size.");
		static_assert(alignof(b2ContactEndTouchEvent) == 4, "Type b2ContactEndTouchEvent has unexpected alignment.");
		static_assert(offsetof(b2ContactEndTouchEvent, shapeIdA) == 0, "Type b2ContactEndTouchEvent has unexpected offset.");
		static_assert(offsetof(b2ContactEndTouchEvent, shapeIdB) == 8, "Type b2ContactEndTouchEvent has unexpected offset.");
		static_assert(sizeof(b2Segment) == 16, "Type b2Segment has unexpected size.");
		static_assert(alignof(b2Segment) == 4, "Type b2Segment has unexpected alignment.");
		static_assert(offsetof(b2Segment, point1) == 0, "Type b2Segment has unexpected offset.");
		static_assert(offsetof(b2Segment, point2) == 8, "Type b2Segment has unexpected offset.");
		static_assert(sizeof(b2JointId) == 8, "Type b2JointId has unexpected size.");
		static_assert(alignof(b2JointId) == 4, "Type b2JointId has unexpected alignment.");
		static_assert(offsetof(b2JointId, index1) == 0, "Type b2JointId has unexpected offset.");
		static_assert(offsetof(b2JointId, world0) == 4, "Type b2JointId has unexpected offset.");
		static_assert(offsetof(b2JointId, generation) == 6, "Type b2JointId has unexpected offset.");
		static_assert(sizeof(b2ChainSegment) == 36, "Type b2ChainSegment has unexpected size.");
		static_assert(alignof(b2ChainSegment) == 4, "Type b2ChainSegment has unexpected alignment.");
		static_assert(offsetof(b2ChainSegment, ghost1) == 0, "Type b2ChainSegment has unexpected offset.");
		static_assert(offsetof(b2ChainSegment, segment) == 8, "Type b2ChainSegment has unexpected offset.");
		static_assert(offsetof(b2ChainSegment, ghost2) == 24, "Type b2ChainSegment has unexpected offset.");
		static_assert(offsetof(b2ChainSegment, chainId) == 32, "Type b2ChainSegment has unexpected offset.");
		static_assert(sizeof(b2PlaneSolverResult) == 12, "Type b2PlaneSolverResult has unexpected size.");
		static_assert(alignof(b2PlaneSolverResult) == 4, "Type b2PlaneSolverResult has unexpected alignment.");
		static_assert(offsetof(b2PlaneSolverResult, translation) == 0, "Type b2PlaneSolverResult has unexpected offset.");
		static_assert(offsetof(b2PlaneSolverResult, iterationCount) == 8, "Type b2PlaneSolverResult has unexpected offset.");
		static_assert(sizeof(b2MotorJointDef) == 64, "Type b2MotorJointDef has unexpected size.");
		static_assert(alignof(b2MotorJointDef) == 8, "Type b2MotorJointDef has unexpected alignment.");
		static_assert(offsetof(b2MotorJointDef, bodyIdA) == 0, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, bodyIdB) == 8, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, linearOffset) == 16, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, angularOffset) == 24, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, maxForce) == 28, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, maxTorque) == 32, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, correctionFactor) == 36, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, collideConnected) == 40, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, userData) == 48, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, internalValue) == 56, "Type b2MotorJointDef has unexpected offset.");
		static_assert(sizeof(b2Profile) == 88, "Type b2Profile has unexpected size.");
		static_assert(alignof(b2Profile) == 4, "Type b2Profile has unexpected alignment.");
		static_assert(offsetof(b2Profile, step) == 0, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, pairs) == 4, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, collide) == 8, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, solve) == 12, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, mergeIslands) == 16, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, prepareStages) == 20, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, solveConstraints) == 24, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, prepareConstraints) == 28, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, integrateVelocities) == 32, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, warmStart) == 36, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, solveImpulses) == 40, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, integratePositions) == 44, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, relaxImpulses) == 48, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, applyRestitution) == 52, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, storeImpulses) == 56, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, splitIslands) == 60, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, transforms) == 64, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, hitEvents) == 68, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, refit) == 72, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, bullets) == 76, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, sleepIslands) == 80, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, sensors) == 84, "Type b2Profile has unexpected offset.");
		static_assert(sizeof(b2Counters) == 88, "Type b2Counters has unexpected size.");
		static_assert(alignof(b2Counters) == 4, "Type b2Counters has unexpected alignment.");
		static_assert(offsetof(b2Counters, bodyCount) == 0, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, shapeCount) == 4, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, contactCount) == 8, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, jointCount) == 12, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, islandCount) == 16, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, stackUsed) == 20, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, staticTreeHeight) == 24, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, treeHeight) == 28, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, byteCount) == 32, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, taskCount) == 36, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, colorCounts) == 40, "Type b2Counters has unexpected offset.");
		static_assert(sizeof(b2SensorEvents) == 24, "Type b2SensorEvents has unexpected size.");
		static_assert(alignof(b2SensorEvents) == 8, "Type b2SensorEvents has unexpected alignment.");
		static_assert(offsetof(b2SensorEvents, beginEvents) == 0, "Type b2SensorEvents has unexpected offset.");
		static_assert(offsetof(b2SensorEvents, endEvents) == 8, "Type b2SensorEvents has unexpected offset.");
		static_assert(offsetof(b2SensorEvents, beginCount) == 16, "Type b2SensorEvents has unexpected offset.");
		static_assert(offsetof(b2SensorEvents, endCount) == 20, "Type b2SensorEvents has unexpected offset.");
		static_assert(sizeof(b2RayResult) == 40, "Type b2RayResult has unexpected size.");
		static_assert(alignof(b2RayResult) == 4, "Type b2RayResult has unexpected alignment.");
		static_assert(offsetof(b2RayResult, shapeId) == 0, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, point) == 8, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, normal) == 16, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, fraction) == 24, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, nodeVisits) == 28, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, leafVisits) == 32, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, hit) == 36, "Type b2RayResult has unexpected offset.");
		static_assert(sizeof(b2CastOutput) == 28, "Type b2CastOutput has unexpected size.");
		static_assert(alignof(b2CastOutput) == 4, "Type b2CastOutput has unexpected alignment.");
		static_assert(offsetof(b2CastOutput, normal) == 0, "Type b2CastOutput has unexpected offset.");
		static_assert(offsetof(b2CastOutput, point) == 8, "Type b2CastOutput has unexpected offset.");
		static_assert(offsetof(b2CastOutput, fraction) == 16, "Type b2CastOutput has unexpected offset.");
		static_assert(offsetof(b2CastOutput, iterations) == 20, "Type b2CastOutput has unexpected offset.");
		static_assert(offsetof(b2CastOutput, hit) == 24, "Type b2CastOutput has unexpected offset.");
		static_assert(sizeof(b2ContactBeginTouchEvent) == 128, "Type b2ContactBeginTouchEvent has unexpected size.");
		static_assert(alignof(b2ContactBeginTouchEvent) == 4, "Type b2ContactBeginTouchEvent has unexpected alignment.");
		static_assert(offsetof(b2ContactBeginTouchEvent, shapeIdA) == 0, "Type b2ContactBeginTouchEvent has unexpected offset.");
		static_assert(offsetof(b2ContactBeginTouchEvent, shapeIdB) == 8, "Type b2ContactBeginTouchEvent has unexpected offset.");
		static_assert(offsetof(b2ContactBeginTouchEvent, manifold) == 16, "Type b2ContactBeginTouchEvent has unexpected offset.");
		static_assert(sizeof(b2DynamicTree) == 72, "Type b2DynamicTree has unexpected size.");
		static_assert(alignof(b2DynamicTree) == 8, "Type b2DynamicTree has unexpected alignment.");
		static_assert(offsetof(b2DynamicTree, nodes) == 0, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, root) == 8, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, nodeCount) == 12, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, nodeCapacity) == 16, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, freeList) == 20, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, proxyCount) == 24, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, leafIndices) == 32, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, leafBoxes) == 40, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, leafCenters) == 48, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, binIndices) == 56, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, rebuildCapacity) == 64, "Type b2DynamicTree has unexpected offset.");
		static_assert(sizeof(b2FilterJointDef) == 32, "Type b2FilterJointDef has unexpected size.");
		static_assert(alignof(b2FilterJointDef) == 8, "Type b2FilterJointDef has unexpected alignment.");
		static_assert(offsetof(b2FilterJointDef, bodyIdA) == 0, "Type b2FilterJointDef has unexpected offset.");
		static_assert(offsetof(b2FilterJointDef, bodyIdB) == 8, "Type b2FilterJointDef has unexpected offset.");
		static_assert(offsetof(b2FilterJointDef, userData) == 16, "Type b2FilterJointDef has unexpected offset.");
		static_assert(offsetof(b2FilterJointDef, internalValue) == 24, "Type b2FilterJointDef has unexpected offset.");
		static_assert(sizeof(b2WheelJointDef) == 96, "Type b2WheelJointDef has unexpected size.");
		static_assert(alignof(b2WheelJointDef) == 8, "Type b2WheelJointDef has unexpected alignment.");
		static_assert(offsetof(b2WheelJointDef, bodyIdA) == 0, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, bodyIdB) == 8, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, localAnchorA) == 16, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, localAnchorB) == 24, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, localAxisA) == 32, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, enableSpring) == 40, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, hertz) == 44, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, dampingRatio) == 48, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, enableLimit) == 52, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, lowerTranslation) == 56, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, upperTranslation) == 60, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, enableMotor) == 64, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, maxMotorTorque) == 68, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, motorSpeed) == 72, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, collideConnected) == 76, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, userData) == 80, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, internalValue) == 88, "Type b2WheelJointDef has unexpected offset.");
		static_assert(sizeof(b2ContactData) == 128, "Type b2ContactData has unexpected size.");
		static_assert(alignof(b2ContactData) == 4, "Type b2ContactData has unexpected alignment.");
		static_assert(offsetof(b2ContactData, shapeIdA) == 0, "Type b2ContactData has unexpected offset.");
		static_assert(offsetof(b2ContactData, shapeIdB) == 8, "Type b2ContactData has unexpected offset.");
		static_assert(offsetof(b2ContactData, manifold) == 16, "Type b2ContactData has unexpected offset.");
		static_assert(sizeof(b2SegmentDistanceResult) == 28, "Type b2SegmentDistanceResult has unexpected size.");
		static_assert(alignof(b2SegmentDistanceResult) == 4, "Type b2SegmentDistanceResult has unexpected alignment.");
		static_assert(offsetof(b2SegmentDistanceResult, closest1) == 0, "Type b2SegmentDistanceResult has unexpected offset.");
		static_assert(offsetof(b2SegmentDistanceResult, closest2) == 8, "Type b2SegmentDistanceResult has unexpected offset.");
		static_assert(offsetof(b2SegmentDistanceResult, fraction1) == 16, "Type b2SegmentDistanceResult has unexpected offset.");
		static_assert(offsetof(b2SegmentDistanceResult, fraction2) == 20, "Type b2SegmentDistanceResult has unexpected offset.");
		static_assert(offsetof(b2SegmentDistanceResult, distanceSquared) == 24, "Type b2SegmentDistanceResult has unexpected offset.");
		static_assert(sizeof(b2BodyId) == 8, "Type b2BodyId has unexpected size.");
		static_assert(alignof(b2BodyId) == 4, "Type b2BodyId has unexpected alignment.");
		static_assert(offsetof(b2BodyId, index1) == 0, "Type b2BodyId has unexpected offset.");
		static_assert(offsetof(b2BodyId, world0) == 4, "Type b2BodyId has unexpected offset.");
		static_assert(offsetof(b2BodyId, generation) == 6, "Type b2BodyId has unexpected offset.");
		static_assert(sizeof(b2WeldJointDef) == 72, "Type b2WeldJointDef has unexpected size.");
		static_assert(alignof(b2WeldJointDef) == 8, "Type b2WeldJointDef has unexpected alignment.");
		static_assert(offsetof(b2WeldJointDef, bodyIdA) == 0, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, bodyIdB) == 8, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, localAnchorA) == 16, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, localAnchorB) == 24, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, referenceAngle) == 32, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, linearHertz) == 36, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, angularHertz) == 40, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, linearDampingRatio) == 44, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, angularDampingRatio) == 48, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, collideConnected) == 52, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, userData) == 56, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, internalValue) == 64, "Type b2WeldJointDef has unexpected offset.");
		static_assert(sizeof(b2Manifold) == 112, "Type b2Manifold has unexpected size.");
		static_assert(alignof(b2Manifold) == 4, "Type b2Manifold has unexpected alignment.");
		static_assert(offsetof(b2Manifold, normal) == 0, "Type b2Manifold has unexpected offset.");
		static_assert(offsetof(b2Manifold, rollingImpulse) == 8, "Type b2Manifold has unexpected offset.");
		static_assert(offsetof(b2Manifold, points) == 12, "Type b2Manifold has unexpected offset.");
		static_assert(offsetof(b2Manifold, pointCount) == 108, "Type b2Manifold has unexpected offset.");
		static_assert(sizeof(b2Plane) == 12, "Type b2Plane has unexpected size.");
		static_assert(alignof(b2Plane) == 4, "Type b2Plane has unexpected alignment.");
		static_assert(offsetof(b2Plane, normal) == 0, "Type b2Plane has unexpected offset.");
		static_assert(offsetof(b2Plane, offset) == 8, "Type b2Plane has unexpected offset.");
		static_assert(sizeof(b2ShapeCastInput) == 88, "Type b2ShapeCastInput has unexpected size.");
		static_assert(alignof(b2ShapeCastInput) == 4, "Type b2ShapeCastInput has unexpected alignment.");
		static_assert(offsetof(b2ShapeCastInput, proxy) == 0, "Type b2ShapeCastInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastInput, translation) == 72, "Type b2ShapeCastInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastInput, maxFraction) == 80, "Type b2ShapeCastInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastInput, canEncroach) == 84, "Type b2ShapeCastInput has unexpected offset.");
		static_assert(sizeof(b2SurfaceMaterial) == 24, "Type b2SurfaceMaterial has unexpected size.");
		static_assert(alignof(b2SurfaceMaterial) == 4, "Type b2SurfaceMaterial has unexpected alignment.");
		static_assert(offsetof(b2SurfaceMaterial, friction) == 0, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(offsetof(b2SurfaceMaterial, restitution) == 4, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(offsetof(b2SurfaceMaterial, rollingResistance) == 8, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(offsetof(b2SurfaceMaterial, tangentSpeed) == 12, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(offsetof(b2SurfaceMaterial, userMaterialId) == 16, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(offsetof(b2SurfaceMaterial, customColor) == 20, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(sizeof(b2RevoluteJointDef) == 104, "Type b2RevoluteJointDef has unexpected size.");
		static_assert(alignof(b2RevoluteJointDef) == 8, "Type b2RevoluteJointDef has unexpected alignment.");
		static_assert(offsetof(b2RevoluteJointDef, bodyIdA) == 0, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, bodyIdB) == 8, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, localAnchorA) == 16, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, localAnchorB) == 24, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, referenceAngle) == 32, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, targetAngle) == 36, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, enableSpring) == 40, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, hertz) == 44, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, dampingRatio) == 48, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, enableLimit) == 52, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, lowerAngle) == 56, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, upperAngle) == 60, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, enableMotor) == 64, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, maxMotorTorque) == 68, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, motorSpeed) == 72, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, drawSize) == 76, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, collideConnected) == 80, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, userData) == 88, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, internalValue) == 96, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(sizeof(b2Capsule) == 20, "Type b2Capsule has unexpected size.");
		static_assert(alignof(b2Capsule) == 4, "Type b2Capsule has unexpected alignment.");
		static_assert(offsetof(b2Capsule, center1) == 0, "Type b2Capsule has unexpected offset.");
		static_assert(offsetof(b2Capsule, center2) == 8, "Type b2Capsule has unexpected offset.");
		static_assert(offsetof(b2Capsule, radius) == 16, "Type b2Capsule has unexpected offset.");
		static_assert(sizeof(b2Transform) == 16, "Type b2Transform has unexpected size.");
		static_assert(alignof(b2Transform) == 4, "Type b2Transform has unexpected alignment.");
		static_assert(offsetof(b2Transform, p) == 0, "Type b2Transform has unexpected offset.");
		static_assert(offsetof(b2Transform, q) == 8, "Type b2Transform has unexpected offset.");
		static_assert(sizeof(b2MouseJointDef) == 56, "Type b2MouseJointDef has unexpected size.");
		static_assert(alignof(b2MouseJointDef) == 8, "Type b2MouseJointDef has unexpected alignment.");
		static_assert(offsetof(b2MouseJointDef, bodyIdA) == 0, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, bodyIdB) == 8, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, target) == 16, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, hertz) == 24, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, dampingRatio) == 28, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, maxForce) == 32, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, collideConnected) == 36, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, userData) == 40, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, internalValue) == 48, "Type b2MouseJointDef has unexpected offset.");
		static_assert(sizeof(b2Mat22) == 16, "Type b2Mat22 has unexpected size.");
		static_assert(alignof(b2Mat22) == 4, "Type b2Mat22 has unexpected alignment.");
		static_assert(offsetof(b2Mat22, cx) == 0, "Type b2Mat22 has unexpected offset.");
		static_assert(offsetof(b2Mat22, cy) == 8, "Type b2Mat22 has unexpected offset.");
		static_assert(sizeof(b2CollisionPlane) == 24, "Type b2CollisionPlane has unexpected size.");
		static_assert(alignof(b2CollisionPlane) == 4, "Type b2CollisionPlane has unexpected alignment.");
		static_assert(offsetof(b2CollisionPlane, plane) == 0, "Type b2CollisionPlane has unexpected offset.");
		static_assert(offsetof(b2CollisionPlane, pushLimit) == 12, "Type b2CollisionPlane has unexpected offset.");
		static_assert(offsetof(b2CollisionPlane, push) == 16, "Type b2CollisionPlane has unexpected offset.");
		static_assert(offsetof(b2CollisionPlane, clipVelocity) == 20, "Type b2CollisionPlane has unexpected offset.");
		static_assert(sizeof(b2Filter) == 24, "Type b2Filter has unexpected size.");
		static_assert(alignof(b2Filter) == 8, "Type b2Filter has unexpected alignment.");
		static_assert(offsetof(b2Filter, categoryBits) == 0, "Type b2Filter has unexpected offset.");
		static_assert(offsetof(b2Filter, maskBits) == 8, "Type b2Filter has unexpected offset.");
		static_assert(offsetof(b2Filter, groupIndex) == 16, "Type b2Filter has unexpected offset.");
		static_assert(sizeof(b2ShapeProxy) == 72, "Type b2ShapeProxy has unexpected size.");
		static_assert(alignof(b2ShapeProxy) == 4, "Type b2ShapeProxy has unexpected alignment.");
		static_assert(offsetof(b2ShapeProxy, points) == 0, "Type b2ShapeProxy has unexpected offset.");
		static_assert(offsetof(b2ShapeProxy, count) == 64, "Type b2ShapeProxy has unexpected offset.");
		static_assert(offsetof(b2ShapeProxy, radius) == 68, "Type b2ShapeProxy has unexpected offset.");
		static_assert(sizeof(b2ShapeDef) == 80, "Type b2ShapeDef has unexpected size.");
		static_assert(alignof(b2ShapeDef) == 8, "Type b2ShapeDef has unexpected alignment.");
		static_assert(offsetof(b2ShapeDef, userData) == 0, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, material) == 8, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, density) == 32, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, filter) == 40, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, isSensor) == 64, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, enableSensorEvents) == 65, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, enableContactEvents) == 66, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, enableHitEvents) == 67, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, enablePreSolveEvents) == 68, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, invokeContactCreation) == 69, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, updateBodyMass) == 70, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, internalValue) == 72, "Type b2ShapeDef has unexpected offset.");
		static_assert(sizeof(b2ShapeId) == 8, "Type b2ShapeId has unexpected size.");
		static_assert(alignof(b2ShapeId) == 4, "Type b2ShapeId has unexpected alignment.");
		static_assert(offsetof(b2ShapeId, index1) == 0, "Type b2ShapeId has unexpected offset.");
		static_assert(offsetof(b2ShapeId, world0) == 4, "Type b2ShapeId has unexpected offset.");
		static_assert(offsetof(b2ShapeId, generation) == 6, "Type b2ShapeId has unexpected offset.");
		static_assert(sizeof(b2Polygon) == 144, "Type b2Polygon has unexpected size.");
		static_assert(alignof(b2Polygon) == 4, "Type b2Polygon has unexpected alignment.");
		static_assert(offsetof(b2Polygon, vertices) == 0, "Type b2Polygon has unexpected offset.");
		static_assert(offsetof(b2Polygon, normals) == 64, "Type b2Polygon has unexpected offset.");
		static_assert(offsetof(b2Polygon, centroid) == 128, "Type b2Polygon has unexpected offset.");
		static_assert(offsetof(b2Polygon, radius) == 136, "Type b2Polygon has unexpected offset.");
		static_assert(offsetof(b2Polygon, count) == 140, "Type b2Polygon has unexpected offset.");
		static_assert(sizeof(b2WorldDef) == 96, "Type b2WorldDef has unexpected size.");
		static_assert(alignof(b2WorldDef) == 8, "Type b2WorldDef has unexpected alignment.");
		static_assert(offsetof(b2WorldDef, gravity) == 0, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, restitutionThreshold) == 8, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, hitEventThreshold) == 12, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, contactHertz) == 16, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, contactDampingRatio) == 20, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, maxContactPushSpeed) == 24, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, maximumLinearSpeed) == 28, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, frictionCallback) == 32, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, restitutionCallback) == 40, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, enableSleep) == 48, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, enableContinuous) == 49, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, workerCount) == 52, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, enqueueTask) == 56, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, finishTask) == 64, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, userTaskContext) == 72, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, userData) == 80, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, internalValue) == 88, "Type b2WorldDef has unexpected offset.");
		static_assert(sizeof(b2ManifoldPoint) == 48, "Type b2ManifoldPoint has unexpected size.");
		static_assert(alignof(b2ManifoldPoint) == 4, "Type b2ManifoldPoint has unexpected alignment.");
		static_assert(offsetof(b2ManifoldPoint, point) == 0, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, anchorA) == 8, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, anchorB) == 16, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, separation) == 24, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, normalImpulse) == 28, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, tangentImpulse) == 32, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, totalNormalImpulse) == 36, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, normalVelocity) == 40, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, id) == 44, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, persisted) == 46, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(sizeof(b2ChainDef) == 72, "Type b2ChainDef has unexpected size.");
		static_assert(alignof(b2ChainDef) == 8, "Type b2ChainDef has unexpected alignment.");
		static_assert(offsetof(b2ChainDef, userData) == 0, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, points) == 8, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, count) == 16, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, materials) == 24, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, materialCount) == 32, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, filter) == 40, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, isLoop) == 64, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, enableSensorEvents) == 65, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, internalValue) == 68, "Type b2ChainDef has unexpected offset.");
		static_assert(sizeof(b2ContactEvents) == 40, "Type b2ContactEvents has unexpected size.");
		static_assert(alignof(b2ContactEvents) == 8, "Type b2ContactEvents has unexpected alignment.");
		static_assert(offsetof(b2ContactEvents, beginEvents) == 0, "Type b2ContactEvents has unexpected offset.");
		static_assert(offsetof(b2ContactEvents, endEvents) == 8, "Type b2ContactEvents has unexpected offset.");
		static_assert(offsetof(b2ContactEvents, hitEvents) == 16, "Type b2ContactEvents has unexpected offset.");
		static_assert(offsetof(b2ContactEvents, beginCount) == 24, "Type b2ContactEvents has unexpected offset.");
		static_assert(offsetof(b2ContactEvents, endCount) == 28, "Type b2ContactEvents has unexpected offset.");
		static_assert(offsetof(b2ContactEvents, hitCount) == 32, "Type b2ContactEvents has unexpected offset.");
		static_assert(sizeof(b2BodyMoveEvent) == 40, "Type b2BodyMoveEvent has unexpected size.");
		static_assert(alignof(b2BodyMoveEvent) == 8, "Type b2BodyMoveEvent has unexpected alignment.");
		static_assert(offsetof(b2BodyMoveEvent, transform) == 0, "Type b2BodyMoveEvent has unexpected offset.");
		static_assert(offsetof(b2BodyMoveEvent, bodyId) == 16, "Type b2BodyMoveEvent has unexpected offset.");
		static_assert(offsetof(b2BodyMoveEvent, userData) == 24, "Type b2BodyMoveEvent has unexpected offset.");
		static_assert(offsetof(b2BodyMoveEvent, fellAsleep) == 32, "Type b2BodyMoveEvent has unexpected offset.");
		static_assert(sizeof(b2MassData) == 16, "Type b2MassData has unexpected size.");
		static_assert(alignof(b2MassData) == 4, "Type b2MassData has unexpected alignment.");
		static_assert(offsetof(b2MassData, mass) == 0, "Type b2MassData has unexpected offset.");
		static_assert(offsetof(b2MassData, center) == 4, "Type b2MassData has unexpected offset.");
		static_assert(offsetof(b2MassData, rotationalInertia) == 12, "Type b2MassData has unexpected offset.");
		static_assert(sizeof(b2SimplexVertex) == 36, "Type b2SimplexVertex has unexpected size.");
		static_assert(alignof(b2SimplexVertex) == 4, "Type b2SimplexVertex has unexpected alignment.");
		static_assert(offsetof(b2SimplexVertex, wA) == 0, "Type b2SimplexVertex has unexpected offset.");
		static_assert(offsetof(b2SimplexVertex, wB) == 8, "Type b2SimplexVertex has unexpected offset.");
		static_assert(offsetof(b2SimplexVertex, w) == 16, "Type b2SimplexVertex has unexpected offset.");
		static_assert(offsetof(b2SimplexVertex, a) == 24, "Type b2SimplexVertex has unexpected offset.");
		static_assert(offsetof(b2SimplexVertex, indexA) == 28, "Type b2SimplexVertex has unexpected offset.");
		static_assert(offsetof(b2SimplexVertex, indexB) == 32, "Type b2SimplexVertex has unexpected offset.");
		static_assert(sizeof(b2TOIOutput) == 8, "Type b2TOIOutput has unexpected size.");
		static_assert(alignof(b2TOIOutput) == 4, "Type b2TOIOutput has unexpected alignment.");
		static_assert(offsetof(b2TOIOutput, state) == 0, "Type b2TOIOutput has unexpected offset.");
		static_assert(offsetof(b2TOIOutput, fraction) == 4, "Type b2TOIOutput has unexpected offset.");
		static_assert(sizeof(b2CosSin) == 8, "Type b2CosSin has unexpected size.");
		static_assert(alignof(b2CosSin) == 4, "Type b2CosSin has unexpected alignment.");
		static_assert(offsetof(b2CosSin, cosine) == 0, "Type b2CosSin has unexpected offset.");
		static_assert(offsetof(b2CosSin, sine) == 4, "Type b2CosSin has unexpected offset.");
		static_assert(sizeof(b2WorldId) == 4, "Type b2WorldId has unexpected size.");
		static_assert(alignof(b2WorldId) == 2, "Type b2WorldId has unexpected alignment.");
		static_assert(offsetof(b2WorldId, index1) == 0, "Type b2WorldId has unexpected offset.");
		static_assert(offsetof(b2WorldId, generation) == 2, "Type b2WorldId has unexpected offset.");
		static_assert(sizeof(b2PrismaticJointDef) == 104, "Type b2PrismaticJointDef has unexpected size.");
		static_assert(alignof(b2PrismaticJointDef) == 8, "Type b2PrismaticJointDef has unexpected alignment.");
		static_assert(offsetof(b2PrismaticJointDef, bodyIdA) == 0, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, bodyIdB) == 8, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, localAnchorA) == 16, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, localAnchorB) == 24, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, localAxisA) == 32, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, referenceAngle) == 40, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, targetTranslation) == 44, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, enableSpring) == 48, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, hertz) == 52, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, dampingRatio) == 56, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, enableLimit) == 60, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, lowerTranslation) == 64, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, upperTranslation) == 68, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, enableMotor) == 72, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, maxMotorForce) == 76, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, motorSpeed) == 80, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, collideConnected) == 84, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, userData) == 88, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, internalValue) == 96, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(sizeof(b2Rot) == 8, "Type b2Rot has unexpected size.");
		static_assert(alignof(b2Rot) == 4, "Type b2Rot has unexpected alignment.");
		static_assert(offsetof(b2Rot, c) == 0, "Type b2Rot has unexpected offset.");
		static_assert(offsetof(b2Rot, s) == 4, "Type b2Rot has unexpected offset.");
		static_assert(sizeof(b2SimplexCache) == 8, "Type b2SimplexCache has unexpected size.");
		static_assert(alignof(b2SimplexCache) == 2, "Type b2SimplexCache has unexpected alignment.");
		static_assert(offsetof(b2SimplexCache, count) == 0, "Type b2SimplexCache has unexpected offset.");
		static_assert(offsetof(b2SimplexCache, indexA) == 2, "Type b2SimplexCache has unexpected offset.");
		static_assert(offsetof(b2SimplexCache, indexB) == 5, "Type b2SimplexCache has unexpected offset.");
		static_assert(sizeof(b2SensorBeginTouchEvent) == 16, "Type b2SensorBeginTouchEvent has unexpected size.");
		static_assert(alignof(b2SensorBeginTouchEvent) == 4, "Type b2SensorBeginTouchEvent has unexpected alignment.");
		static_assert(offsetof(b2SensorBeginTouchEvent, sensorShapeId) == 0, "Type b2SensorBeginTouchEvent has unexpected offset.");
		static_assert(offsetof(b2SensorBeginTouchEvent, visitorShapeId) == 8, "Type b2SensorBeginTouchEvent has unexpected offset.");
		static_assert(sizeof(b2Hull) == 68, "Type b2Hull has unexpected size.");
		static_assert(alignof(b2Hull) == 4, "Type b2Hull has unexpected alignment.");
		static_assert(offsetof(b2Hull, points) == 0, "Type b2Hull has unexpected offset.");
		static_assert(offsetof(b2Hull, count) == 64, "Type b2Hull has unexpected offset.");
		static_assert(sizeof(b2ChainId) == 8, "Type b2ChainId has unexpected size.");
		static_assert(alignof(b2ChainId) == 4, "Type b2ChainId has unexpected alignment.");
		static_assert(offsetof(b2ChainId, index1) == 0, "Type b2ChainId has unexpected offset.");
		static_assert(offsetof(b2ChainId, world0) == 4, "Type b2ChainId has unexpected offset.");
		static_assert(offsetof(b2ChainId, generation) == 6, "Type b2ChainId has unexpected offset.");
		static_assert(sizeof(b2RayCastInput) == 20, "Type b2RayCastInput has unexpected size.");
		static_assert(alignof(b2RayCastInput) == 4, "Type b2RayCastInput has unexpected alignment.");
		static_assert(offsetof(b2RayCastInput, origin) == 0, "Type b2RayCastInput has unexpected offset.");
		static_assert(offsetof(b2RayCastInput, translation) == 8, "Type b2RayCastInput has unexpected offset.");
		static_assert(offsetof(b2RayCastInput, maxFraction) == 16, "Type b2RayCastInput has unexpected offset.");
		static_assert(sizeof(b2DistanceOutput) == 36, "Type b2DistanceOutput has unexpected size.");
		static_assert(alignof(b2DistanceOutput) == 4, "Type b2DistanceOutput has unexpected alignment.");
		static_assert(offsetof(b2DistanceOutput, pointA) == 0, "Type b2DistanceOutput has unexpected offset.");
		static_assert(offsetof(b2DistanceOutput, pointB) == 8, "Type b2DistanceOutput has unexpected offset.");
		static_assert(offsetof(b2DistanceOutput, normal) == 16, "Type b2DistanceOutput has unexpected offset.");
		static_assert(offsetof(b2DistanceOutput, distance) == 24, "Type b2DistanceOutput has unexpected offset.");
		static_assert(offsetof(b2DistanceOutput, iterations) == 28, "Type b2DistanceOutput has unexpected offset.");
		static_assert(offsetof(b2DistanceOutput, simplexCount) == 32, "Type b2DistanceOutput has unexpected offset.");
		static_assert(sizeof(b2TreeStats) == 8, "Type b2TreeStats has unexpected size.");
		static_assert(alignof(b2TreeStats) == 4, "Type b2TreeStats has unexpected alignment.");
		static_assert(offsetof(b2TreeStats, nodeVisits) == 0, "Type b2TreeStats has unexpected offset.");
		static_assert(offsetof(b2TreeStats, leafVisits) == 4, "Type b2TreeStats has unexpected offset.");
		static_assert(sizeof(b2Simplex) == 112, "Type b2Simplex has unexpected size.");
		static_assert(alignof(b2Simplex) == 4, "Type b2Simplex has unexpected alignment.");
		static_assert(offsetof(b2Simplex, v1) == 0, "Type b2Simplex has unexpected offset.");
		static_assert(offsetof(b2Simplex, v2) == 36, "Type b2Simplex has unexpected offset.");
		static_assert(offsetof(b2Simplex, v3) == 72, "Type b2Simplex has unexpected offset.");
		static_assert(offsetof(b2Simplex, count) == 108, "Type b2Simplex has unexpected offset.");
		static_assert(sizeof(b2ContactHitEvent) == 36, "Type b2ContactHitEvent has unexpected size.");
		static_assert(alignof(b2ContactHitEvent) == 4, "Type b2ContactHitEvent has unexpected alignment.");
		static_assert(offsetof(b2ContactHitEvent, shapeIdA) == 0, "Type b2ContactHitEvent has unexpected offset.");
		static_assert(offsetof(b2ContactHitEvent, shapeIdB) == 8, "Type b2ContactHitEvent has unexpected offset.");
		static_assert(offsetof(b2ContactHitEvent, point) == 16, "Type b2ContactHitEvent has unexpected offset.");
		static_assert(offsetof(b2ContactHitEvent, normal) == 24, "Type b2ContactHitEvent has unexpected offset.");
		static_assert(offsetof(b2ContactHitEvent, approachSpeed) == 32, "Type b2ContactHitEvent has unexpected offset.");
		static_assert(sizeof(b2Vec2) == 8, "Type b2Vec2 has unexpected size.");
		static_assert(alignof(b2Vec2) == 4, "Type b2Vec2 has unexpected alignment.");
		static_assert(offsetof(b2Vec2, x) == 0, "Type b2Vec2 has unexpected offset.");
		static_assert(offsetof(b2Vec2, y) == 4, "Type b2Vec2 has unexpected offset.");
		static_assert(sizeof(b2AABB) == 16, "Type b2AABB has unexpected size.");
		static_assert(alignof(b2AABB) == 4, "Type b2AABB has unexpected alignment.");
		static_assert(offsetof(b2AABB, lowerBound) == 0, "Type b2AABB has unexpected offset.");
		static_assert(offsetof(b2AABB, upperBound) == 8, "Type b2AABB has unexpected offset.");
		static_assert(sizeof(b2PlaneResult) == 24, "Type b2PlaneResult has unexpected size.");
		static_assert(alignof(b2PlaneResult) == 4, "Type b2PlaneResult has unexpected alignment.");
		static_assert(offsetof(b2PlaneResult, plane) == 0, "Type b2PlaneResult has unexpected offset.");
		static_assert(offsetof(b2PlaneResult, point) == 12, "Type b2PlaneResult has unexpected offset.");
		static_assert(offsetof(b2PlaneResult, hit) == 20, "Type b2PlaneResult has unexpected offset.");
		static_assert(sizeof(b2DistanceInput) == 180, "Type b2DistanceInput has unexpected size.");
		static_assert(alignof(b2DistanceInput) == 4, "Type b2DistanceInput has unexpected alignment.");
		static_assert(offsetof(b2DistanceInput, proxyA) == 0, "Type b2DistanceInput has unexpected offset.");
		static_assert(offsetof(b2DistanceInput, proxyB) == 72, "Type b2DistanceInput has unexpected offset.");
		static_assert(offsetof(b2DistanceInput, transformA) == 144, "Type b2DistanceInput has unexpected offset.");
		static_assert(offsetof(b2DistanceInput, transformB) == 160, "Type b2DistanceInput has unexpected offset.");
		static_assert(offsetof(b2DistanceInput, useRadii) == 176, "Type b2DistanceInput has unexpected offset.");
		static_assert(sizeof(b2ShapeCastPairInput) == 192, "Type b2ShapeCastPairInput has unexpected size.");
		static_assert(alignof(b2ShapeCastPairInput) == 4, "Type b2ShapeCastPairInput has unexpected alignment.");
		static_assert(offsetof(b2ShapeCastPairInput, proxyA) == 0, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, proxyB) == 72, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, transformA) == 144, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, transformB) == 160, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, translationB) == 176, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, maxFraction) == 184, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, canEncroach) == 188, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(sizeof(b2BodyEvents) == 16, "Type b2BodyEvents has unexpected size.");
		static_assert(alignof(b2BodyEvents) == 8, "Type b2BodyEvents has unexpected alignment.");
		static_assert(offsetof(b2BodyEvents, moveEvents) == 0, "Type b2BodyEvents has unexpected offset.");
		static_assert(offsetof(b2BodyEvents, moveCount) == 8, "Type b2BodyEvents has unexpected offset.");
		static_assert(sizeof(b2Version) == 12, "Type b2Version has unexpected size.");
		static_assert(alignof(b2Version) == 4, "Type b2Version has unexpected alignment.");
		static_assert(offsetof(b2Version, major) == 0, "Type b2Version has unexpected offset.");
		static_assert(offsetof(b2Version, minor) == 4, "Type b2Version has unexpected offset.");
		static_assert(offsetof(b2Version, revision) == 8, "Type b2Version has unexpected offset.");
		static_assert(sizeof(b2TOIInput) == 228, "Type b2TOIInput has unexpected size.");
		static_assert(alignof(b2TOIInput) == 4, "Type b2TOIInput has unexpected alignment.");
		static_assert(offsetof(b2TOIInput, proxyA) == 0, "Type b2TOIInput has unexpected offset.");
		static_assert(offsetof(b2TOIInput, proxyB) == 72, "Type b2TOIInput has unexpected offset.");
		static_assert(offsetof(b2TOIInput, sweepA) == 144, "Type b2TOIInput has unexpected offset.");
		static_assert(offsetof(b2TOIInput, sweepB) == 184, "Type b2TOIInput has unexpected offset.");
		static_assert(offsetof(b2TOIInput, maxFraction) == 224, "Type b2TOIInput has unexpected offset.");
		static_assert(sizeof(b2BodyDef) == 80, "Type b2BodyDef has unexpected size.");
		static_assert(alignof(b2BodyDef) == 8, "Type b2BodyDef has unexpected alignment.");
		static_assert(offsetof(b2BodyDef, type) == 0, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, position) == 4, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, rotation) == 12, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, linearVelocity) == 20, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, angularVelocity) == 28, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, linearDamping) == 32, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, angularDamping) == 36, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, gravityScale) == 40, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, sleepThreshold) == 44, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, name) == 48, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, userData) == 56, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, enableSleep) == 64, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, isAwake) == 65, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, fixedRotation) == 66, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, isBullet) == 67, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, isEnabled) == 68, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, allowFastRotation) == 69, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, internalValue) == 72, "Type b2BodyDef has unexpected offset.");
		static_assert(sizeof(b2DebugDraw) == 112, "Type b2DebugDraw has unexpected size.");
		static_assert(alignof(b2DebugDraw) == 8, "Type b2DebugDraw has unexpected alignment.");
		static_assert(offsetof(b2DebugDraw, DrawPolygonFcn) == 0, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawSolidPolygonFcn) == 8, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawCircleFcn) == 16, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawSolidCircleFcn) == 24, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawSolidCapsuleFcn) == 32, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawSegmentFcn) == 40, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawTransformFcn) == 48, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawPointFcn) == 56, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawStringFcn) == 64, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawingBounds) == 72, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, useDrawingBounds) == 88, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawShapes) == 89, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawJoints) == 90, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawJointExtras) == 91, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawBounds) == 92, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawMass) == 93, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawBodyNames) == 94, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawContacts) == 95, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawGraphColors) == 96, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawContactNormals) == 97, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawContactImpulses) == 98, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawContactFeatures) == 99, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawFrictionImpulses) == 100, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawIslands) == 101, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, context) == 104, "Type b2DebugDraw has unexpected offset.");
		static_assert(sizeof(b2DistanceJointDef) == 96, "Type b2DistanceJointDef has unexpected size.");
		static_assert(alignof(b2DistanceJointDef) == 8, "Type b2DistanceJointDef has unexpected alignment.");
		static_assert(offsetof(b2DistanceJointDef, bodyIdA) == 0, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, bodyIdB) == 8, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, localAnchorA) == 16, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, localAnchorB) == 24, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, length) == 32, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, enableSpring) == 36, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, hertz) == 40, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, dampingRatio) == 44, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, enableLimit) == 48, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, minLength) == 52, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, maxLength) == 56, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, enableMotor) == 60, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, maxMotorForce) == 64, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, motorSpeed) == 68, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, collideConnected) == 72, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, userData) == 80, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, internalValue) == 88, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(sizeof(b2Circle) == 12, "Type b2Circle has unexpected size.");
		static_assert(alignof(b2Circle) == 4, "Type b2Circle has unexpected alignment.");
		static_assert(offsetof(b2Circle, center) == 0, "Type b2Circle has unexpected offset.");
		static_assert(offsetof(b2Circle, radius) == 8, "Type b2Circle has unexpected offset.");
		static_assert(sizeof(b2QueryFilter) == 16, "Type b2QueryFilter has unexpected size.");
		static_assert(alignof(b2QueryFilter) == 8, "Type b2QueryFilter has unexpected alignment.");
		static_assert(offsetof(b2QueryFilter, categoryBits) == 0, "Type b2QueryFilter has unexpected offset.");
		static_assert(offsetof(b2QueryFilter, maskBits) == 8, "Type b2QueryFilter has unexpected offset.");
		static_assert(sizeof(b2ExplosionDef) == 32, "Type b2ExplosionDef has unexpected size.");
		static_assert(alignof(b2ExplosionDef) == 8, "Type b2ExplosionDef has unexpected alignment.");
		static_assert(offsetof(b2ExplosionDef, maskBits) == 0, "Type b2ExplosionDef has unexpected offset.");
		static_assert(offsetof(b2ExplosionDef, position) == 8, "Type b2ExplosionDef has unexpected offset.");
		static_assert(offsetof(b2ExplosionDef, radius) == 16, "Type b2ExplosionDef has unexpected offset.");
		static_assert(offsetof(b2ExplosionDef, falloff) == 20, "Type b2ExplosionDef has unexpected offset.");
		static_assert(offsetof(b2ExplosionDef, impulsePerLength) == 24, "Type b2ExplosionDef has unexpected offset.");
		#endif // defined(_WIN32) && ARCH_BITS == 64
		

		#if !defined(_WIN32) && ARCH_BITS == 32 && !(defined(__i386__) && defined(__ANDROID__))
		static_assert(sizeof(const uint8_t) == 1, "Type const uint8_t has unexpected size.");
		static_assert(alignof(const uint8_t) == 1, "Type const uint8_t has unexpected alignment.");
		static_assert(sizeof(unsigned int) == 4, "Type unsigned int has unexpected size.");
		static_assert(alignof(unsigned int) == 4, "Type unsigned int has unexpected alignment.");
		static_assert(sizeof(uint16_t) == 2, "Type uint16_t has unexpected size.");
		static_assert(alignof(uint16_t) == 2, "Type uint16_t has unexpected alignment.");
		static_assert(sizeof(bool) == 1, "Type bool has unexpected size.");
		static_assert(alignof(bool) == 1, "Type bool has unexpected alignment.");
		static_assert(sizeof(uint64_t) == 8, "Type uint64_t has unexpected size.");
		static_assert(alignof(uint64_t) == 8, "Type uint64_t has unexpected alignment.");
		static_assert(sizeof(const char) == 1, "Type const char has unexpected size.");
		static_assert(alignof(const char) == 1, "Type const char has unexpected alignment.");
		static_assert(sizeof(uint32_t) == 4, "Type uint32_t has unexpected size.");
		static_assert(alignof(uint32_t) == 4, "Type uint32_t has unexpected alignment.");
		static_assert(sizeof(uint8_t) == 1, "Type uint8_t has unexpected size.");
		static_assert(alignof(uint8_t) == 1, "Type uint8_t has unexpected alignment.");
		static_assert(sizeof(float) == 4, "Type float has unexpected size.");
		static_assert(alignof(float) == 4, "Type float has unexpected alignment.");
		static_assert(sizeof(int) == 4, "Type int has unexpected size.");
		static_assert(alignof(int) == 4, "Type int has unexpected alignment.");
		static_assert(sizeof(int32_t) == 4, "Type int32_t has unexpected size.");
		static_assert(alignof(int32_t) == 4, "Type int32_t has unexpected alignment.");
		static_assert(sizeof(b2Sweep) == 40, "Type b2Sweep has unexpected size.");
		static_assert(alignof(b2Sweep) == 4, "Type b2Sweep has unexpected alignment.");
		static_assert(offsetof(b2Sweep, localCenter) == 0, "Type b2Sweep has unexpected offset.");
		static_assert(offsetof(b2Sweep, c1) == 8, "Type b2Sweep has unexpected offset.");
		static_assert(offsetof(b2Sweep, c2) == 16, "Type b2Sweep has unexpected offset.");
		static_assert(offsetof(b2Sweep, q1) == 24, "Type b2Sweep has unexpected offset.");
		static_assert(offsetof(b2Sweep, q2) == 32, "Type b2Sweep has unexpected offset.");
		static_assert(sizeof(b2SensorEndTouchEvent) == 16, "Type b2SensorEndTouchEvent has unexpected size.");
		static_assert(alignof(b2SensorEndTouchEvent) == 4, "Type b2SensorEndTouchEvent has unexpected alignment.");
		static_assert(offsetof(b2SensorEndTouchEvent, sensorShapeId) == 0, "Type b2SensorEndTouchEvent has unexpected offset.");
		static_assert(offsetof(b2SensorEndTouchEvent, visitorShapeId) == 8, "Type b2SensorEndTouchEvent has unexpected offset.");
		static_assert(sizeof(b2ContactEndTouchEvent) == 16, "Type b2ContactEndTouchEvent has unexpected size.");
		static_assert(alignof(b2ContactEndTouchEvent) == 4, "Type b2ContactEndTouchEvent has unexpected alignment.");
		static_assert(offsetof(b2ContactEndTouchEvent, shapeIdA) == 0, "Type b2ContactEndTouchEvent has unexpected offset.");
		static_assert(offsetof(b2ContactEndTouchEvent, shapeIdB) == 8, "Type b2ContactEndTouchEvent has unexpected offset.");
		static_assert(sizeof(b2Segment) == 16, "Type b2Segment has unexpected size.");
		static_assert(alignof(b2Segment) == 4, "Type b2Segment has unexpected alignment.");
		static_assert(offsetof(b2Segment, point1) == 0, "Type b2Segment has unexpected offset.");
		static_assert(offsetof(b2Segment, point2) == 8, "Type b2Segment has unexpected offset.");
		static_assert(sizeof(b2JointId) == 8, "Type b2JointId has unexpected size.");
		static_assert(alignof(b2JointId) == 4, "Type b2JointId has unexpected alignment.");
		static_assert(offsetof(b2JointId, index1) == 0, "Type b2JointId has unexpected offset.");
		static_assert(offsetof(b2JointId, world0) == 4, "Type b2JointId has unexpected offset.");
		static_assert(offsetof(b2JointId, generation) == 6, "Type b2JointId has unexpected offset.");
		static_assert(sizeof(b2ChainSegment) == 36, "Type b2ChainSegment has unexpected size.");
		static_assert(alignof(b2ChainSegment) == 4, "Type b2ChainSegment has unexpected alignment.");
		static_assert(offsetof(b2ChainSegment, ghost1) == 0, "Type b2ChainSegment has unexpected offset.");
		static_assert(offsetof(b2ChainSegment, segment) == 8, "Type b2ChainSegment has unexpected offset.");
		static_assert(offsetof(b2ChainSegment, ghost2) == 24, "Type b2ChainSegment has unexpected offset.");
		static_assert(offsetof(b2ChainSegment, chainId) == 32, "Type b2ChainSegment has unexpected offset.");
		static_assert(sizeof(b2PlaneSolverResult) == 12, "Type b2PlaneSolverResult has unexpected size.");
		static_assert(alignof(b2PlaneSolverResult) == 4, "Type b2PlaneSolverResult has unexpected alignment.");
		static_assert(offsetof(b2PlaneSolverResult, translation) == 0, "Type b2PlaneSolverResult has unexpected offset.");
		static_assert(offsetof(b2PlaneSolverResult, iterationCount) == 8, "Type b2PlaneSolverResult has unexpected offset.");
		static_assert(sizeof(b2MotorJointDef) == 52, "Type b2MotorJointDef has unexpected size.");
		static_assert(alignof(b2MotorJointDef) == 4, "Type b2MotorJointDef has unexpected alignment.");
		static_assert(offsetof(b2MotorJointDef, bodyIdA) == 0, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, bodyIdB) == 8, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, linearOffset) == 16, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, angularOffset) == 24, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, maxForce) == 28, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, maxTorque) == 32, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, correctionFactor) == 36, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, collideConnected) == 40, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, userData) == 44, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, internalValue) == 48, "Type b2MotorJointDef has unexpected offset.");
		static_assert(sizeof(b2Profile) == 88, "Type b2Profile has unexpected size.");
		static_assert(alignof(b2Profile) == 4, "Type b2Profile has unexpected alignment.");
		static_assert(offsetof(b2Profile, step) == 0, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, pairs) == 4, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, collide) == 8, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, solve) == 12, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, mergeIslands) == 16, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, prepareStages) == 20, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, solveConstraints) == 24, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, prepareConstraints) == 28, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, integrateVelocities) == 32, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, warmStart) == 36, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, solveImpulses) == 40, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, integratePositions) == 44, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, relaxImpulses) == 48, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, applyRestitution) == 52, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, storeImpulses) == 56, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, splitIslands) == 60, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, transforms) == 64, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, hitEvents) == 68, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, refit) == 72, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, bullets) == 76, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, sleepIslands) == 80, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, sensors) == 84, "Type b2Profile has unexpected offset.");
		static_assert(sizeof(b2Counters) == 88, "Type b2Counters has unexpected size.");
		static_assert(alignof(b2Counters) == 4, "Type b2Counters has unexpected alignment.");
		static_assert(offsetof(b2Counters, bodyCount) == 0, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, shapeCount) == 4, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, contactCount) == 8, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, jointCount) == 12, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, islandCount) == 16, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, stackUsed) == 20, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, staticTreeHeight) == 24, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, treeHeight) == 28, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, byteCount) == 32, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, taskCount) == 36, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, colorCounts) == 40, "Type b2Counters has unexpected offset.");
		static_assert(sizeof(b2SensorEvents) == 16, "Type b2SensorEvents has unexpected size.");
		static_assert(alignof(b2SensorEvents) == 4, "Type b2SensorEvents has unexpected alignment.");
		static_assert(offsetof(b2SensorEvents, beginEvents) == 0, "Type b2SensorEvents has unexpected offset.");
		static_assert(offsetof(b2SensorEvents, endEvents) == 4, "Type b2SensorEvents has unexpected offset.");
		static_assert(offsetof(b2SensorEvents, beginCount) == 8, "Type b2SensorEvents has unexpected offset.");
		static_assert(offsetof(b2SensorEvents, endCount) == 12, "Type b2SensorEvents has unexpected offset.");
		static_assert(sizeof(b2RayResult) == 40, "Type b2RayResult has unexpected size.");
		static_assert(alignof(b2RayResult) == 4, "Type b2RayResult has unexpected alignment.");
		static_assert(offsetof(b2RayResult, shapeId) == 0, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, point) == 8, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, normal) == 16, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, fraction) == 24, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, nodeVisits) == 28, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, leafVisits) == 32, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, hit) == 36, "Type b2RayResult has unexpected offset.");
		static_assert(sizeof(b2CastOutput) == 28, "Type b2CastOutput has unexpected size.");
		static_assert(alignof(b2CastOutput) == 4, "Type b2CastOutput has unexpected alignment.");
		static_assert(offsetof(b2CastOutput, normal) == 0, "Type b2CastOutput has unexpected offset.");
		static_assert(offsetof(b2CastOutput, point) == 8, "Type b2CastOutput has unexpected offset.");
		static_assert(offsetof(b2CastOutput, fraction) == 16, "Type b2CastOutput has unexpected offset.");
		static_assert(offsetof(b2CastOutput, iterations) == 20, "Type b2CastOutput has unexpected offset.");
		static_assert(offsetof(b2CastOutput, hit) == 24, "Type b2CastOutput has unexpected offset.");
		static_assert(sizeof(b2ContactBeginTouchEvent) == 128, "Type b2ContactBeginTouchEvent has unexpected size.");
		static_assert(alignof(b2ContactBeginTouchEvent) == 4, "Type b2ContactBeginTouchEvent has unexpected alignment.");
		static_assert(offsetof(b2ContactBeginTouchEvent, shapeIdA) == 0, "Type b2ContactBeginTouchEvent has unexpected offset.");
		static_assert(offsetof(b2ContactBeginTouchEvent, shapeIdB) == 8, "Type b2ContactBeginTouchEvent has unexpected offset.");
		static_assert(offsetof(b2ContactBeginTouchEvent, manifold) == 16, "Type b2ContactBeginTouchEvent has unexpected offset.");
		static_assert(sizeof(b2DynamicTree) == 44, "Type b2DynamicTree has unexpected size.");
		static_assert(alignof(b2DynamicTree) == 4, "Type b2DynamicTree has unexpected alignment.");
		static_assert(offsetof(b2DynamicTree, nodes) == 0, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, root) == 4, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, nodeCount) == 8, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, nodeCapacity) == 12, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, freeList) == 16, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, proxyCount) == 20, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, leafIndices) == 24, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, leafBoxes) == 28, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, leafCenters) == 32, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, binIndices) == 36, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, rebuildCapacity) == 40, "Type b2DynamicTree has unexpected offset.");
		static_assert(sizeof(b2FilterJointDef) == 24, "Type b2FilterJointDef has unexpected size.");
		static_assert(alignof(b2FilterJointDef) == 4, "Type b2FilterJointDef has unexpected alignment.");
		static_assert(offsetof(b2FilterJointDef, bodyIdA) == 0, "Type b2FilterJointDef has unexpected offset.");
		static_assert(offsetof(b2FilterJointDef, bodyIdB) == 8, "Type b2FilterJointDef has unexpected offset.");
		static_assert(offsetof(b2FilterJointDef, userData) == 16, "Type b2FilterJointDef has unexpected offset.");
		static_assert(offsetof(b2FilterJointDef, internalValue) == 20, "Type b2FilterJointDef has unexpected offset.");
		static_assert(sizeof(b2WheelJointDef) == 88, "Type b2WheelJointDef has unexpected size.");
		static_assert(alignof(b2WheelJointDef) == 4, "Type b2WheelJointDef has unexpected alignment.");
		static_assert(offsetof(b2WheelJointDef, bodyIdA) == 0, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, bodyIdB) == 8, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, localAnchorA) == 16, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, localAnchorB) == 24, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, localAxisA) == 32, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, enableSpring) == 40, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, hertz) == 44, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, dampingRatio) == 48, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, enableLimit) == 52, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, lowerTranslation) == 56, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, upperTranslation) == 60, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, enableMotor) == 64, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, maxMotorTorque) == 68, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, motorSpeed) == 72, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, collideConnected) == 76, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, userData) == 80, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, internalValue) == 84, "Type b2WheelJointDef has unexpected offset.");
		static_assert(sizeof(b2ContactData) == 128, "Type b2ContactData has unexpected size.");
		static_assert(alignof(b2ContactData) == 4, "Type b2ContactData has unexpected alignment.");
		static_assert(offsetof(b2ContactData, shapeIdA) == 0, "Type b2ContactData has unexpected offset.");
		static_assert(offsetof(b2ContactData, shapeIdB) == 8, "Type b2ContactData has unexpected offset.");
		static_assert(offsetof(b2ContactData, manifold) == 16, "Type b2ContactData has unexpected offset.");
		static_assert(sizeof(b2SegmentDistanceResult) == 28, "Type b2SegmentDistanceResult has unexpected size.");
		static_assert(alignof(b2SegmentDistanceResult) == 4, "Type b2SegmentDistanceResult has unexpected alignment.");
		static_assert(offsetof(b2SegmentDistanceResult, closest1) == 0, "Type b2SegmentDistanceResult has unexpected offset.");
		static_assert(offsetof(b2SegmentDistanceResult, closest2) == 8, "Type b2SegmentDistanceResult has unexpected offset.");
		static_assert(offsetof(b2SegmentDistanceResult, fraction1) == 16, "Type b2SegmentDistanceResult has unexpected offset.");
		static_assert(offsetof(b2SegmentDistanceResult, fraction2) == 20, "Type b2SegmentDistanceResult has unexpected offset.");
		static_assert(offsetof(b2SegmentDistanceResult, distanceSquared) == 24, "Type b2SegmentDistanceResult has unexpected offset.");
		static_assert(sizeof(b2BodyId) == 8, "Type b2BodyId has unexpected size.");
		static_assert(alignof(b2BodyId) == 4, "Type b2BodyId has unexpected alignment.");
		static_assert(offsetof(b2BodyId, index1) == 0, "Type b2BodyId has unexpected offset.");
		static_assert(offsetof(b2BodyId, world0) == 4, "Type b2BodyId has unexpected offset.");
		static_assert(offsetof(b2BodyId, generation) == 6, "Type b2BodyId has unexpected offset.");
		static_assert(sizeof(b2WeldJointDef) == 64, "Type b2WeldJointDef has unexpected size.");
		static_assert(alignof(b2WeldJointDef) == 4, "Type b2WeldJointDef has unexpected alignment.");
		static_assert(offsetof(b2WeldJointDef, bodyIdA) == 0, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, bodyIdB) == 8, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, localAnchorA) == 16, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, localAnchorB) == 24, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, referenceAngle) == 32, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, linearHertz) == 36, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, angularHertz) == 40, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, linearDampingRatio) == 44, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, angularDampingRatio) == 48, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, collideConnected) == 52, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, userData) == 56, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, internalValue) == 60, "Type b2WeldJointDef has unexpected offset.");
		static_assert(sizeof(b2Manifold) == 112, "Type b2Manifold has unexpected size.");
		static_assert(alignof(b2Manifold) == 4, "Type b2Manifold has unexpected alignment.");
		static_assert(offsetof(b2Manifold, normal) == 0, "Type b2Manifold has unexpected offset.");
		static_assert(offsetof(b2Manifold, rollingImpulse) == 8, "Type b2Manifold has unexpected offset.");
		static_assert(offsetof(b2Manifold, points) == 12, "Type b2Manifold has unexpected offset.");
		static_assert(offsetof(b2Manifold, pointCount) == 108, "Type b2Manifold has unexpected offset.");
		static_assert(sizeof(b2Plane) == 12, "Type b2Plane has unexpected size.");
		static_assert(alignof(b2Plane) == 4, "Type b2Plane has unexpected alignment.");
		static_assert(offsetof(b2Plane, normal) == 0, "Type b2Plane has unexpected offset.");
		static_assert(offsetof(b2Plane, offset) == 8, "Type b2Plane has unexpected offset.");
		static_assert(sizeof(b2ShapeCastInput) == 88, "Type b2ShapeCastInput has unexpected size.");
		static_assert(alignof(b2ShapeCastInput) == 4, "Type b2ShapeCastInput has unexpected alignment.");
		static_assert(offsetof(b2ShapeCastInput, proxy) == 0, "Type b2ShapeCastInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastInput, translation) == 72, "Type b2ShapeCastInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastInput, maxFraction) == 80, "Type b2ShapeCastInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastInput, canEncroach) == 84, "Type b2ShapeCastInput has unexpected offset.");
		static_assert(sizeof(b2SurfaceMaterial) == 24, "Type b2SurfaceMaterial has unexpected size.");
		static_assert(alignof(b2SurfaceMaterial) == 4, "Type b2SurfaceMaterial has unexpected alignment.");
		static_assert(offsetof(b2SurfaceMaterial, friction) == 0, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(offsetof(b2SurfaceMaterial, restitution) == 4, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(offsetof(b2SurfaceMaterial, rollingResistance) == 8, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(offsetof(b2SurfaceMaterial, tangentSpeed) == 12, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(offsetof(b2SurfaceMaterial, userMaterialId) == 16, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(offsetof(b2SurfaceMaterial, customColor) == 20, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(sizeof(b2RevoluteJointDef) == 92, "Type b2RevoluteJointDef has unexpected size.");
		static_assert(alignof(b2RevoluteJointDef) == 4, "Type b2RevoluteJointDef has unexpected alignment.");
		static_assert(offsetof(b2RevoluteJointDef, bodyIdA) == 0, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, bodyIdB) == 8, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, localAnchorA) == 16, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, localAnchorB) == 24, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, referenceAngle) == 32, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, targetAngle) == 36, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, enableSpring) == 40, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, hertz) == 44, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, dampingRatio) == 48, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, enableLimit) == 52, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, lowerAngle) == 56, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, upperAngle) == 60, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, enableMotor) == 64, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, maxMotorTorque) == 68, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, motorSpeed) == 72, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, drawSize) == 76, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, collideConnected) == 80, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, userData) == 84, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, internalValue) == 88, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(sizeof(b2Capsule) == 20, "Type b2Capsule has unexpected size.");
		static_assert(alignof(b2Capsule) == 4, "Type b2Capsule has unexpected alignment.");
		static_assert(offsetof(b2Capsule, center1) == 0, "Type b2Capsule has unexpected offset.");
		static_assert(offsetof(b2Capsule, center2) == 8, "Type b2Capsule has unexpected offset.");
		static_assert(offsetof(b2Capsule, radius) == 16, "Type b2Capsule has unexpected offset.");
		static_assert(sizeof(b2Transform) == 16, "Type b2Transform has unexpected size.");
		static_assert(alignof(b2Transform) == 4, "Type b2Transform has unexpected alignment.");
		static_assert(offsetof(b2Transform, p) == 0, "Type b2Transform has unexpected offset.");
		static_assert(offsetof(b2Transform, q) == 8, "Type b2Transform has unexpected offset.");
		static_assert(sizeof(b2MouseJointDef) == 48, "Type b2MouseJointDef has unexpected size.");
		static_assert(alignof(b2MouseJointDef) == 4, "Type b2MouseJointDef has unexpected alignment.");
		static_assert(offsetof(b2MouseJointDef, bodyIdA) == 0, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, bodyIdB) == 8, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, target) == 16, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, hertz) == 24, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, dampingRatio) == 28, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, maxForce) == 32, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, collideConnected) == 36, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, userData) == 40, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, internalValue) == 44, "Type b2MouseJointDef has unexpected offset.");
		static_assert(sizeof(b2Mat22) == 16, "Type b2Mat22 has unexpected size.");
		static_assert(alignof(b2Mat22) == 4, "Type b2Mat22 has unexpected alignment.");
		static_assert(offsetof(b2Mat22, cx) == 0, "Type b2Mat22 has unexpected offset.");
		static_assert(offsetof(b2Mat22, cy) == 8, "Type b2Mat22 has unexpected offset.");
		static_assert(sizeof(b2CollisionPlane) == 24, "Type b2CollisionPlane has unexpected size.");
		static_assert(alignof(b2CollisionPlane) == 4, "Type b2CollisionPlane has unexpected alignment.");
		static_assert(offsetof(b2CollisionPlane, plane) == 0, "Type b2CollisionPlane has unexpected offset.");
		static_assert(offsetof(b2CollisionPlane, pushLimit) == 12, "Type b2CollisionPlane has unexpected offset.");
		static_assert(offsetof(b2CollisionPlane, push) == 16, "Type b2CollisionPlane has unexpected offset.");
		static_assert(offsetof(b2CollisionPlane, clipVelocity) == 20, "Type b2CollisionPlane has unexpected offset.");
		static_assert(sizeof(b2Filter) == 24, "Type b2Filter has unexpected size.");
		static_assert(alignof(b2Filter) == 8, "Type b2Filter has unexpected alignment.");
		static_assert(offsetof(b2Filter, categoryBits) == 0, "Type b2Filter has unexpected offset.");
		static_assert(offsetof(b2Filter, maskBits) == 8, "Type b2Filter has unexpected offset.");
		static_assert(offsetof(b2Filter, groupIndex) == 16, "Type b2Filter has unexpected offset.");
		static_assert(sizeof(b2ShapeProxy) == 72, "Type b2ShapeProxy has unexpected size.");
		static_assert(alignof(b2ShapeProxy) == 4, "Type b2ShapeProxy has unexpected alignment.");
		static_assert(offsetof(b2ShapeProxy, points) == 0, "Type b2ShapeProxy has unexpected offset.");
		static_assert(offsetof(b2ShapeProxy, count) == 64, "Type b2ShapeProxy has unexpected offset.");
		static_assert(offsetof(b2ShapeProxy, radius) == 68, "Type b2ShapeProxy has unexpected offset.");
		static_assert(sizeof(b2ShapeDef) == 72, "Type b2ShapeDef has unexpected size.");
		static_assert(alignof(b2ShapeDef) == 8, "Type b2ShapeDef has unexpected alignment.");
		static_assert(offsetof(b2ShapeDef, userData) == 0, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, material) == 4, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, density) == 28, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, filter) == 32, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, isSensor) == 56, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, enableSensorEvents) == 57, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, enableContactEvents) == 58, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, enableHitEvents) == 59, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, enablePreSolveEvents) == 60, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, invokeContactCreation) == 61, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, updateBodyMass) == 62, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, internalValue) == 64, "Type b2ShapeDef has unexpected offset.");
		static_assert(sizeof(b2ShapeId) == 8, "Type b2ShapeId has unexpected size.");
		static_assert(alignof(b2ShapeId) == 4, "Type b2ShapeId has unexpected alignment.");
		static_assert(offsetof(b2ShapeId, index1) == 0, "Type b2ShapeId has unexpected offset.");
		static_assert(offsetof(b2ShapeId, world0) == 4, "Type b2ShapeId has unexpected offset.");
		static_assert(offsetof(b2ShapeId, generation) == 6, "Type b2ShapeId has unexpected offset.");
		static_assert(sizeof(b2Polygon) == 144, "Type b2Polygon has unexpected size.");
		static_assert(alignof(b2Polygon) == 4, "Type b2Polygon has unexpected alignment.");
		static_assert(offsetof(b2Polygon, vertices) == 0, "Type b2Polygon has unexpected offset.");
		static_assert(offsetof(b2Polygon, normals) == 64, "Type b2Polygon has unexpected offset.");
		static_assert(offsetof(b2Polygon, centroid) == 128, "Type b2Polygon has unexpected offset.");
		static_assert(offsetof(b2Polygon, radius) == 136, "Type b2Polygon has unexpected offset.");
		static_assert(offsetof(b2Polygon, count) == 140, "Type b2Polygon has unexpected offset.");
		static_assert(sizeof(b2WorldDef) == 68, "Type b2WorldDef has unexpected size.");
		static_assert(alignof(b2WorldDef) == 4, "Type b2WorldDef has unexpected alignment.");
		static_assert(offsetof(b2WorldDef, gravity) == 0, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, restitutionThreshold) == 8, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, hitEventThreshold) == 12, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, contactHertz) == 16, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, contactDampingRatio) == 20, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, maxContactPushSpeed) == 24, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, maximumLinearSpeed) == 28, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, frictionCallback) == 32, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, restitutionCallback) == 36, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, enableSleep) == 40, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, enableContinuous) == 41, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, workerCount) == 44, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, enqueueTask) == 48, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, finishTask) == 52, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, userTaskContext) == 56, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, userData) == 60, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, internalValue) == 64, "Type b2WorldDef has unexpected offset.");
		static_assert(sizeof(b2ManifoldPoint) == 48, "Type b2ManifoldPoint has unexpected size.");
		static_assert(alignof(b2ManifoldPoint) == 4, "Type b2ManifoldPoint has unexpected alignment.");
		static_assert(offsetof(b2ManifoldPoint, point) == 0, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, anchorA) == 8, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, anchorB) == 16, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, separation) == 24, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, normalImpulse) == 28, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, tangentImpulse) == 32, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, totalNormalImpulse) == 36, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, normalVelocity) == 40, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, id) == 44, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, persisted) == 46, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(sizeof(b2ChainDef) == 56, "Type b2ChainDef has unexpected size.");
		static_assert(alignof(b2ChainDef) == 8, "Type b2ChainDef has unexpected alignment.");
		static_assert(offsetof(b2ChainDef, userData) == 0, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, points) == 4, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, count) == 8, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, materials) == 12, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, materialCount) == 16, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, filter) == 24, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, isLoop) == 48, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, enableSensorEvents) == 49, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, internalValue) == 52, "Type b2ChainDef has unexpected offset.");
		static_assert(sizeof(b2ContactEvents) == 24, "Type b2ContactEvents has unexpected size.");
		static_assert(alignof(b2ContactEvents) == 4, "Type b2ContactEvents has unexpected alignment.");
		static_assert(offsetof(b2ContactEvents, beginEvents) == 0, "Type b2ContactEvents has unexpected offset.");
		static_assert(offsetof(b2ContactEvents, endEvents) == 4, "Type b2ContactEvents has unexpected offset.");
		static_assert(offsetof(b2ContactEvents, hitEvents) == 8, "Type b2ContactEvents has unexpected offset.");
		static_assert(offsetof(b2ContactEvents, beginCount) == 12, "Type b2ContactEvents has unexpected offset.");
		static_assert(offsetof(b2ContactEvents, endCount) == 16, "Type b2ContactEvents has unexpected offset.");
		static_assert(offsetof(b2ContactEvents, hitCount) == 20, "Type b2ContactEvents has unexpected offset.");
		static_assert(sizeof(b2BodyMoveEvent) == 32, "Type b2BodyMoveEvent has unexpected size.");
		static_assert(alignof(b2BodyMoveEvent) == 4, "Type b2BodyMoveEvent has unexpected alignment.");
		static_assert(offsetof(b2BodyMoveEvent, transform) == 0, "Type b2BodyMoveEvent has unexpected offset.");
		static_assert(offsetof(b2BodyMoveEvent, bodyId) == 16, "Type b2BodyMoveEvent has unexpected offset.");
		static_assert(offsetof(b2BodyMoveEvent, userData) == 24, "Type b2BodyMoveEvent has unexpected offset.");
		static_assert(offsetof(b2BodyMoveEvent, fellAsleep) == 28, "Type b2BodyMoveEvent has unexpected offset.");
		static_assert(sizeof(b2MassData) == 16, "Type b2MassData has unexpected size.");
		static_assert(alignof(b2MassData) == 4, "Type b2MassData has unexpected alignment.");
		static_assert(offsetof(b2MassData, mass) == 0, "Type b2MassData has unexpected offset.");
		static_assert(offsetof(b2MassData, center) == 4, "Type b2MassData has unexpected offset.");
		static_assert(offsetof(b2MassData, rotationalInertia) == 12, "Type b2MassData has unexpected offset.");
		static_assert(sizeof(b2SimplexVertex) == 36, "Type b2SimplexVertex has unexpected size.");
		static_assert(alignof(b2SimplexVertex) == 4, "Type b2SimplexVertex has unexpected alignment.");
		static_assert(offsetof(b2SimplexVertex, wA) == 0, "Type b2SimplexVertex has unexpected offset.");
		static_assert(offsetof(b2SimplexVertex, wB) == 8, "Type b2SimplexVertex has unexpected offset.");
		static_assert(offsetof(b2SimplexVertex, w) == 16, "Type b2SimplexVertex has unexpected offset.");
		static_assert(offsetof(b2SimplexVertex, a) == 24, "Type b2SimplexVertex has unexpected offset.");
		static_assert(offsetof(b2SimplexVertex, indexA) == 28, "Type b2SimplexVertex has unexpected offset.");
		static_assert(offsetof(b2SimplexVertex, indexB) == 32, "Type b2SimplexVertex has unexpected offset.");
		static_assert(sizeof(b2TOIOutput) == 8, "Type b2TOIOutput has unexpected size.");
		static_assert(alignof(b2TOIOutput) == 4, "Type b2TOIOutput has unexpected alignment.");
		static_assert(offsetof(b2TOIOutput, state) == 0, "Type b2TOIOutput has unexpected offset.");
		static_assert(offsetof(b2TOIOutput, fraction) == 4, "Type b2TOIOutput has unexpected offset.");
		static_assert(sizeof(b2CosSin) == 8, "Type b2CosSin has unexpected size.");
		static_assert(alignof(b2CosSin) == 4, "Type b2CosSin has unexpected alignment.");
		static_assert(offsetof(b2CosSin, cosine) == 0, "Type b2CosSin has unexpected offset.");
		static_assert(offsetof(b2CosSin, sine) == 4, "Type b2CosSin has unexpected offset.");
		static_assert(sizeof(b2WorldId) == 4, "Type b2WorldId has unexpected size.");
		static_assert(alignof(b2WorldId) == 2, "Type b2WorldId has unexpected alignment.");
		static_assert(offsetof(b2WorldId, index1) == 0, "Type b2WorldId has unexpected offset.");
		static_assert(offsetof(b2WorldId, generation) == 2, "Type b2WorldId has unexpected offset.");
		static_assert(sizeof(b2PrismaticJointDef) == 96, "Type b2PrismaticJointDef has unexpected size.");
		static_assert(alignof(b2PrismaticJointDef) == 4, "Type b2PrismaticJointDef has unexpected alignment.");
		static_assert(offsetof(b2PrismaticJointDef, bodyIdA) == 0, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, bodyIdB) == 8, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, localAnchorA) == 16, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, localAnchorB) == 24, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, localAxisA) == 32, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, referenceAngle) == 40, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, targetTranslation) == 44, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, enableSpring) == 48, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, hertz) == 52, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, dampingRatio) == 56, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, enableLimit) == 60, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, lowerTranslation) == 64, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, upperTranslation) == 68, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, enableMotor) == 72, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, maxMotorForce) == 76, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, motorSpeed) == 80, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, collideConnected) == 84, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, userData) == 88, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, internalValue) == 92, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(sizeof(b2Rot) == 8, "Type b2Rot has unexpected size.");
		static_assert(alignof(b2Rot) == 4, "Type b2Rot has unexpected alignment.");
		static_assert(offsetof(b2Rot, c) == 0, "Type b2Rot has unexpected offset.");
		static_assert(offsetof(b2Rot, s) == 4, "Type b2Rot has unexpected offset.");
		static_assert(sizeof(b2SimplexCache) == 8, "Type b2SimplexCache has unexpected size.");
		static_assert(alignof(b2SimplexCache) == 2, "Type b2SimplexCache has unexpected alignment.");
		static_assert(offsetof(b2SimplexCache, count) == 0, "Type b2SimplexCache has unexpected offset.");
		static_assert(offsetof(b2SimplexCache, indexA) == 2, "Type b2SimplexCache has unexpected offset.");
		static_assert(offsetof(b2SimplexCache, indexB) == 5, "Type b2SimplexCache has unexpected offset.");
		static_assert(sizeof(b2SensorBeginTouchEvent) == 16, "Type b2SensorBeginTouchEvent has unexpected size.");
		static_assert(alignof(b2SensorBeginTouchEvent) == 4, "Type b2SensorBeginTouchEvent has unexpected alignment.");
		static_assert(offsetof(b2SensorBeginTouchEvent, sensorShapeId) == 0, "Type b2SensorBeginTouchEvent has unexpected offset.");
		static_assert(offsetof(b2SensorBeginTouchEvent, visitorShapeId) == 8, "Type b2SensorBeginTouchEvent has unexpected offset.");
		static_assert(sizeof(b2Hull) == 68, "Type b2Hull has unexpected size.");
		static_assert(alignof(b2Hull) == 4, "Type b2Hull has unexpected alignment.");
		static_assert(offsetof(b2Hull, points) == 0, "Type b2Hull has unexpected offset.");
		static_assert(offsetof(b2Hull, count) == 64, "Type b2Hull has unexpected offset.");
		static_assert(sizeof(b2ChainId) == 8, "Type b2ChainId has unexpected size.");
		static_assert(alignof(b2ChainId) == 4, "Type b2ChainId has unexpected alignment.");
		static_assert(offsetof(b2ChainId, index1) == 0, "Type b2ChainId has unexpected offset.");
		static_assert(offsetof(b2ChainId, world0) == 4, "Type b2ChainId has unexpected offset.");
		static_assert(offsetof(b2ChainId, generation) == 6, "Type b2ChainId has unexpected offset.");
		static_assert(sizeof(b2RayCastInput) == 20, "Type b2RayCastInput has unexpected size.");
		static_assert(alignof(b2RayCastInput) == 4, "Type b2RayCastInput has unexpected alignment.");
		static_assert(offsetof(b2RayCastInput, origin) == 0, "Type b2RayCastInput has unexpected offset.");
		static_assert(offsetof(b2RayCastInput, translation) == 8, "Type b2RayCastInput has unexpected offset.");
		static_assert(offsetof(b2RayCastInput, maxFraction) == 16, "Type b2RayCastInput has unexpected offset.");
		static_assert(sizeof(b2DistanceOutput) == 36, "Type b2DistanceOutput has unexpected size.");
		static_assert(alignof(b2DistanceOutput) == 4, "Type b2DistanceOutput has unexpected alignment.");
		static_assert(offsetof(b2DistanceOutput, pointA) == 0, "Type b2DistanceOutput has unexpected offset.");
		static_assert(offsetof(b2DistanceOutput, pointB) == 8, "Type b2DistanceOutput has unexpected offset.");
		static_assert(offsetof(b2DistanceOutput, normal) == 16, "Type b2DistanceOutput has unexpected offset.");
		static_assert(offsetof(b2DistanceOutput, distance) == 24, "Type b2DistanceOutput has unexpected offset.");
		static_assert(offsetof(b2DistanceOutput, iterations) == 28, "Type b2DistanceOutput has unexpected offset.");
		static_assert(offsetof(b2DistanceOutput, simplexCount) == 32, "Type b2DistanceOutput has unexpected offset.");
		static_assert(sizeof(b2TreeStats) == 8, "Type b2TreeStats has unexpected size.");
		static_assert(alignof(b2TreeStats) == 4, "Type b2TreeStats has unexpected alignment.");
		static_assert(offsetof(b2TreeStats, nodeVisits) == 0, "Type b2TreeStats has unexpected offset.");
		static_assert(offsetof(b2TreeStats, leafVisits) == 4, "Type b2TreeStats has unexpected offset.");
		static_assert(sizeof(b2Simplex) == 112, "Type b2Simplex has unexpected size.");
		static_assert(alignof(b2Simplex) == 4, "Type b2Simplex has unexpected alignment.");
		static_assert(offsetof(b2Simplex, v1) == 0, "Type b2Simplex has unexpected offset.");
		static_assert(offsetof(b2Simplex, v2) == 36, "Type b2Simplex has unexpected offset.");
		static_assert(offsetof(b2Simplex, v3) == 72, "Type b2Simplex has unexpected offset.");
		static_assert(offsetof(b2Simplex, count) == 108, "Type b2Simplex has unexpected offset.");
		static_assert(sizeof(b2ContactHitEvent) == 36, "Type b2ContactHitEvent has unexpected size.");
		static_assert(alignof(b2ContactHitEvent) == 4, "Type b2ContactHitEvent has unexpected alignment.");
		static_assert(offsetof(b2ContactHitEvent, shapeIdA) == 0, "Type b2ContactHitEvent has unexpected offset.");
		static_assert(offsetof(b2ContactHitEvent, shapeIdB) == 8, "Type b2ContactHitEvent has unexpected offset.");
		static_assert(offsetof(b2ContactHitEvent, point) == 16, "Type b2ContactHitEvent has unexpected offset.");
		static_assert(offsetof(b2ContactHitEvent, normal) == 24, "Type b2ContactHitEvent has unexpected offset.");
		static_assert(offsetof(b2ContactHitEvent, approachSpeed) == 32, "Type b2ContactHitEvent has unexpected offset.");
		static_assert(sizeof(b2Vec2) == 8, "Type b2Vec2 has unexpected size.");
		static_assert(alignof(b2Vec2) == 4, "Type b2Vec2 has unexpected alignment.");
		static_assert(offsetof(b2Vec2, x) == 0, "Type b2Vec2 has unexpected offset.");
		static_assert(offsetof(b2Vec2, y) == 4, "Type b2Vec2 has unexpected offset.");
		static_assert(sizeof(b2AABB) == 16, "Type b2AABB has unexpected size.");
		static_assert(alignof(b2AABB) == 4, "Type b2AABB has unexpected alignment.");
		static_assert(offsetof(b2AABB, lowerBound) == 0, "Type b2AABB has unexpected offset.");
		static_assert(offsetof(b2AABB, upperBound) == 8, "Type b2AABB has unexpected offset.");
		static_assert(sizeof(b2PlaneResult) == 24, "Type b2PlaneResult has unexpected size.");
		static_assert(alignof(b2PlaneResult) == 4, "Type b2PlaneResult has unexpected alignment.");
		static_assert(offsetof(b2PlaneResult, plane) == 0, "Type b2PlaneResult has unexpected offset.");
		static_assert(offsetof(b2PlaneResult, point) == 12, "Type b2PlaneResult has unexpected offset.");
		static_assert(offsetof(b2PlaneResult, hit) == 20, "Type b2PlaneResult has unexpected offset.");
		static_assert(sizeof(b2DistanceInput) == 180, "Type b2DistanceInput has unexpected size.");
		static_assert(alignof(b2DistanceInput) == 4, "Type b2DistanceInput has unexpected alignment.");
		static_assert(offsetof(b2DistanceInput, proxyA) == 0, "Type b2DistanceInput has unexpected offset.");
		static_assert(offsetof(b2DistanceInput, proxyB) == 72, "Type b2DistanceInput has unexpected offset.");
		static_assert(offsetof(b2DistanceInput, transformA) == 144, "Type b2DistanceInput has unexpected offset.");
		static_assert(offsetof(b2DistanceInput, transformB) == 160, "Type b2DistanceInput has unexpected offset.");
		static_assert(offsetof(b2DistanceInput, useRadii) == 176, "Type b2DistanceInput has unexpected offset.");
		static_assert(sizeof(b2ShapeCastPairInput) == 192, "Type b2ShapeCastPairInput has unexpected size.");
		static_assert(alignof(b2ShapeCastPairInput) == 4, "Type b2ShapeCastPairInput has unexpected alignment.");
		static_assert(offsetof(b2ShapeCastPairInput, proxyA) == 0, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, proxyB) == 72, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, transformA) == 144, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, transformB) == 160, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, translationB) == 176, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, maxFraction) == 184, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, canEncroach) == 188, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(sizeof(b2BodyEvents) == 8, "Type b2BodyEvents has unexpected size.");
		static_assert(alignof(b2BodyEvents) == 4, "Type b2BodyEvents has unexpected alignment.");
		static_assert(offsetof(b2BodyEvents, moveEvents) == 0, "Type b2BodyEvents has unexpected offset.");
		static_assert(offsetof(b2BodyEvents, moveCount) == 4, "Type b2BodyEvents has unexpected offset.");
		static_assert(sizeof(b2Version) == 12, "Type b2Version has unexpected size.");
		static_assert(alignof(b2Version) == 4, "Type b2Version has unexpected alignment.");
		static_assert(offsetof(b2Version, major) == 0, "Type b2Version has unexpected offset.");
		static_assert(offsetof(b2Version, minor) == 4, "Type b2Version has unexpected offset.");
		static_assert(offsetof(b2Version, revision) == 8, "Type b2Version has unexpected offset.");
		static_assert(sizeof(b2TOIInput) == 228, "Type b2TOIInput has unexpected size.");
		static_assert(alignof(b2TOIInput) == 4, "Type b2TOIInput has unexpected alignment.");
		static_assert(offsetof(b2TOIInput, proxyA) == 0, "Type b2TOIInput has unexpected offset.");
		static_assert(offsetof(b2TOIInput, proxyB) == 72, "Type b2TOIInput has unexpected offset.");
		static_assert(offsetof(b2TOIInput, sweepA) == 144, "Type b2TOIInput has unexpected offset.");
		static_assert(offsetof(b2TOIInput, sweepB) == 184, "Type b2TOIInput has unexpected offset.");
		static_assert(offsetof(b2TOIInput, maxFraction) == 224, "Type b2TOIInput has unexpected offset.");
		static_assert(sizeof(b2BodyDef) == 68, "Type b2BodyDef has unexpected size.");
		static_assert(alignof(b2BodyDef) == 4, "Type b2BodyDef has unexpected alignment.");
		static_assert(offsetof(b2BodyDef, type) == 0, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, position) == 4, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, rotation) == 12, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, linearVelocity) == 20, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, angularVelocity) == 28, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, linearDamping) == 32, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, angularDamping) == 36, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, gravityScale) == 40, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, sleepThreshold) == 44, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, name) == 48, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, userData) == 52, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, enableSleep) == 56, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, isAwake) == 57, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, fixedRotation) == 58, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, isBullet) == 59, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, isEnabled) == 60, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, allowFastRotation) == 61, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, internalValue) == 64, "Type b2BodyDef has unexpected offset.");
		static_assert(sizeof(b2DebugDraw) == 72, "Type b2DebugDraw has unexpected size.");
		static_assert(alignof(b2DebugDraw) == 4, "Type b2DebugDraw has unexpected alignment.");
		static_assert(offsetof(b2DebugDraw, DrawPolygonFcn) == 0, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawSolidPolygonFcn) == 4, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawCircleFcn) == 8, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawSolidCircleFcn) == 12, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawSolidCapsuleFcn) == 16, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawSegmentFcn) == 20, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawTransformFcn) == 24, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawPointFcn) == 28, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawStringFcn) == 32, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawingBounds) == 36, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, useDrawingBounds) == 52, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawShapes) == 53, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawJoints) == 54, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawJointExtras) == 55, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawBounds) == 56, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawMass) == 57, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawBodyNames) == 58, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawContacts) == 59, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawGraphColors) == 60, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawContactNormals) == 61, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawContactImpulses) == 62, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawContactFeatures) == 63, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawFrictionImpulses) == 64, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawIslands) == 65, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, context) == 68, "Type b2DebugDraw has unexpected offset.");
		static_assert(sizeof(b2DistanceJointDef) == 84, "Type b2DistanceJointDef has unexpected size.");
		static_assert(alignof(b2DistanceJointDef) == 4, "Type b2DistanceJointDef has unexpected alignment.");
		static_assert(offsetof(b2DistanceJointDef, bodyIdA) == 0, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, bodyIdB) == 8, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, localAnchorA) == 16, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, localAnchorB) == 24, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, length) == 32, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, enableSpring) == 36, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, hertz) == 40, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, dampingRatio) == 44, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, enableLimit) == 48, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, minLength) == 52, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, maxLength) == 56, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, enableMotor) == 60, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, maxMotorForce) == 64, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, motorSpeed) == 68, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, collideConnected) == 72, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, userData) == 76, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, internalValue) == 80, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(sizeof(b2Circle) == 12, "Type b2Circle has unexpected size.");
		static_assert(alignof(b2Circle) == 4, "Type b2Circle has unexpected alignment.");
		static_assert(offsetof(b2Circle, center) == 0, "Type b2Circle has unexpected offset.");
		static_assert(offsetof(b2Circle, radius) == 8, "Type b2Circle has unexpected offset.");
		static_assert(sizeof(b2QueryFilter) == 16, "Type b2QueryFilter has unexpected size.");
		static_assert(alignof(b2QueryFilter) == 8, "Type b2QueryFilter has unexpected alignment.");
		static_assert(offsetof(b2QueryFilter, categoryBits) == 0, "Type b2QueryFilter has unexpected offset.");
		static_assert(offsetof(b2QueryFilter, maskBits) == 8, "Type b2QueryFilter has unexpected offset.");
		static_assert(sizeof(b2ExplosionDef) == 32, "Type b2ExplosionDef has unexpected size.");
		static_assert(alignof(b2ExplosionDef) == 8, "Type b2ExplosionDef has unexpected alignment.");
		static_assert(offsetof(b2ExplosionDef, maskBits) == 0, "Type b2ExplosionDef has unexpected offset.");
		static_assert(offsetof(b2ExplosionDef, position) == 8, "Type b2ExplosionDef has unexpected offset.");
		static_assert(offsetof(b2ExplosionDef, radius) == 16, "Type b2ExplosionDef has unexpected offset.");
		static_assert(offsetof(b2ExplosionDef, falloff) == 20, "Type b2ExplosionDef has unexpected offset.");
		static_assert(offsetof(b2ExplosionDef, impulsePerLength) == 24, "Type b2ExplosionDef has unexpected offset.");
		#endif // !defined(_WIN32) && ARCH_BITS == 32 && !(defined(__i386__) && defined(__ANDROID__))
		

		#if !defined(_WIN32) && ARCH_BITS == 64
		static_assert(sizeof(const uint8_t) == 1, "Type const uint8_t has unexpected size.");
		static_assert(alignof(const uint8_t) == 1, "Type const uint8_t has unexpected alignment.");
		static_assert(sizeof(unsigned int) == 4, "Type unsigned int has unexpected size.");
		static_assert(alignof(unsigned int) == 4, "Type unsigned int has unexpected alignment.");
		static_assert(sizeof(uint16_t) == 2, "Type uint16_t has unexpected size.");
		static_assert(alignof(uint16_t) == 2, "Type uint16_t has unexpected alignment.");
		static_assert(sizeof(bool) == 1, "Type bool has unexpected size.");
		static_assert(alignof(bool) == 1, "Type bool has unexpected alignment.");
		static_assert(sizeof(uint64_t) == 8, "Type uint64_t has unexpected size.");
		static_assert(alignof(uint64_t) == 8, "Type uint64_t has unexpected alignment.");
		static_assert(sizeof(const char) == 1, "Type const char has unexpected size.");
		static_assert(alignof(const char) == 1, "Type const char has unexpected alignment.");
		static_assert(sizeof(uint32_t) == 4, "Type uint32_t has unexpected size.");
		static_assert(alignof(uint32_t) == 4, "Type uint32_t has unexpected alignment.");
		static_assert(sizeof(uint8_t) == 1, "Type uint8_t has unexpected size.");
		static_assert(alignof(uint8_t) == 1, "Type uint8_t has unexpected alignment.");
		static_assert(sizeof(float) == 4, "Type float has unexpected size.");
		static_assert(alignof(float) == 4, "Type float has unexpected alignment.");
		static_assert(sizeof(int) == 4, "Type int has unexpected size.");
		static_assert(alignof(int) == 4, "Type int has unexpected alignment.");
		static_assert(sizeof(int32_t) == 4, "Type int32_t has unexpected size.");
		static_assert(alignof(int32_t) == 4, "Type int32_t has unexpected alignment.");
		static_assert(sizeof(b2Sweep) == 40, "Type b2Sweep has unexpected size.");
		static_assert(alignof(b2Sweep) == 4, "Type b2Sweep has unexpected alignment.");
		static_assert(offsetof(b2Sweep, localCenter) == 0, "Type b2Sweep has unexpected offset.");
		static_assert(offsetof(b2Sweep, c1) == 8, "Type b2Sweep has unexpected offset.");
		static_assert(offsetof(b2Sweep, c2) == 16, "Type b2Sweep has unexpected offset.");
		static_assert(offsetof(b2Sweep, q1) == 24, "Type b2Sweep has unexpected offset.");
		static_assert(offsetof(b2Sweep, q2) == 32, "Type b2Sweep has unexpected offset.");
		static_assert(sizeof(b2SensorEndTouchEvent) == 16, "Type b2SensorEndTouchEvent has unexpected size.");
		static_assert(alignof(b2SensorEndTouchEvent) == 4, "Type b2SensorEndTouchEvent has unexpected alignment.");
		static_assert(offsetof(b2SensorEndTouchEvent, sensorShapeId) == 0, "Type b2SensorEndTouchEvent has unexpected offset.");
		static_assert(offsetof(b2SensorEndTouchEvent, visitorShapeId) == 8, "Type b2SensorEndTouchEvent has unexpected offset.");
		static_assert(sizeof(b2ContactEndTouchEvent) == 16, "Type b2ContactEndTouchEvent has unexpected size.");
		static_assert(alignof(b2ContactEndTouchEvent) == 4, "Type b2ContactEndTouchEvent has unexpected alignment.");
		static_assert(offsetof(b2ContactEndTouchEvent, shapeIdA) == 0, "Type b2ContactEndTouchEvent has unexpected offset.");
		static_assert(offsetof(b2ContactEndTouchEvent, shapeIdB) == 8, "Type b2ContactEndTouchEvent has unexpected offset.");
		static_assert(sizeof(b2Segment) == 16, "Type b2Segment has unexpected size.");
		static_assert(alignof(b2Segment) == 4, "Type b2Segment has unexpected alignment.");
		static_assert(offsetof(b2Segment, point1) == 0, "Type b2Segment has unexpected offset.");
		static_assert(offsetof(b2Segment, point2) == 8, "Type b2Segment has unexpected offset.");
		static_assert(sizeof(b2JointId) == 8, "Type b2JointId has unexpected size.");
		static_assert(alignof(b2JointId) == 4, "Type b2JointId has unexpected alignment.");
		static_assert(offsetof(b2JointId, index1) == 0, "Type b2JointId has unexpected offset.");
		static_assert(offsetof(b2JointId, world0) == 4, "Type b2JointId has unexpected offset.");
		static_assert(offsetof(b2JointId, generation) == 6, "Type b2JointId has unexpected offset.");
		static_assert(sizeof(b2ChainSegment) == 36, "Type b2ChainSegment has unexpected size.");
		static_assert(alignof(b2ChainSegment) == 4, "Type b2ChainSegment has unexpected alignment.");
		static_assert(offsetof(b2ChainSegment, ghost1) == 0, "Type b2ChainSegment has unexpected offset.");
		static_assert(offsetof(b2ChainSegment, segment) == 8, "Type b2ChainSegment has unexpected offset.");
		static_assert(offsetof(b2ChainSegment, ghost2) == 24, "Type b2ChainSegment has unexpected offset.");
		static_assert(offsetof(b2ChainSegment, chainId) == 32, "Type b2ChainSegment has unexpected offset.");
		static_assert(sizeof(b2PlaneSolverResult) == 12, "Type b2PlaneSolverResult has unexpected size.");
		static_assert(alignof(b2PlaneSolverResult) == 4, "Type b2PlaneSolverResult has unexpected alignment.");
		static_assert(offsetof(b2PlaneSolverResult, translation) == 0, "Type b2PlaneSolverResult has unexpected offset.");
		static_assert(offsetof(b2PlaneSolverResult, iterationCount) == 8, "Type b2PlaneSolverResult has unexpected offset.");
		static_assert(sizeof(b2MotorJointDef) == 64, "Type b2MotorJointDef has unexpected size.");
		static_assert(alignof(b2MotorJointDef) == 8, "Type b2MotorJointDef has unexpected alignment.");
		static_assert(offsetof(b2MotorJointDef, bodyIdA) == 0, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, bodyIdB) == 8, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, linearOffset) == 16, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, angularOffset) == 24, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, maxForce) == 28, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, maxTorque) == 32, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, correctionFactor) == 36, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, collideConnected) == 40, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, userData) == 48, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, internalValue) == 56, "Type b2MotorJointDef has unexpected offset.");
		static_assert(sizeof(b2Profile) == 88, "Type b2Profile has unexpected size.");
		static_assert(alignof(b2Profile) == 4, "Type b2Profile has unexpected alignment.");
		static_assert(offsetof(b2Profile, step) == 0, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, pairs) == 4, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, collide) == 8, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, solve) == 12, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, mergeIslands) == 16, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, prepareStages) == 20, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, solveConstraints) == 24, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, prepareConstraints) == 28, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, integrateVelocities) == 32, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, warmStart) == 36, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, solveImpulses) == 40, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, integratePositions) == 44, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, relaxImpulses) == 48, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, applyRestitution) == 52, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, storeImpulses) == 56, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, splitIslands) == 60, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, transforms) == 64, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, hitEvents) == 68, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, refit) == 72, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, bullets) == 76, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, sleepIslands) == 80, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, sensors) == 84, "Type b2Profile has unexpected offset.");
		static_assert(sizeof(b2Counters) == 88, "Type b2Counters has unexpected size.");
		static_assert(alignof(b2Counters) == 4, "Type b2Counters has unexpected alignment.");
		static_assert(offsetof(b2Counters, bodyCount) == 0, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, shapeCount) == 4, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, contactCount) == 8, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, jointCount) == 12, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, islandCount) == 16, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, stackUsed) == 20, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, staticTreeHeight) == 24, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, treeHeight) == 28, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, byteCount) == 32, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, taskCount) == 36, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, colorCounts) == 40, "Type b2Counters has unexpected offset.");
		static_assert(sizeof(b2SensorEvents) == 24, "Type b2SensorEvents has unexpected size.");
		static_assert(alignof(b2SensorEvents) == 8, "Type b2SensorEvents has unexpected alignment.");
		static_assert(offsetof(b2SensorEvents, beginEvents) == 0, "Type b2SensorEvents has unexpected offset.");
		static_assert(offsetof(b2SensorEvents, endEvents) == 8, "Type b2SensorEvents has unexpected offset.");
		static_assert(offsetof(b2SensorEvents, beginCount) == 16, "Type b2SensorEvents has unexpected offset.");
		static_assert(offsetof(b2SensorEvents, endCount) == 20, "Type b2SensorEvents has unexpected offset.");
		static_assert(sizeof(b2RayResult) == 40, "Type b2RayResult has unexpected size.");
		static_assert(alignof(b2RayResult) == 4, "Type b2RayResult has unexpected alignment.");
		static_assert(offsetof(b2RayResult, shapeId) == 0, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, point) == 8, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, normal) == 16, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, fraction) == 24, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, nodeVisits) == 28, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, leafVisits) == 32, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, hit) == 36, "Type b2RayResult has unexpected offset.");
		static_assert(sizeof(b2CastOutput) == 28, "Type b2CastOutput has unexpected size.");
		static_assert(alignof(b2CastOutput) == 4, "Type b2CastOutput has unexpected alignment.");
		static_assert(offsetof(b2CastOutput, normal) == 0, "Type b2CastOutput has unexpected offset.");
		static_assert(offsetof(b2CastOutput, point) == 8, "Type b2CastOutput has unexpected offset.");
		static_assert(offsetof(b2CastOutput, fraction) == 16, "Type b2CastOutput has unexpected offset.");
		static_assert(offsetof(b2CastOutput, iterations) == 20, "Type b2CastOutput has unexpected offset.");
		static_assert(offsetof(b2CastOutput, hit) == 24, "Type b2CastOutput has unexpected offset.");
		static_assert(sizeof(b2ContactBeginTouchEvent) == 128, "Type b2ContactBeginTouchEvent has unexpected size.");
		static_assert(alignof(b2ContactBeginTouchEvent) == 4, "Type b2ContactBeginTouchEvent has unexpected alignment.");
		static_assert(offsetof(b2ContactBeginTouchEvent, shapeIdA) == 0, "Type b2ContactBeginTouchEvent has unexpected offset.");
		static_assert(offsetof(b2ContactBeginTouchEvent, shapeIdB) == 8, "Type b2ContactBeginTouchEvent has unexpected offset.");
		static_assert(offsetof(b2ContactBeginTouchEvent, manifold) == 16, "Type b2ContactBeginTouchEvent has unexpected offset.");
		static_assert(sizeof(b2DynamicTree) == 72, "Type b2DynamicTree has unexpected size.");
		static_assert(alignof(b2DynamicTree) == 8, "Type b2DynamicTree has unexpected alignment.");
		static_assert(offsetof(b2DynamicTree, nodes) == 0, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, root) == 8, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, nodeCount) == 12, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, nodeCapacity) == 16, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, freeList) == 20, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, proxyCount) == 24, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, leafIndices) == 32, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, leafBoxes) == 40, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, leafCenters) == 48, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, binIndices) == 56, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, rebuildCapacity) == 64, "Type b2DynamicTree has unexpected offset.");
		static_assert(sizeof(b2FilterJointDef) == 32, "Type b2FilterJointDef has unexpected size.");
		static_assert(alignof(b2FilterJointDef) == 8, "Type b2FilterJointDef has unexpected alignment.");
		static_assert(offsetof(b2FilterJointDef, bodyIdA) == 0, "Type b2FilterJointDef has unexpected offset.");
		static_assert(offsetof(b2FilterJointDef, bodyIdB) == 8, "Type b2FilterJointDef has unexpected offset.");
		static_assert(offsetof(b2FilterJointDef, userData) == 16, "Type b2FilterJointDef has unexpected offset.");
		static_assert(offsetof(b2FilterJointDef, internalValue) == 24, "Type b2FilterJointDef has unexpected offset.");
		static_assert(sizeof(b2WheelJointDef) == 96, "Type b2WheelJointDef has unexpected size.");
		static_assert(alignof(b2WheelJointDef) == 8, "Type b2WheelJointDef has unexpected alignment.");
		static_assert(offsetof(b2WheelJointDef, bodyIdA) == 0, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, bodyIdB) == 8, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, localAnchorA) == 16, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, localAnchorB) == 24, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, localAxisA) == 32, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, enableSpring) == 40, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, hertz) == 44, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, dampingRatio) == 48, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, enableLimit) == 52, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, lowerTranslation) == 56, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, upperTranslation) == 60, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, enableMotor) == 64, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, maxMotorTorque) == 68, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, motorSpeed) == 72, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, collideConnected) == 76, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, userData) == 80, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, internalValue) == 88, "Type b2WheelJointDef has unexpected offset.");
		static_assert(sizeof(b2ContactData) == 128, "Type b2ContactData has unexpected size.");
		static_assert(alignof(b2ContactData) == 4, "Type b2ContactData has unexpected alignment.");
		static_assert(offsetof(b2ContactData, shapeIdA) == 0, "Type b2ContactData has unexpected offset.");
		static_assert(offsetof(b2ContactData, shapeIdB) == 8, "Type b2ContactData has unexpected offset.");
		static_assert(offsetof(b2ContactData, manifold) == 16, "Type b2ContactData has unexpected offset.");
		static_assert(sizeof(b2SegmentDistanceResult) == 28, "Type b2SegmentDistanceResult has unexpected size.");
		static_assert(alignof(b2SegmentDistanceResult) == 4, "Type b2SegmentDistanceResult has unexpected alignment.");
		static_assert(offsetof(b2SegmentDistanceResult, closest1) == 0, "Type b2SegmentDistanceResult has unexpected offset.");
		static_assert(offsetof(b2SegmentDistanceResult, closest2) == 8, "Type b2SegmentDistanceResult has unexpected offset.");
		static_assert(offsetof(b2SegmentDistanceResult, fraction1) == 16, "Type b2SegmentDistanceResult has unexpected offset.");
		static_assert(offsetof(b2SegmentDistanceResult, fraction2) == 20, "Type b2SegmentDistanceResult has unexpected offset.");
		static_assert(offsetof(b2SegmentDistanceResult, distanceSquared) == 24, "Type b2SegmentDistanceResult has unexpected offset.");
		static_assert(sizeof(b2BodyId) == 8, "Type b2BodyId has unexpected size.");
		static_assert(alignof(b2BodyId) == 4, "Type b2BodyId has unexpected alignment.");
		static_assert(offsetof(b2BodyId, index1) == 0, "Type b2BodyId has unexpected offset.");
		static_assert(offsetof(b2BodyId, world0) == 4, "Type b2BodyId has unexpected offset.");
		static_assert(offsetof(b2BodyId, generation) == 6, "Type b2BodyId has unexpected offset.");
		static_assert(sizeof(b2WeldJointDef) == 72, "Type b2WeldJointDef has unexpected size.");
		static_assert(alignof(b2WeldJointDef) == 8, "Type b2WeldJointDef has unexpected alignment.");
		static_assert(offsetof(b2WeldJointDef, bodyIdA) == 0, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, bodyIdB) == 8, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, localAnchorA) == 16, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, localAnchorB) == 24, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, referenceAngle) == 32, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, linearHertz) == 36, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, angularHertz) == 40, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, linearDampingRatio) == 44, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, angularDampingRatio) == 48, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, collideConnected) == 52, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, userData) == 56, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, internalValue) == 64, "Type b2WeldJointDef has unexpected offset.");
		static_assert(sizeof(b2Manifold) == 112, "Type b2Manifold has unexpected size.");
		static_assert(alignof(b2Manifold) == 4, "Type b2Manifold has unexpected alignment.");
		static_assert(offsetof(b2Manifold, normal) == 0, "Type b2Manifold has unexpected offset.");
		static_assert(offsetof(b2Manifold, rollingImpulse) == 8, "Type b2Manifold has unexpected offset.");
		static_assert(offsetof(b2Manifold, points) == 12, "Type b2Manifold has unexpected offset.");
		static_assert(offsetof(b2Manifold, pointCount) == 108, "Type b2Manifold has unexpected offset.");
		static_assert(sizeof(b2Plane) == 12, "Type b2Plane has unexpected size.");
		static_assert(alignof(b2Plane) == 4, "Type b2Plane has unexpected alignment.");
		static_assert(offsetof(b2Plane, normal) == 0, "Type b2Plane has unexpected offset.");
		static_assert(offsetof(b2Plane, offset) == 8, "Type b2Plane has unexpected offset.");
		static_assert(sizeof(b2ShapeCastInput) == 88, "Type b2ShapeCastInput has unexpected size.");
		static_assert(alignof(b2ShapeCastInput) == 4, "Type b2ShapeCastInput has unexpected alignment.");
		static_assert(offsetof(b2ShapeCastInput, proxy) == 0, "Type b2ShapeCastInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastInput, translation) == 72, "Type b2ShapeCastInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastInput, maxFraction) == 80, "Type b2ShapeCastInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastInput, canEncroach) == 84, "Type b2ShapeCastInput has unexpected offset.");
		static_assert(sizeof(b2SurfaceMaterial) == 24, "Type b2SurfaceMaterial has unexpected size.");
		static_assert(alignof(b2SurfaceMaterial) == 4, "Type b2SurfaceMaterial has unexpected alignment.");
		static_assert(offsetof(b2SurfaceMaterial, friction) == 0, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(offsetof(b2SurfaceMaterial, restitution) == 4, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(offsetof(b2SurfaceMaterial, rollingResistance) == 8, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(offsetof(b2SurfaceMaterial, tangentSpeed) == 12, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(offsetof(b2SurfaceMaterial, userMaterialId) == 16, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(offsetof(b2SurfaceMaterial, customColor) == 20, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(sizeof(b2RevoluteJointDef) == 104, "Type b2RevoluteJointDef has unexpected size.");
		static_assert(alignof(b2RevoluteJointDef) == 8, "Type b2RevoluteJointDef has unexpected alignment.");
		static_assert(offsetof(b2RevoluteJointDef, bodyIdA) == 0, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, bodyIdB) == 8, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, localAnchorA) == 16, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, localAnchorB) == 24, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, referenceAngle) == 32, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, targetAngle) == 36, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, enableSpring) == 40, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, hertz) == 44, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, dampingRatio) == 48, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, enableLimit) == 52, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, lowerAngle) == 56, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, upperAngle) == 60, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, enableMotor) == 64, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, maxMotorTorque) == 68, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, motorSpeed) == 72, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, drawSize) == 76, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, collideConnected) == 80, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, userData) == 88, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, internalValue) == 96, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(sizeof(b2Capsule) == 20, "Type b2Capsule has unexpected size.");
		static_assert(alignof(b2Capsule) == 4, "Type b2Capsule has unexpected alignment.");
		static_assert(offsetof(b2Capsule, center1) == 0, "Type b2Capsule has unexpected offset.");
		static_assert(offsetof(b2Capsule, center2) == 8, "Type b2Capsule has unexpected offset.");
		static_assert(offsetof(b2Capsule, radius) == 16, "Type b2Capsule has unexpected offset.");
		static_assert(sizeof(b2Transform) == 16, "Type b2Transform has unexpected size.");
		static_assert(alignof(b2Transform) == 4, "Type b2Transform has unexpected alignment.");
		static_assert(offsetof(b2Transform, p) == 0, "Type b2Transform has unexpected offset.");
		static_assert(offsetof(b2Transform, q) == 8, "Type b2Transform has unexpected offset.");
		static_assert(sizeof(b2MouseJointDef) == 56, "Type b2MouseJointDef has unexpected size.");
		static_assert(alignof(b2MouseJointDef) == 8, "Type b2MouseJointDef has unexpected alignment.");
		static_assert(offsetof(b2MouseJointDef, bodyIdA) == 0, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, bodyIdB) == 8, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, target) == 16, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, hertz) == 24, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, dampingRatio) == 28, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, maxForce) == 32, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, collideConnected) == 36, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, userData) == 40, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, internalValue) == 48, "Type b2MouseJointDef has unexpected offset.");
		static_assert(sizeof(b2Mat22) == 16, "Type b2Mat22 has unexpected size.");
		static_assert(alignof(b2Mat22) == 4, "Type b2Mat22 has unexpected alignment.");
		static_assert(offsetof(b2Mat22, cx) == 0, "Type b2Mat22 has unexpected offset.");
		static_assert(offsetof(b2Mat22, cy) == 8, "Type b2Mat22 has unexpected offset.");
		static_assert(sizeof(b2CollisionPlane) == 24, "Type b2CollisionPlane has unexpected size.");
		static_assert(alignof(b2CollisionPlane) == 4, "Type b2CollisionPlane has unexpected alignment.");
		static_assert(offsetof(b2CollisionPlane, plane) == 0, "Type b2CollisionPlane has unexpected offset.");
		static_assert(offsetof(b2CollisionPlane, pushLimit) == 12, "Type b2CollisionPlane has unexpected offset.");
		static_assert(offsetof(b2CollisionPlane, push) == 16, "Type b2CollisionPlane has unexpected offset.");
		static_assert(offsetof(b2CollisionPlane, clipVelocity) == 20, "Type b2CollisionPlane has unexpected offset.");
		static_assert(sizeof(b2Filter) == 24, "Type b2Filter has unexpected size.");
		static_assert(alignof(b2Filter) == 8, "Type b2Filter has unexpected alignment.");
		static_assert(offsetof(b2Filter, categoryBits) == 0, "Type b2Filter has unexpected offset.");
		static_assert(offsetof(b2Filter, maskBits) == 8, "Type b2Filter has unexpected offset.");
		static_assert(offsetof(b2Filter, groupIndex) == 16, "Type b2Filter has unexpected offset.");
		static_assert(sizeof(b2ShapeProxy) == 72, "Type b2ShapeProxy has unexpected size.");
		static_assert(alignof(b2ShapeProxy) == 4, "Type b2ShapeProxy has unexpected alignment.");
		static_assert(offsetof(b2ShapeProxy, points) == 0, "Type b2ShapeProxy has unexpected offset.");
		static_assert(offsetof(b2ShapeProxy, count) == 64, "Type b2ShapeProxy has unexpected offset.");
		static_assert(offsetof(b2ShapeProxy, radius) == 68, "Type b2ShapeProxy has unexpected offset.");
		static_assert(sizeof(b2ShapeDef) == 80, "Type b2ShapeDef has unexpected size.");
		static_assert(alignof(b2ShapeDef) == 8, "Type b2ShapeDef has unexpected alignment.");
		static_assert(offsetof(b2ShapeDef, userData) == 0, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, material) == 8, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, density) == 32, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, filter) == 40, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, isSensor) == 64, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, enableSensorEvents) == 65, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, enableContactEvents) == 66, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, enableHitEvents) == 67, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, enablePreSolveEvents) == 68, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, invokeContactCreation) == 69, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, updateBodyMass) == 70, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, internalValue) == 72, "Type b2ShapeDef has unexpected offset.");
		static_assert(sizeof(b2ShapeId) == 8, "Type b2ShapeId has unexpected size.");
		static_assert(alignof(b2ShapeId) == 4, "Type b2ShapeId has unexpected alignment.");
		static_assert(offsetof(b2ShapeId, index1) == 0, "Type b2ShapeId has unexpected offset.");
		static_assert(offsetof(b2ShapeId, world0) == 4, "Type b2ShapeId has unexpected offset.");
		static_assert(offsetof(b2ShapeId, generation) == 6, "Type b2ShapeId has unexpected offset.");
		static_assert(sizeof(b2Polygon) == 144, "Type b2Polygon has unexpected size.");
		static_assert(alignof(b2Polygon) == 4, "Type b2Polygon has unexpected alignment.");
		static_assert(offsetof(b2Polygon, vertices) == 0, "Type b2Polygon has unexpected offset.");
		static_assert(offsetof(b2Polygon, normals) == 64, "Type b2Polygon has unexpected offset.");
		static_assert(offsetof(b2Polygon, centroid) == 128, "Type b2Polygon has unexpected offset.");
		static_assert(offsetof(b2Polygon, radius) == 136, "Type b2Polygon has unexpected offset.");
		static_assert(offsetof(b2Polygon, count) == 140, "Type b2Polygon has unexpected offset.");
		static_assert(sizeof(b2WorldDef) == 96, "Type b2WorldDef has unexpected size.");
		static_assert(alignof(b2WorldDef) == 8, "Type b2WorldDef has unexpected alignment.");
		static_assert(offsetof(b2WorldDef, gravity) == 0, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, restitutionThreshold) == 8, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, hitEventThreshold) == 12, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, contactHertz) == 16, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, contactDampingRatio) == 20, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, maxContactPushSpeed) == 24, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, maximumLinearSpeed) == 28, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, frictionCallback) == 32, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, restitutionCallback) == 40, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, enableSleep) == 48, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, enableContinuous) == 49, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, workerCount) == 52, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, enqueueTask) == 56, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, finishTask) == 64, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, userTaskContext) == 72, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, userData) == 80, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, internalValue) == 88, "Type b2WorldDef has unexpected offset.");
		static_assert(sizeof(b2ManifoldPoint) == 48, "Type b2ManifoldPoint has unexpected size.");
		static_assert(alignof(b2ManifoldPoint) == 4, "Type b2ManifoldPoint has unexpected alignment.");
		static_assert(offsetof(b2ManifoldPoint, point) == 0, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, anchorA) == 8, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, anchorB) == 16, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, separation) == 24, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, normalImpulse) == 28, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, tangentImpulse) == 32, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, totalNormalImpulse) == 36, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, normalVelocity) == 40, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, id) == 44, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, persisted) == 46, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(sizeof(b2ChainDef) == 72, "Type b2ChainDef has unexpected size.");
		static_assert(alignof(b2ChainDef) == 8, "Type b2ChainDef has unexpected alignment.");
		static_assert(offsetof(b2ChainDef, userData) == 0, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, points) == 8, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, count) == 16, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, materials) == 24, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, materialCount) == 32, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, filter) == 40, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, isLoop) == 64, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, enableSensorEvents) == 65, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, internalValue) == 68, "Type b2ChainDef has unexpected offset.");
		static_assert(sizeof(b2ContactEvents) == 40, "Type b2ContactEvents has unexpected size.");
		static_assert(alignof(b2ContactEvents) == 8, "Type b2ContactEvents has unexpected alignment.");
		static_assert(offsetof(b2ContactEvents, beginEvents) == 0, "Type b2ContactEvents has unexpected offset.");
		static_assert(offsetof(b2ContactEvents, endEvents) == 8, "Type b2ContactEvents has unexpected offset.");
		static_assert(offsetof(b2ContactEvents, hitEvents) == 16, "Type b2ContactEvents has unexpected offset.");
		static_assert(offsetof(b2ContactEvents, beginCount) == 24, "Type b2ContactEvents has unexpected offset.");
		static_assert(offsetof(b2ContactEvents, endCount) == 28, "Type b2ContactEvents has unexpected offset.");
		static_assert(offsetof(b2ContactEvents, hitCount) == 32, "Type b2ContactEvents has unexpected offset.");
		static_assert(sizeof(b2BodyMoveEvent) == 40, "Type b2BodyMoveEvent has unexpected size.");
		static_assert(alignof(b2BodyMoveEvent) == 8, "Type b2BodyMoveEvent has unexpected alignment.");
		static_assert(offsetof(b2BodyMoveEvent, transform) == 0, "Type b2BodyMoveEvent has unexpected offset.");
		static_assert(offsetof(b2BodyMoveEvent, bodyId) == 16, "Type b2BodyMoveEvent has unexpected offset.");
		static_assert(offsetof(b2BodyMoveEvent, userData) == 24, "Type b2BodyMoveEvent has unexpected offset.");
		static_assert(offsetof(b2BodyMoveEvent, fellAsleep) == 32, "Type b2BodyMoveEvent has unexpected offset.");
		static_assert(sizeof(b2MassData) == 16, "Type b2MassData has unexpected size.");
		static_assert(alignof(b2MassData) == 4, "Type b2MassData has unexpected alignment.");
		static_assert(offsetof(b2MassData, mass) == 0, "Type b2MassData has unexpected offset.");
		static_assert(offsetof(b2MassData, center) == 4, "Type b2MassData has unexpected offset.");
		static_assert(offsetof(b2MassData, rotationalInertia) == 12, "Type b2MassData has unexpected offset.");
		static_assert(sizeof(b2SimplexVertex) == 36, "Type b2SimplexVertex has unexpected size.");
		static_assert(alignof(b2SimplexVertex) == 4, "Type b2SimplexVertex has unexpected alignment.");
		static_assert(offsetof(b2SimplexVertex, wA) == 0, "Type b2SimplexVertex has unexpected offset.");
		static_assert(offsetof(b2SimplexVertex, wB) == 8, "Type b2SimplexVertex has unexpected offset.");
		static_assert(offsetof(b2SimplexVertex, w) == 16, "Type b2SimplexVertex has unexpected offset.");
		static_assert(offsetof(b2SimplexVertex, a) == 24, "Type b2SimplexVertex has unexpected offset.");
		static_assert(offsetof(b2SimplexVertex, indexA) == 28, "Type b2SimplexVertex has unexpected offset.");
		static_assert(offsetof(b2SimplexVertex, indexB) == 32, "Type b2SimplexVertex has unexpected offset.");
		static_assert(sizeof(b2TOIOutput) == 8, "Type b2TOIOutput has unexpected size.");
		static_assert(alignof(b2TOIOutput) == 4, "Type b2TOIOutput has unexpected alignment.");
		static_assert(offsetof(b2TOIOutput, state) == 0, "Type b2TOIOutput has unexpected offset.");
		static_assert(offsetof(b2TOIOutput, fraction) == 4, "Type b2TOIOutput has unexpected offset.");
		static_assert(sizeof(b2CosSin) == 8, "Type b2CosSin has unexpected size.");
		static_assert(alignof(b2CosSin) == 4, "Type b2CosSin has unexpected alignment.");
		static_assert(offsetof(b2CosSin, cosine) == 0, "Type b2CosSin has unexpected offset.");
		static_assert(offsetof(b2CosSin, sine) == 4, "Type b2CosSin has unexpected offset.");
		static_assert(sizeof(b2WorldId) == 4, "Type b2WorldId has unexpected size.");
		static_assert(alignof(b2WorldId) == 2, "Type b2WorldId has unexpected alignment.");
		static_assert(offsetof(b2WorldId, index1) == 0, "Type b2WorldId has unexpected offset.");
		static_assert(offsetof(b2WorldId, generation) == 2, "Type b2WorldId has unexpected offset.");
		static_assert(sizeof(b2PrismaticJointDef) == 104, "Type b2PrismaticJointDef has unexpected size.");
		static_assert(alignof(b2PrismaticJointDef) == 8, "Type b2PrismaticJointDef has unexpected alignment.");
		static_assert(offsetof(b2PrismaticJointDef, bodyIdA) == 0, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, bodyIdB) == 8, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, localAnchorA) == 16, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, localAnchorB) == 24, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, localAxisA) == 32, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, referenceAngle) == 40, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, targetTranslation) == 44, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, enableSpring) == 48, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, hertz) == 52, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, dampingRatio) == 56, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, enableLimit) == 60, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, lowerTranslation) == 64, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, upperTranslation) == 68, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, enableMotor) == 72, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, maxMotorForce) == 76, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, motorSpeed) == 80, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, collideConnected) == 84, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, userData) == 88, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, internalValue) == 96, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(sizeof(b2Rot) == 8, "Type b2Rot has unexpected size.");
		static_assert(alignof(b2Rot) == 4, "Type b2Rot has unexpected alignment.");
		static_assert(offsetof(b2Rot, c) == 0, "Type b2Rot has unexpected offset.");
		static_assert(offsetof(b2Rot, s) == 4, "Type b2Rot has unexpected offset.");
		static_assert(sizeof(b2SimplexCache) == 8, "Type b2SimplexCache has unexpected size.");
		static_assert(alignof(b2SimplexCache) == 2, "Type b2SimplexCache has unexpected alignment.");
		static_assert(offsetof(b2SimplexCache, count) == 0, "Type b2SimplexCache has unexpected offset.");
		static_assert(offsetof(b2SimplexCache, indexA) == 2, "Type b2SimplexCache has unexpected offset.");
		static_assert(offsetof(b2SimplexCache, indexB) == 5, "Type b2SimplexCache has unexpected offset.");
		static_assert(sizeof(b2SensorBeginTouchEvent) == 16, "Type b2SensorBeginTouchEvent has unexpected size.");
		static_assert(alignof(b2SensorBeginTouchEvent) == 4, "Type b2SensorBeginTouchEvent has unexpected alignment.");
		static_assert(offsetof(b2SensorBeginTouchEvent, sensorShapeId) == 0, "Type b2SensorBeginTouchEvent has unexpected offset.");
		static_assert(offsetof(b2SensorBeginTouchEvent, visitorShapeId) == 8, "Type b2SensorBeginTouchEvent has unexpected offset.");
		static_assert(sizeof(b2Hull) == 68, "Type b2Hull has unexpected size.");
		static_assert(alignof(b2Hull) == 4, "Type b2Hull has unexpected alignment.");
		static_assert(offsetof(b2Hull, points) == 0, "Type b2Hull has unexpected offset.");
		static_assert(offsetof(b2Hull, count) == 64, "Type b2Hull has unexpected offset.");
		static_assert(sizeof(b2ChainId) == 8, "Type b2ChainId has unexpected size.");
		static_assert(alignof(b2ChainId) == 4, "Type b2ChainId has unexpected alignment.");
		static_assert(offsetof(b2ChainId, index1) == 0, "Type b2ChainId has unexpected offset.");
		static_assert(offsetof(b2ChainId, world0) == 4, "Type b2ChainId has unexpected offset.");
		static_assert(offsetof(b2ChainId, generation) == 6, "Type b2ChainId has unexpected offset.");
		static_assert(sizeof(b2RayCastInput) == 20, "Type b2RayCastInput has unexpected size.");
		static_assert(alignof(b2RayCastInput) == 4, "Type b2RayCastInput has unexpected alignment.");
		static_assert(offsetof(b2RayCastInput, origin) == 0, "Type b2RayCastInput has unexpected offset.");
		static_assert(offsetof(b2RayCastInput, translation) == 8, "Type b2RayCastInput has unexpected offset.");
		static_assert(offsetof(b2RayCastInput, maxFraction) == 16, "Type b2RayCastInput has unexpected offset.");
		static_assert(sizeof(b2DistanceOutput) == 36, "Type b2DistanceOutput has unexpected size.");
		static_assert(alignof(b2DistanceOutput) == 4, "Type b2DistanceOutput has unexpected alignment.");
		static_assert(offsetof(b2DistanceOutput, pointA) == 0, "Type b2DistanceOutput has unexpected offset.");
		static_assert(offsetof(b2DistanceOutput, pointB) == 8, "Type b2DistanceOutput has unexpected offset.");
		static_assert(offsetof(b2DistanceOutput, normal) == 16, "Type b2DistanceOutput has unexpected offset.");
		static_assert(offsetof(b2DistanceOutput, distance) == 24, "Type b2DistanceOutput has unexpected offset.");
		static_assert(offsetof(b2DistanceOutput, iterations) == 28, "Type b2DistanceOutput has unexpected offset.");
		static_assert(offsetof(b2DistanceOutput, simplexCount) == 32, "Type b2DistanceOutput has unexpected offset.");
		static_assert(sizeof(b2TreeStats) == 8, "Type b2TreeStats has unexpected size.");
		static_assert(alignof(b2TreeStats) == 4, "Type b2TreeStats has unexpected alignment.");
		static_assert(offsetof(b2TreeStats, nodeVisits) == 0, "Type b2TreeStats has unexpected offset.");
		static_assert(offsetof(b2TreeStats, leafVisits) == 4, "Type b2TreeStats has unexpected offset.");
		static_assert(sizeof(b2Simplex) == 112, "Type b2Simplex has unexpected size.");
		static_assert(alignof(b2Simplex) == 4, "Type b2Simplex has unexpected alignment.");
		static_assert(offsetof(b2Simplex, v1) == 0, "Type b2Simplex has unexpected offset.");
		static_assert(offsetof(b2Simplex, v2) == 36, "Type b2Simplex has unexpected offset.");
		static_assert(offsetof(b2Simplex, v3) == 72, "Type b2Simplex has unexpected offset.");
		static_assert(offsetof(b2Simplex, count) == 108, "Type b2Simplex has unexpected offset.");
		static_assert(sizeof(b2ContactHitEvent) == 36, "Type b2ContactHitEvent has unexpected size.");
		static_assert(alignof(b2ContactHitEvent) == 4, "Type b2ContactHitEvent has unexpected alignment.");
		static_assert(offsetof(b2ContactHitEvent, shapeIdA) == 0, "Type b2ContactHitEvent has unexpected offset.");
		static_assert(offsetof(b2ContactHitEvent, shapeIdB) == 8, "Type b2ContactHitEvent has unexpected offset.");
		static_assert(offsetof(b2ContactHitEvent, point) == 16, "Type b2ContactHitEvent has unexpected offset.");
		static_assert(offsetof(b2ContactHitEvent, normal) == 24, "Type b2ContactHitEvent has unexpected offset.");
		static_assert(offsetof(b2ContactHitEvent, approachSpeed) == 32, "Type b2ContactHitEvent has unexpected offset.");
		static_assert(sizeof(b2Vec2) == 8, "Type b2Vec2 has unexpected size.");
		static_assert(alignof(b2Vec2) == 4, "Type b2Vec2 has unexpected alignment.");
		static_assert(offsetof(b2Vec2, x) == 0, "Type b2Vec2 has unexpected offset.");
		static_assert(offsetof(b2Vec2, y) == 4, "Type b2Vec2 has unexpected offset.");
		static_assert(sizeof(b2AABB) == 16, "Type b2AABB has unexpected size.");
		static_assert(alignof(b2AABB) == 4, "Type b2AABB has unexpected alignment.");
		static_assert(offsetof(b2AABB, lowerBound) == 0, "Type b2AABB has unexpected offset.");
		static_assert(offsetof(b2AABB, upperBound) == 8, "Type b2AABB has unexpected offset.");
		static_assert(sizeof(b2PlaneResult) == 24, "Type b2PlaneResult has unexpected size.");
		static_assert(alignof(b2PlaneResult) == 4, "Type b2PlaneResult has unexpected alignment.");
		static_assert(offsetof(b2PlaneResult, plane) == 0, "Type b2PlaneResult has unexpected offset.");
		static_assert(offsetof(b2PlaneResult, point) == 12, "Type b2PlaneResult has unexpected offset.");
		static_assert(offsetof(b2PlaneResult, hit) == 20, "Type b2PlaneResult has unexpected offset.");
		static_assert(sizeof(b2DistanceInput) == 180, "Type b2DistanceInput has unexpected size.");
		static_assert(alignof(b2DistanceInput) == 4, "Type b2DistanceInput has unexpected alignment.");
		static_assert(offsetof(b2DistanceInput, proxyA) == 0, "Type b2DistanceInput has unexpected offset.");
		static_assert(offsetof(b2DistanceInput, proxyB) == 72, "Type b2DistanceInput has unexpected offset.");
		static_assert(offsetof(b2DistanceInput, transformA) == 144, "Type b2DistanceInput has unexpected offset.");
		static_assert(offsetof(b2DistanceInput, transformB) == 160, "Type b2DistanceInput has unexpected offset.");
		static_assert(offsetof(b2DistanceInput, useRadii) == 176, "Type b2DistanceInput has unexpected offset.");
		static_assert(sizeof(b2ShapeCastPairInput) == 192, "Type b2ShapeCastPairInput has unexpected size.");
		static_assert(alignof(b2ShapeCastPairInput) == 4, "Type b2ShapeCastPairInput has unexpected alignment.");
		static_assert(offsetof(b2ShapeCastPairInput, proxyA) == 0, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, proxyB) == 72, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, transformA) == 144, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, transformB) == 160, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, translationB) == 176, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, maxFraction) == 184, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, canEncroach) == 188, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(sizeof(b2BodyEvents) == 16, "Type b2BodyEvents has unexpected size.");
		static_assert(alignof(b2BodyEvents) == 8, "Type b2BodyEvents has unexpected alignment.");
		static_assert(offsetof(b2BodyEvents, moveEvents) == 0, "Type b2BodyEvents has unexpected offset.");
		static_assert(offsetof(b2BodyEvents, moveCount) == 8, "Type b2BodyEvents has unexpected offset.");
		static_assert(sizeof(b2Version) == 12, "Type b2Version has unexpected size.");
		static_assert(alignof(b2Version) == 4, "Type b2Version has unexpected alignment.");
		static_assert(offsetof(b2Version, major) == 0, "Type b2Version has unexpected offset.");
		static_assert(offsetof(b2Version, minor) == 4, "Type b2Version has unexpected offset.");
		static_assert(offsetof(b2Version, revision) == 8, "Type b2Version has unexpected offset.");
		static_assert(sizeof(b2TOIInput) == 228, "Type b2TOIInput has unexpected size.");
		static_assert(alignof(b2TOIInput) == 4, "Type b2TOIInput has unexpected alignment.");
		static_assert(offsetof(b2TOIInput, proxyA) == 0, "Type b2TOIInput has unexpected offset.");
		static_assert(offsetof(b2TOIInput, proxyB) == 72, "Type b2TOIInput has unexpected offset.");
		static_assert(offsetof(b2TOIInput, sweepA) == 144, "Type b2TOIInput has unexpected offset.");
		static_assert(offsetof(b2TOIInput, sweepB) == 184, "Type b2TOIInput has unexpected offset.");
		static_assert(offsetof(b2TOIInput, maxFraction) == 224, "Type b2TOIInput has unexpected offset.");
		static_assert(sizeof(b2BodyDef) == 80, "Type b2BodyDef has unexpected size.");
		static_assert(alignof(b2BodyDef) == 8, "Type b2BodyDef has unexpected alignment.");
		static_assert(offsetof(b2BodyDef, type) == 0, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, position) == 4, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, rotation) == 12, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, linearVelocity) == 20, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, angularVelocity) == 28, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, linearDamping) == 32, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, angularDamping) == 36, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, gravityScale) == 40, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, sleepThreshold) == 44, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, name) == 48, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, userData) == 56, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, enableSleep) == 64, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, isAwake) == 65, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, fixedRotation) == 66, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, isBullet) == 67, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, isEnabled) == 68, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, allowFastRotation) == 69, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, internalValue) == 72, "Type b2BodyDef has unexpected offset.");
		static_assert(sizeof(b2DebugDraw) == 112, "Type b2DebugDraw has unexpected size.");
		static_assert(alignof(b2DebugDraw) == 8, "Type b2DebugDraw has unexpected alignment.");
		static_assert(offsetof(b2DebugDraw, DrawPolygonFcn) == 0, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawSolidPolygonFcn) == 8, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawCircleFcn) == 16, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawSolidCircleFcn) == 24, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawSolidCapsuleFcn) == 32, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawSegmentFcn) == 40, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawTransformFcn) == 48, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawPointFcn) == 56, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawStringFcn) == 64, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawingBounds) == 72, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, useDrawingBounds) == 88, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawShapes) == 89, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawJoints) == 90, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawJointExtras) == 91, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawBounds) == 92, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawMass) == 93, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawBodyNames) == 94, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawContacts) == 95, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawGraphColors) == 96, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawContactNormals) == 97, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawContactImpulses) == 98, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawContactFeatures) == 99, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawFrictionImpulses) == 100, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawIslands) == 101, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, context) == 104, "Type b2DebugDraw has unexpected offset.");
		static_assert(sizeof(b2DistanceJointDef) == 96, "Type b2DistanceJointDef has unexpected size.");
		static_assert(alignof(b2DistanceJointDef) == 8, "Type b2DistanceJointDef has unexpected alignment.");
		static_assert(offsetof(b2DistanceJointDef, bodyIdA) == 0, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, bodyIdB) == 8, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, localAnchorA) == 16, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, localAnchorB) == 24, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, length) == 32, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, enableSpring) == 36, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, hertz) == 40, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, dampingRatio) == 44, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, enableLimit) == 48, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, minLength) == 52, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, maxLength) == 56, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, enableMotor) == 60, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, maxMotorForce) == 64, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, motorSpeed) == 68, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, collideConnected) == 72, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, userData) == 80, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, internalValue) == 88, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(sizeof(b2Circle) == 12, "Type b2Circle has unexpected size.");
		static_assert(alignof(b2Circle) == 4, "Type b2Circle has unexpected alignment.");
		static_assert(offsetof(b2Circle, center) == 0, "Type b2Circle has unexpected offset.");
		static_assert(offsetof(b2Circle, radius) == 8, "Type b2Circle has unexpected offset.");
		static_assert(sizeof(b2QueryFilter) == 16, "Type b2QueryFilter has unexpected size.");
		static_assert(alignof(b2QueryFilter) == 8, "Type b2QueryFilter has unexpected alignment.");
		static_assert(offsetof(b2QueryFilter, categoryBits) == 0, "Type b2QueryFilter has unexpected offset.");
		static_assert(offsetof(b2QueryFilter, maskBits) == 8, "Type b2QueryFilter has unexpected offset.");
		static_assert(sizeof(b2ExplosionDef) == 32, "Type b2ExplosionDef has unexpected size.");
		static_assert(alignof(b2ExplosionDef) == 8, "Type b2ExplosionDef has unexpected alignment.");
		static_assert(offsetof(b2ExplosionDef, maskBits) == 0, "Type b2ExplosionDef has unexpected offset.");
		static_assert(offsetof(b2ExplosionDef, position) == 8, "Type b2ExplosionDef has unexpected offset.");
		static_assert(offsetof(b2ExplosionDef, radius) == 16, "Type b2ExplosionDef has unexpected offset.");
		static_assert(offsetof(b2ExplosionDef, falloff) == 20, "Type b2ExplosionDef has unexpected offset.");
		static_assert(offsetof(b2ExplosionDef, impulsePerLength) == 24, "Type b2ExplosionDef has unexpected offset.");
		#endif // !defined(_WIN32) && ARCH_BITS == 64
		

		#if defined(__i386__) && defined(__ANDROID__)
		static_assert(sizeof(const uint8_t) == 1, "Type const uint8_t has unexpected size.");
		static_assert(alignof(const uint8_t) == 1, "Type const uint8_t has unexpected alignment.");
		static_assert(sizeof(unsigned int) == 4, "Type unsigned int has unexpected size.");
		static_assert(alignof(unsigned int) == 4, "Type unsigned int has unexpected alignment.");
		static_assert(sizeof(uint16_t) == 2, "Type uint16_t has unexpected size.");
		static_assert(alignof(uint16_t) == 2, "Type uint16_t has unexpected alignment.");
		static_assert(sizeof(bool) == 1, "Type bool has unexpected size.");
		static_assert(alignof(bool) == 1, "Type bool has unexpected alignment.");
		static_assert(sizeof(uint64_t) == 8, "Type uint64_t has unexpected size.");
		static_assert(alignof(uint64_t) == 4, "Type uint64_t has unexpected alignment.");
		static_assert(sizeof(const char) == 1, "Type const char has unexpected size.");
		static_assert(alignof(const char) == 1, "Type const char has unexpected alignment.");
		static_assert(sizeof(uint32_t) == 4, "Type uint32_t has unexpected size.");
		static_assert(alignof(uint32_t) == 4, "Type uint32_t has unexpected alignment.");
		static_assert(sizeof(uint8_t) == 1, "Type uint8_t has unexpected size.");
		static_assert(alignof(uint8_t) == 1, "Type uint8_t has unexpected alignment.");
		static_assert(sizeof(float) == 4, "Type float has unexpected size.");
		static_assert(alignof(float) == 4, "Type float has unexpected alignment.");
		static_assert(sizeof(int) == 4, "Type int has unexpected size.");
		static_assert(alignof(int) == 4, "Type int has unexpected alignment.");
		static_assert(sizeof(int32_t) == 4, "Type int32_t has unexpected size.");
		static_assert(alignof(int32_t) == 4, "Type int32_t has unexpected alignment.");
		static_assert(sizeof(b2Sweep) == 40, "Type b2Sweep has unexpected size.");
		static_assert(alignof(b2Sweep) == 4, "Type b2Sweep has unexpected alignment.");
		static_assert(offsetof(b2Sweep, localCenter) == 0, "Type b2Sweep has unexpected offset.");
		static_assert(offsetof(b2Sweep, c1) == 8, "Type b2Sweep has unexpected offset.");
		static_assert(offsetof(b2Sweep, c2) == 16, "Type b2Sweep has unexpected offset.");
		static_assert(offsetof(b2Sweep, q1) == 24, "Type b2Sweep has unexpected offset.");
		static_assert(offsetof(b2Sweep, q2) == 32, "Type b2Sweep has unexpected offset.");
		static_assert(sizeof(b2SensorEndTouchEvent) == 16, "Type b2SensorEndTouchEvent has unexpected size.");
		static_assert(alignof(b2SensorEndTouchEvent) == 4, "Type b2SensorEndTouchEvent has unexpected alignment.");
		static_assert(offsetof(b2SensorEndTouchEvent, sensorShapeId) == 0, "Type b2SensorEndTouchEvent has unexpected offset.");
		static_assert(offsetof(b2SensorEndTouchEvent, visitorShapeId) == 8, "Type b2SensorEndTouchEvent has unexpected offset.");
		static_assert(sizeof(b2ContactEndTouchEvent) == 16, "Type b2ContactEndTouchEvent has unexpected size.");
		static_assert(alignof(b2ContactEndTouchEvent) == 4, "Type b2ContactEndTouchEvent has unexpected alignment.");
		static_assert(offsetof(b2ContactEndTouchEvent, shapeIdA) == 0, "Type b2ContactEndTouchEvent has unexpected offset.");
		static_assert(offsetof(b2ContactEndTouchEvent, shapeIdB) == 8, "Type b2ContactEndTouchEvent has unexpected offset.");
		static_assert(sizeof(b2Segment) == 16, "Type b2Segment has unexpected size.");
		static_assert(alignof(b2Segment) == 4, "Type b2Segment has unexpected alignment.");
		static_assert(offsetof(b2Segment, point1) == 0, "Type b2Segment has unexpected offset.");
		static_assert(offsetof(b2Segment, point2) == 8, "Type b2Segment has unexpected offset.");
		static_assert(sizeof(b2JointId) == 8, "Type b2JointId has unexpected size.");
		static_assert(alignof(b2JointId) == 4, "Type b2JointId has unexpected alignment.");
		static_assert(offsetof(b2JointId, index1) == 0, "Type b2JointId has unexpected offset.");
		static_assert(offsetof(b2JointId, world0) == 4, "Type b2JointId has unexpected offset.");
		static_assert(offsetof(b2JointId, generation) == 6, "Type b2JointId has unexpected offset.");
		static_assert(sizeof(b2ChainSegment) == 36, "Type b2ChainSegment has unexpected size.");
		static_assert(alignof(b2ChainSegment) == 4, "Type b2ChainSegment has unexpected alignment.");
		static_assert(offsetof(b2ChainSegment, ghost1) == 0, "Type b2ChainSegment has unexpected offset.");
		static_assert(offsetof(b2ChainSegment, segment) == 8, "Type b2ChainSegment has unexpected offset.");
		static_assert(offsetof(b2ChainSegment, ghost2) == 24, "Type b2ChainSegment has unexpected offset.");
		static_assert(offsetof(b2ChainSegment, chainId) == 32, "Type b2ChainSegment has unexpected offset.");
		static_assert(sizeof(b2PlaneSolverResult) == 12, "Type b2PlaneSolverResult has unexpected size.");
		static_assert(alignof(b2PlaneSolverResult) == 4, "Type b2PlaneSolverResult has unexpected alignment.");
		static_assert(offsetof(b2PlaneSolverResult, translation) == 0, "Type b2PlaneSolverResult has unexpected offset.");
		static_assert(offsetof(b2PlaneSolverResult, iterationCount) == 8, "Type b2PlaneSolverResult has unexpected offset.");
		static_assert(sizeof(b2MotorJointDef) == 52, "Type b2MotorJointDef has unexpected size.");
		static_assert(alignof(b2MotorJointDef) == 4, "Type b2MotorJointDef has unexpected alignment.");
		static_assert(offsetof(b2MotorJointDef, bodyIdA) == 0, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, bodyIdB) == 8, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, linearOffset) == 16, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, angularOffset) == 24, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, maxForce) == 28, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, maxTorque) == 32, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, correctionFactor) == 36, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, collideConnected) == 40, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, userData) == 44, "Type b2MotorJointDef has unexpected offset.");
		static_assert(offsetof(b2MotorJointDef, internalValue) == 48, "Type b2MotorJointDef has unexpected offset.");
		static_assert(sizeof(b2Profile) == 88, "Type b2Profile has unexpected size.");
		static_assert(alignof(b2Profile) == 4, "Type b2Profile has unexpected alignment.");
		static_assert(offsetof(b2Profile, step) == 0, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, pairs) == 4, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, collide) == 8, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, solve) == 12, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, mergeIslands) == 16, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, prepareStages) == 20, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, solveConstraints) == 24, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, prepareConstraints) == 28, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, integrateVelocities) == 32, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, warmStart) == 36, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, solveImpulses) == 40, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, integratePositions) == 44, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, relaxImpulses) == 48, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, applyRestitution) == 52, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, storeImpulses) == 56, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, splitIslands) == 60, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, transforms) == 64, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, hitEvents) == 68, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, refit) == 72, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, bullets) == 76, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, sleepIslands) == 80, "Type b2Profile has unexpected offset.");
		static_assert(offsetof(b2Profile, sensors) == 84, "Type b2Profile has unexpected offset.");
		static_assert(sizeof(b2Counters) == 88, "Type b2Counters has unexpected size.");
		static_assert(alignof(b2Counters) == 4, "Type b2Counters has unexpected alignment.");
		static_assert(offsetof(b2Counters, bodyCount) == 0, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, shapeCount) == 4, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, contactCount) == 8, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, jointCount) == 12, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, islandCount) == 16, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, stackUsed) == 20, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, staticTreeHeight) == 24, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, treeHeight) == 28, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, byteCount) == 32, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, taskCount) == 36, "Type b2Counters has unexpected offset.");
		static_assert(offsetof(b2Counters, colorCounts) == 40, "Type b2Counters has unexpected offset.");
		static_assert(sizeof(b2SensorEvents) == 16, "Type b2SensorEvents has unexpected size.");
		static_assert(alignof(b2SensorEvents) == 4, "Type b2SensorEvents has unexpected alignment.");
		static_assert(offsetof(b2SensorEvents, beginEvents) == 0, "Type b2SensorEvents has unexpected offset.");
		static_assert(offsetof(b2SensorEvents, endEvents) == 4, "Type b2SensorEvents has unexpected offset.");
		static_assert(offsetof(b2SensorEvents, beginCount) == 8, "Type b2SensorEvents has unexpected offset.");
		static_assert(offsetof(b2SensorEvents, endCount) == 12, "Type b2SensorEvents has unexpected offset.");
		static_assert(sizeof(b2RayResult) == 40, "Type b2RayResult has unexpected size.");
		static_assert(alignof(b2RayResult) == 4, "Type b2RayResult has unexpected alignment.");
		static_assert(offsetof(b2RayResult, shapeId) == 0, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, point) == 8, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, normal) == 16, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, fraction) == 24, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, nodeVisits) == 28, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, leafVisits) == 32, "Type b2RayResult has unexpected offset.");
		static_assert(offsetof(b2RayResult, hit) == 36, "Type b2RayResult has unexpected offset.");
		static_assert(sizeof(b2CastOutput) == 28, "Type b2CastOutput has unexpected size.");
		static_assert(alignof(b2CastOutput) == 4, "Type b2CastOutput has unexpected alignment.");
		static_assert(offsetof(b2CastOutput, normal) == 0, "Type b2CastOutput has unexpected offset.");
		static_assert(offsetof(b2CastOutput, point) == 8, "Type b2CastOutput has unexpected offset.");
		static_assert(offsetof(b2CastOutput, fraction) == 16, "Type b2CastOutput has unexpected offset.");
		static_assert(offsetof(b2CastOutput, iterations) == 20, "Type b2CastOutput has unexpected offset.");
		static_assert(offsetof(b2CastOutput, hit) == 24, "Type b2CastOutput has unexpected offset.");
		static_assert(sizeof(b2ContactBeginTouchEvent) == 128, "Type b2ContactBeginTouchEvent has unexpected size.");
		static_assert(alignof(b2ContactBeginTouchEvent) == 4, "Type b2ContactBeginTouchEvent has unexpected alignment.");
		static_assert(offsetof(b2ContactBeginTouchEvent, shapeIdA) == 0, "Type b2ContactBeginTouchEvent has unexpected offset.");
		static_assert(offsetof(b2ContactBeginTouchEvent, shapeIdB) == 8, "Type b2ContactBeginTouchEvent has unexpected offset.");
		static_assert(offsetof(b2ContactBeginTouchEvent, manifold) == 16, "Type b2ContactBeginTouchEvent has unexpected offset.");
		static_assert(sizeof(b2DynamicTree) == 44, "Type b2DynamicTree has unexpected size.");
		static_assert(alignof(b2DynamicTree) == 4, "Type b2DynamicTree has unexpected alignment.");
		static_assert(offsetof(b2DynamicTree, nodes) == 0, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, root) == 4, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, nodeCount) == 8, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, nodeCapacity) == 12, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, freeList) == 16, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, proxyCount) == 20, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, leafIndices) == 24, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, leafBoxes) == 28, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, leafCenters) == 32, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, binIndices) == 36, "Type b2DynamicTree has unexpected offset.");
		static_assert(offsetof(b2DynamicTree, rebuildCapacity) == 40, "Type b2DynamicTree has unexpected offset.");
		static_assert(sizeof(b2FilterJointDef) == 24, "Type b2FilterJointDef has unexpected size.");
		static_assert(alignof(b2FilterJointDef) == 4, "Type b2FilterJointDef has unexpected alignment.");
		static_assert(offsetof(b2FilterJointDef, bodyIdA) == 0, "Type b2FilterJointDef has unexpected offset.");
		static_assert(offsetof(b2FilterJointDef, bodyIdB) == 8, "Type b2FilterJointDef has unexpected offset.");
		static_assert(offsetof(b2FilterJointDef, userData) == 16, "Type b2FilterJointDef has unexpected offset.");
		static_assert(offsetof(b2FilterJointDef, internalValue) == 20, "Type b2FilterJointDef has unexpected offset.");
		static_assert(sizeof(b2WheelJointDef) == 88, "Type b2WheelJointDef has unexpected size.");
		static_assert(alignof(b2WheelJointDef) == 4, "Type b2WheelJointDef has unexpected alignment.");
		static_assert(offsetof(b2WheelJointDef, bodyIdA) == 0, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, bodyIdB) == 8, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, localAnchorA) == 16, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, localAnchorB) == 24, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, localAxisA) == 32, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, enableSpring) == 40, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, hertz) == 44, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, dampingRatio) == 48, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, enableLimit) == 52, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, lowerTranslation) == 56, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, upperTranslation) == 60, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, enableMotor) == 64, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, maxMotorTorque) == 68, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, motorSpeed) == 72, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, collideConnected) == 76, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, userData) == 80, "Type b2WheelJointDef has unexpected offset.");
		static_assert(offsetof(b2WheelJointDef, internalValue) == 84, "Type b2WheelJointDef has unexpected offset.");
		static_assert(sizeof(b2ContactData) == 128, "Type b2ContactData has unexpected size.");
		static_assert(alignof(b2ContactData) == 4, "Type b2ContactData has unexpected alignment.");
		static_assert(offsetof(b2ContactData, shapeIdA) == 0, "Type b2ContactData has unexpected offset.");
		static_assert(offsetof(b2ContactData, shapeIdB) == 8, "Type b2ContactData has unexpected offset.");
		static_assert(offsetof(b2ContactData, manifold) == 16, "Type b2ContactData has unexpected offset.");
		static_assert(sizeof(b2SegmentDistanceResult) == 28, "Type b2SegmentDistanceResult has unexpected size.");
		static_assert(alignof(b2SegmentDistanceResult) == 4, "Type b2SegmentDistanceResult has unexpected alignment.");
		static_assert(offsetof(b2SegmentDistanceResult, closest1) == 0, "Type b2SegmentDistanceResult has unexpected offset.");
		static_assert(offsetof(b2SegmentDistanceResult, closest2) == 8, "Type b2SegmentDistanceResult has unexpected offset.");
		static_assert(offsetof(b2SegmentDistanceResult, fraction1) == 16, "Type b2SegmentDistanceResult has unexpected offset.");
		static_assert(offsetof(b2SegmentDistanceResult, fraction2) == 20, "Type b2SegmentDistanceResult has unexpected offset.");
		static_assert(offsetof(b2SegmentDistanceResult, distanceSquared) == 24, "Type b2SegmentDistanceResult has unexpected offset.");
		static_assert(sizeof(b2BodyId) == 8, "Type b2BodyId has unexpected size.");
		static_assert(alignof(b2BodyId) == 4, "Type b2BodyId has unexpected alignment.");
		static_assert(offsetof(b2BodyId, index1) == 0, "Type b2BodyId has unexpected offset.");
		static_assert(offsetof(b2BodyId, world0) == 4, "Type b2BodyId has unexpected offset.");
		static_assert(offsetof(b2BodyId, generation) == 6, "Type b2BodyId has unexpected offset.");
		static_assert(sizeof(b2WeldJointDef) == 64, "Type b2WeldJointDef has unexpected size.");
		static_assert(alignof(b2WeldJointDef) == 4, "Type b2WeldJointDef has unexpected alignment.");
		static_assert(offsetof(b2WeldJointDef, bodyIdA) == 0, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, bodyIdB) == 8, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, localAnchorA) == 16, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, localAnchorB) == 24, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, referenceAngle) == 32, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, linearHertz) == 36, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, angularHertz) == 40, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, linearDampingRatio) == 44, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, angularDampingRatio) == 48, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, collideConnected) == 52, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, userData) == 56, "Type b2WeldJointDef has unexpected offset.");
		static_assert(offsetof(b2WeldJointDef, internalValue) == 60, "Type b2WeldJointDef has unexpected offset.");
		static_assert(sizeof(b2Manifold) == 112, "Type b2Manifold has unexpected size.");
		static_assert(alignof(b2Manifold) == 4, "Type b2Manifold has unexpected alignment.");
		static_assert(offsetof(b2Manifold, normal) == 0, "Type b2Manifold has unexpected offset.");
		static_assert(offsetof(b2Manifold, rollingImpulse) == 8, "Type b2Manifold has unexpected offset.");
		static_assert(offsetof(b2Manifold, points) == 12, "Type b2Manifold has unexpected offset.");
		static_assert(offsetof(b2Manifold, pointCount) == 108, "Type b2Manifold has unexpected offset.");
		static_assert(sizeof(b2Plane) == 12, "Type b2Plane has unexpected size.");
		static_assert(alignof(b2Plane) == 4, "Type b2Plane has unexpected alignment.");
		static_assert(offsetof(b2Plane, normal) == 0, "Type b2Plane has unexpected offset.");
		static_assert(offsetof(b2Plane, offset) == 8, "Type b2Plane has unexpected offset.");
		static_assert(sizeof(b2ShapeCastInput) == 88, "Type b2ShapeCastInput has unexpected size.");
		static_assert(alignof(b2ShapeCastInput) == 4, "Type b2ShapeCastInput has unexpected alignment.");
		static_assert(offsetof(b2ShapeCastInput, proxy) == 0, "Type b2ShapeCastInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastInput, translation) == 72, "Type b2ShapeCastInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastInput, maxFraction) == 80, "Type b2ShapeCastInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastInput, canEncroach) == 84, "Type b2ShapeCastInput has unexpected offset.");
		static_assert(sizeof(b2SurfaceMaterial) == 24, "Type b2SurfaceMaterial has unexpected size.");
		static_assert(alignof(b2SurfaceMaterial) == 4, "Type b2SurfaceMaterial has unexpected alignment.");
		static_assert(offsetof(b2SurfaceMaterial, friction) == 0, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(offsetof(b2SurfaceMaterial, restitution) == 4, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(offsetof(b2SurfaceMaterial, rollingResistance) == 8, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(offsetof(b2SurfaceMaterial, tangentSpeed) == 12, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(offsetof(b2SurfaceMaterial, userMaterialId) == 16, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(offsetof(b2SurfaceMaterial, customColor) == 20, "Type b2SurfaceMaterial has unexpected offset.");
		static_assert(sizeof(b2RevoluteJointDef) == 92, "Type b2RevoluteJointDef has unexpected size.");
		static_assert(alignof(b2RevoluteJointDef) == 4, "Type b2RevoluteJointDef has unexpected alignment.");
		static_assert(offsetof(b2RevoluteJointDef, bodyIdA) == 0, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, bodyIdB) == 8, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, localAnchorA) == 16, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, localAnchorB) == 24, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, referenceAngle) == 32, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, targetAngle) == 36, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, enableSpring) == 40, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, hertz) == 44, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, dampingRatio) == 48, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, enableLimit) == 52, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, lowerAngle) == 56, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, upperAngle) == 60, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, enableMotor) == 64, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, maxMotorTorque) == 68, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, motorSpeed) == 72, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, drawSize) == 76, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, collideConnected) == 80, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, userData) == 84, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(offsetof(b2RevoluteJointDef, internalValue) == 88, "Type b2RevoluteJointDef has unexpected offset.");
		static_assert(sizeof(b2Capsule) == 20, "Type b2Capsule has unexpected size.");
		static_assert(alignof(b2Capsule) == 4, "Type b2Capsule has unexpected alignment.");
		static_assert(offsetof(b2Capsule, center1) == 0, "Type b2Capsule has unexpected offset.");
		static_assert(offsetof(b2Capsule, center2) == 8, "Type b2Capsule has unexpected offset.");
		static_assert(offsetof(b2Capsule, radius) == 16, "Type b2Capsule has unexpected offset.");
		static_assert(sizeof(b2Transform) == 16, "Type b2Transform has unexpected size.");
		static_assert(alignof(b2Transform) == 4, "Type b2Transform has unexpected alignment.");
		static_assert(offsetof(b2Transform, p) == 0, "Type b2Transform has unexpected offset.");
		static_assert(offsetof(b2Transform, q) == 8, "Type b2Transform has unexpected offset.");
		static_assert(sizeof(b2MouseJointDef) == 48, "Type b2MouseJointDef has unexpected size.");
		static_assert(alignof(b2MouseJointDef) == 4, "Type b2MouseJointDef has unexpected alignment.");
		static_assert(offsetof(b2MouseJointDef, bodyIdA) == 0, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, bodyIdB) == 8, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, target) == 16, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, hertz) == 24, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, dampingRatio) == 28, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, maxForce) == 32, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, collideConnected) == 36, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, userData) == 40, "Type b2MouseJointDef has unexpected offset.");
		static_assert(offsetof(b2MouseJointDef, internalValue) == 44, "Type b2MouseJointDef has unexpected offset.");
		static_assert(sizeof(b2Mat22) == 16, "Type b2Mat22 has unexpected size.");
		static_assert(alignof(b2Mat22) == 4, "Type b2Mat22 has unexpected alignment.");
		static_assert(offsetof(b2Mat22, cx) == 0, "Type b2Mat22 has unexpected offset.");
		static_assert(offsetof(b2Mat22, cy) == 8, "Type b2Mat22 has unexpected offset.");
		static_assert(sizeof(b2CollisionPlane) == 24, "Type b2CollisionPlane has unexpected size.");
		static_assert(alignof(b2CollisionPlane) == 4, "Type b2CollisionPlane has unexpected alignment.");
		static_assert(offsetof(b2CollisionPlane, plane) == 0, "Type b2CollisionPlane has unexpected offset.");
		static_assert(offsetof(b2CollisionPlane, pushLimit) == 12, "Type b2CollisionPlane has unexpected offset.");
		static_assert(offsetof(b2CollisionPlane, push) == 16, "Type b2CollisionPlane has unexpected offset.");
		static_assert(offsetof(b2CollisionPlane, clipVelocity) == 20, "Type b2CollisionPlane has unexpected offset.");
		static_assert(sizeof(b2Filter) == 20, "Type b2Filter has unexpected size.");
		static_assert(alignof(b2Filter) == 4, "Type b2Filter has unexpected alignment.");
		static_assert(offsetof(b2Filter, categoryBits) == 0, "Type b2Filter has unexpected offset.");
		static_assert(offsetof(b2Filter, maskBits) == 8, "Type b2Filter has unexpected offset.");
		static_assert(offsetof(b2Filter, groupIndex) == 16, "Type b2Filter has unexpected offset.");
		static_assert(sizeof(b2ShapeProxy) == 72, "Type b2ShapeProxy has unexpected size.");
		static_assert(alignof(b2ShapeProxy) == 4, "Type b2ShapeProxy has unexpected alignment.");
		static_assert(offsetof(b2ShapeProxy, points) == 0, "Type b2ShapeProxy has unexpected offset.");
		static_assert(offsetof(b2ShapeProxy, count) == 64, "Type b2ShapeProxy has unexpected offset.");
		static_assert(offsetof(b2ShapeProxy, radius) == 68, "Type b2ShapeProxy has unexpected offset.");
		static_assert(sizeof(b2ShapeDef) == 64, "Type b2ShapeDef has unexpected size.");
		static_assert(alignof(b2ShapeDef) == 4, "Type b2ShapeDef has unexpected alignment.");
		static_assert(offsetof(b2ShapeDef, userData) == 0, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, material) == 4, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, density) == 28, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, filter) == 32, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, isSensor) == 52, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, enableSensorEvents) == 53, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, enableContactEvents) == 54, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, enableHitEvents) == 55, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, enablePreSolveEvents) == 56, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, invokeContactCreation) == 57, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, updateBodyMass) == 58, "Type b2ShapeDef has unexpected offset.");
		static_assert(offsetof(b2ShapeDef, internalValue) == 60, "Type b2ShapeDef has unexpected offset.");
		static_assert(sizeof(b2ShapeId) == 8, "Type b2ShapeId has unexpected size.");
		static_assert(alignof(b2ShapeId) == 4, "Type b2ShapeId has unexpected alignment.");
		static_assert(offsetof(b2ShapeId, index1) == 0, "Type b2ShapeId has unexpected offset.");
		static_assert(offsetof(b2ShapeId, world0) == 4, "Type b2ShapeId has unexpected offset.");
		static_assert(offsetof(b2ShapeId, generation) == 6, "Type b2ShapeId has unexpected offset.");
		static_assert(sizeof(b2Polygon) == 144, "Type b2Polygon has unexpected size.");
		static_assert(alignof(b2Polygon) == 4, "Type b2Polygon has unexpected alignment.");
		static_assert(offsetof(b2Polygon, vertices) == 0, "Type b2Polygon has unexpected offset.");
		static_assert(offsetof(b2Polygon, normals) == 64, "Type b2Polygon has unexpected offset.");
		static_assert(offsetof(b2Polygon, centroid) == 128, "Type b2Polygon has unexpected offset.");
		static_assert(offsetof(b2Polygon, radius) == 136, "Type b2Polygon has unexpected offset.");
		static_assert(offsetof(b2Polygon, count) == 140, "Type b2Polygon has unexpected offset.");
		static_assert(sizeof(b2WorldDef) == 68, "Type b2WorldDef has unexpected size.");
		static_assert(alignof(b2WorldDef) == 4, "Type b2WorldDef has unexpected alignment.");
		static_assert(offsetof(b2WorldDef, gravity) == 0, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, restitutionThreshold) == 8, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, hitEventThreshold) == 12, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, contactHertz) == 16, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, contactDampingRatio) == 20, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, maxContactPushSpeed) == 24, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, maximumLinearSpeed) == 28, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, frictionCallback) == 32, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, restitutionCallback) == 36, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, enableSleep) == 40, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, enableContinuous) == 41, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, workerCount) == 44, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, enqueueTask) == 48, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, finishTask) == 52, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, userTaskContext) == 56, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, userData) == 60, "Type b2WorldDef has unexpected offset.");
		static_assert(offsetof(b2WorldDef, internalValue) == 64, "Type b2WorldDef has unexpected offset.");
		static_assert(sizeof(b2ManifoldPoint) == 48, "Type b2ManifoldPoint has unexpected size.");
		static_assert(alignof(b2ManifoldPoint) == 4, "Type b2ManifoldPoint has unexpected alignment.");
		static_assert(offsetof(b2ManifoldPoint, point) == 0, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, anchorA) == 8, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, anchorB) == 16, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, separation) == 24, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, normalImpulse) == 28, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, tangentImpulse) == 32, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, totalNormalImpulse) == 36, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, normalVelocity) == 40, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, id) == 44, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(offsetof(b2ManifoldPoint, persisted) == 46, "Type b2ManifoldPoint has unexpected offset.");
		static_assert(sizeof(b2ChainDef) == 48, "Type b2ChainDef has unexpected size.");
		static_assert(alignof(b2ChainDef) == 4, "Type b2ChainDef has unexpected alignment.");
		static_assert(offsetof(b2ChainDef, userData) == 0, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, points) == 4, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, count) == 8, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, materials) == 12, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, materialCount) == 16, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, filter) == 20, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, isLoop) == 40, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, enableSensorEvents) == 41, "Type b2ChainDef has unexpected offset.");
		static_assert(offsetof(b2ChainDef, internalValue) == 44, "Type b2ChainDef has unexpected offset.");
		static_assert(sizeof(b2ContactEvents) == 24, "Type b2ContactEvents has unexpected size.");
		static_assert(alignof(b2ContactEvents) == 4, "Type b2ContactEvents has unexpected alignment.");
		static_assert(offsetof(b2ContactEvents, beginEvents) == 0, "Type b2ContactEvents has unexpected offset.");
		static_assert(offsetof(b2ContactEvents, endEvents) == 4, "Type b2ContactEvents has unexpected offset.");
		static_assert(offsetof(b2ContactEvents, hitEvents) == 8, "Type b2ContactEvents has unexpected offset.");
		static_assert(offsetof(b2ContactEvents, beginCount) == 12, "Type b2ContactEvents has unexpected offset.");
		static_assert(offsetof(b2ContactEvents, endCount) == 16, "Type b2ContactEvents has unexpected offset.");
		static_assert(offsetof(b2ContactEvents, hitCount) == 20, "Type b2ContactEvents has unexpected offset.");
		static_assert(sizeof(b2BodyMoveEvent) == 32, "Type b2BodyMoveEvent has unexpected size.");
		static_assert(alignof(b2BodyMoveEvent) == 4, "Type b2BodyMoveEvent has unexpected alignment.");
		static_assert(offsetof(b2BodyMoveEvent, transform) == 0, "Type b2BodyMoveEvent has unexpected offset.");
		static_assert(offsetof(b2BodyMoveEvent, bodyId) == 16, "Type b2BodyMoveEvent has unexpected offset.");
		static_assert(offsetof(b2BodyMoveEvent, userData) == 24, "Type b2BodyMoveEvent has unexpected offset.");
		static_assert(offsetof(b2BodyMoveEvent, fellAsleep) == 28, "Type b2BodyMoveEvent has unexpected offset.");
		static_assert(sizeof(b2MassData) == 16, "Type b2MassData has unexpected size.");
		static_assert(alignof(b2MassData) == 4, "Type b2MassData has unexpected alignment.");
		static_assert(offsetof(b2MassData, mass) == 0, "Type b2MassData has unexpected offset.");
		static_assert(offsetof(b2MassData, center) == 4, "Type b2MassData has unexpected offset.");
		static_assert(offsetof(b2MassData, rotationalInertia) == 12, "Type b2MassData has unexpected offset.");
		static_assert(sizeof(b2SimplexVertex) == 36, "Type b2SimplexVertex has unexpected size.");
		static_assert(alignof(b2SimplexVertex) == 4, "Type b2SimplexVertex has unexpected alignment.");
		static_assert(offsetof(b2SimplexVertex, wA) == 0, "Type b2SimplexVertex has unexpected offset.");
		static_assert(offsetof(b2SimplexVertex, wB) == 8, "Type b2SimplexVertex has unexpected offset.");
		static_assert(offsetof(b2SimplexVertex, w) == 16, "Type b2SimplexVertex has unexpected offset.");
		static_assert(offsetof(b2SimplexVertex, a) == 24, "Type b2SimplexVertex has unexpected offset.");
		static_assert(offsetof(b2SimplexVertex, indexA) == 28, "Type b2SimplexVertex has unexpected offset.");
		static_assert(offsetof(b2SimplexVertex, indexB) == 32, "Type b2SimplexVertex has unexpected offset.");
		static_assert(sizeof(b2TOIOutput) == 8, "Type b2TOIOutput has unexpected size.");
		static_assert(alignof(b2TOIOutput) == 4, "Type b2TOIOutput has unexpected alignment.");
		static_assert(offsetof(b2TOIOutput, state) == 0, "Type b2TOIOutput has unexpected offset.");
		static_assert(offsetof(b2TOIOutput, fraction) == 4, "Type b2TOIOutput has unexpected offset.");
		static_assert(sizeof(b2CosSin) == 8, "Type b2CosSin has unexpected size.");
		static_assert(alignof(b2CosSin) == 4, "Type b2CosSin has unexpected alignment.");
		static_assert(offsetof(b2CosSin, cosine) == 0, "Type b2CosSin has unexpected offset.");
		static_assert(offsetof(b2CosSin, sine) == 4, "Type b2CosSin has unexpected offset.");
		static_assert(sizeof(b2WorldId) == 4, "Type b2WorldId has unexpected size.");
		static_assert(alignof(b2WorldId) == 2, "Type b2WorldId has unexpected alignment.");
		static_assert(offsetof(b2WorldId, index1) == 0, "Type b2WorldId has unexpected offset.");
		static_assert(offsetof(b2WorldId, generation) == 2, "Type b2WorldId has unexpected offset.");
		static_assert(sizeof(b2PrismaticJointDef) == 96, "Type b2PrismaticJointDef has unexpected size.");
		static_assert(alignof(b2PrismaticJointDef) == 4, "Type b2PrismaticJointDef has unexpected alignment.");
		static_assert(offsetof(b2PrismaticJointDef, bodyIdA) == 0, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, bodyIdB) == 8, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, localAnchorA) == 16, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, localAnchorB) == 24, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, localAxisA) == 32, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, referenceAngle) == 40, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, targetTranslation) == 44, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, enableSpring) == 48, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, hertz) == 52, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, dampingRatio) == 56, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, enableLimit) == 60, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, lowerTranslation) == 64, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, upperTranslation) == 68, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, enableMotor) == 72, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, maxMotorForce) == 76, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, motorSpeed) == 80, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, collideConnected) == 84, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, userData) == 88, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(offsetof(b2PrismaticJointDef, internalValue) == 92, "Type b2PrismaticJointDef has unexpected offset.");
		static_assert(sizeof(b2Rot) == 8, "Type b2Rot has unexpected size.");
		static_assert(alignof(b2Rot) == 4, "Type b2Rot has unexpected alignment.");
		static_assert(offsetof(b2Rot, c) == 0, "Type b2Rot has unexpected offset.");
		static_assert(offsetof(b2Rot, s) == 4, "Type b2Rot has unexpected offset.");
		static_assert(sizeof(b2SimplexCache) == 8, "Type b2SimplexCache has unexpected size.");
		static_assert(alignof(b2SimplexCache) == 2, "Type b2SimplexCache has unexpected alignment.");
		static_assert(offsetof(b2SimplexCache, count) == 0, "Type b2SimplexCache has unexpected offset.");
		static_assert(offsetof(b2SimplexCache, indexA) == 2, "Type b2SimplexCache has unexpected offset.");
		static_assert(offsetof(b2SimplexCache, indexB) == 5, "Type b2SimplexCache has unexpected offset.");
		static_assert(sizeof(b2SensorBeginTouchEvent) == 16, "Type b2SensorBeginTouchEvent has unexpected size.");
		static_assert(alignof(b2SensorBeginTouchEvent) == 4, "Type b2SensorBeginTouchEvent has unexpected alignment.");
		static_assert(offsetof(b2SensorBeginTouchEvent, sensorShapeId) == 0, "Type b2SensorBeginTouchEvent has unexpected offset.");
		static_assert(offsetof(b2SensorBeginTouchEvent, visitorShapeId) == 8, "Type b2SensorBeginTouchEvent has unexpected offset.");
		static_assert(sizeof(b2Hull) == 68, "Type b2Hull has unexpected size.");
		static_assert(alignof(b2Hull) == 4, "Type b2Hull has unexpected alignment.");
		static_assert(offsetof(b2Hull, points) == 0, "Type b2Hull has unexpected offset.");
		static_assert(offsetof(b2Hull, count) == 64, "Type b2Hull has unexpected offset.");
		static_assert(sizeof(b2ChainId) == 8, "Type b2ChainId has unexpected size.");
		static_assert(alignof(b2ChainId) == 4, "Type b2ChainId has unexpected alignment.");
		static_assert(offsetof(b2ChainId, index1) == 0, "Type b2ChainId has unexpected offset.");
		static_assert(offsetof(b2ChainId, world0) == 4, "Type b2ChainId has unexpected offset.");
		static_assert(offsetof(b2ChainId, generation) == 6, "Type b2ChainId has unexpected offset.");
		static_assert(sizeof(b2RayCastInput) == 20, "Type b2RayCastInput has unexpected size.");
		static_assert(alignof(b2RayCastInput) == 4, "Type b2RayCastInput has unexpected alignment.");
		static_assert(offsetof(b2RayCastInput, origin) == 0, "Type b2RayCastInput has unexpected offset.");
		static_assert(offsetof(b2RayCastInput, translation) == 8, "Type b2RayCastInput has unexpected offset.");
		static_assert(offsetof(b2RayCastInput, maxFraction) == 16, "Type b2RayCastInput has unexpected offset.");
		static_assert(sizeof(b2DistanceOutput) == 36, "Type b2DistanceOutput has unexpected size.");
		static_assert(alignof(b2DistanceOutput) == 4, "Type b2DistanceOutput has unexpected alignment.");
		static_assert(offsetof(b2DistanceOutput, pointA) == 0, "Type b2DistanceOutput has unexpected offset.");
		static_assert(offsetof(b2DistanceOutput, pointB) == 8, "Type b2DistanceOutput has unexpected offset.");
		static_assert(offsetof(b2DistanceOutput, normal) == 16, "Type b2DistanceOutput has unexpected offset.");
		static_assert(offsetof(b2DistanceOutput, distance) == 24, "Type b2DistanceOutput has unexpected offset.");
		static_assert(offsetof(b2DistanceOutput, iterations) == 28, "Type b2DistanceOutput has unexpected offset.");
		static_assert(offsetof(b2DistanceOutput, simplexCount) == 32, "Type b2DistanceOutput has unexpected offset.");
		static_assert(sizeof(b2TreeStats) == 8, "Type b2TreeStats has unexpected size.");
		static_assert(alignof(b2TreeStats) == 4, "Type b2TreeStats has unexpected alignment.");
		static_assert(offsetof(b2TreeStats, nodeVisits) == 0, "Type b2TreeStats has unexpected offset.");
		static_assert(offsetof(b2TreeStats, leafVisits) == 4, "Type b2TreeStats has unexpected offset.");
		static_assert(sizeof(b2Simplex) == 112, "Type b2Simplex has unexpected size.");
		static_assert(alignof(b2Simplex) == 4, "Type b2Simplex has unexpected alignment.");
		static_assert(offsetof(b2Simplex, v1) == 0, "Type b2Simplex has unexpected offset.");
		static_assert(offsetof(b2Simplex, v2) == 36, "Type b2Simplex has unexpected offset.");
		static_assert(offsetof(b2Simplex, v3) == 72, "Type b2Simplex has unexpected offset.");
		static_assert(offsetof(b2Simplex, count) == 108, "Type b2Simplex has unexpected offset.");
		static_assert(sizeof(b2ContactHitEvent) == 36, "Type b2ContactHitEvent has unexpected size.");
		static_assert(alignof(b2ContactHitEvent) == 4, "Type b2ContactHitEvent has unexpected alignment.");
		static_assert(offsetof(b2ContactHitEvent, shapeIdA) == 0, "Type b2ContactHitEvent has unexpected offset.");
		static_assert(offsetof(b2ContactHitEvent, shapeIdB) == 8, "Type b2ContactHitEvent has unexpected offset.");
		static_assert(offsetof(b2ContactHitEvent, point) == 16, "Type b2ContactHitEvent has unexpected offset.");
		static_assert(offsetof(b2ContactHitEvent, normal) == 24, "Type b2ContactHitEvent has unexpected offset.");
		static_assert(offsetof(b2ContactHitEvent, approachSpeed) == 32, "Type b2ContactHitEvent has unexpected offset.");
		static_assert(sizeof(b2Vec2) == 8, "Type b2Vec2 has unexpected size.");
		static_assert(alignof(b2Vec2) == 4, "Type b2Vec2 has unexpected alignment.");
		static_assert(offsetof(b2Vec2, x) == 0, "Type b2Vec2 has unexpected offset.");
		static_assert(offsetof(b2Vec2, y) == 4, "Type b2Vec2 has unexpected offset.");
		static_assert(sizeof(b2AABB) == 16, "Type b2AABB has unexpected size.");
		static_assert(alignof(b2AABB) == 4, "Type b2AABB has unexpected alignment.");
		static_assert(offsetof(b2AABB, lowerBound) == 0, "Type b2AABB has unexpected offset.");
		static_assert(offsetof(b2AABB, upperBound) == 8, "Type b2AABB has unexpected offset.");
		static_assert(sizeof(b2PlaneResult) == 24, "Type b2PlaneResult has unexpected size.");
		static_assert(alignof(b2PlaneResult) == 4, "Type b2PlaneResult has unexpected alignment.");
		static_assert(offsetof(b2PlaneResult, plane) == 0, "Type b2PlaneResult has unexpected offset.");
		static_assert(offsetof(b2PlaneResult, point) == 12, "Type b2PlaneResult has unexpected offset.");
		static_assert(offsetof(b2PlaneResult, hit) == 20, "Type b2PlaneResult has unexpected offset.");
		static_assert(sizeof(b2DistanceInput) == 180, "Type b2DistanceInput has unexpected size.");
		static_assert(alignof(b2DistanceInput) == 4, "Type b2DistanceInput has unexpected alignment.");
		static_assert(offsetof(b2DistanceInput, proxyA) == 0, "Type b2DistanceInput has unexpected offset.");
		static_assert(offsetof(b2DistanceInput, proxyB) == 72, "Type b2DistanceInput has unexpected offset.");
		static_assert(offsetof(b2DistanceInput, transformA) == 144, "Type b2DistanceInput has unexpected offset.");
		static_assert(offsetof(b2DistanceInput, transformB) == 160, "Type b2DistanceInput has unexpected offset.");
		static_assert(offsetof(b2DistanceInput, useRadii) == 176, "Type b2DistanceInput has unexpected offset.");
		static_assert(sizeof(b2ShapeCastPairInput) == 192, "Type b2ShapeCastPairInput has unexpected size.");
		static_assert(alignof(b2ShapeCastPairInput) == 4, "Type b2ShapeCastPairInput has unexpected alignment.");
		static_assert(offsetof(b2ShapeCastPairInput, proxyA) == 0, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, proxyB) == 72, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, transformA) == 144, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, transformB) == 160, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, translationB) == 176, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, maxFraction) == 184, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(offsetof(b2ShapeCastPairInput, canEncroach) == 188, "Type b2ShapeCastPairInput has unexpected offset.");
		static_assert(sizeof(b2BodyEvents) == 8, "Type b2BodyEvents has unexpected size.");
		static_assert(alignof(b2BodyEvents) == 4, "Type b2BodyEvents has unexpected alignment.");
		static_assert(offsetof(b2BodyEvents, moveEvents) == 0, "Type b2BodyEvents has unexpected offset.");
		static_assert(offsetof(b2BodyEvents, moveCount) == 4, "Type b2BodyEvents has unexpected offset.");
		static_assert(sizeof(b2Version) == 12, "Type b2Version has unexpected size.");
		static_assert(alignof(b2Version) == 4, "Type b2Version has unexpected alignment.");
		static_assert(offsetof(b2Version, major) == 0, "Type b2Version has unexpected offset.");
		static_assert(offsetof(b2Version, minor) == 4, "Type b2Version has unexpected offset.");
		static_assert(offsetof(b2Version, revision) == 8, "Type b2Version has unexpected offset.");
		static_assert(sizeof(b2TOIInput) == 228, "Type b2TOIInput has unexpected size.");
		static_assert(alignof(b2TOIInput) == 4, "Type b2TOIInput has unexpected alignment.");
		static_assert(offsetof(b2TOIInput, proxyA) == 0, "Type b2TOIInput has unexpected offset.");
		static_assert(offsetof(b2TOIInput, proxyB) == 72, "Type b2TOIInput has unexpected offset.");
		static_assert(offsetof(b2TOIInput, sweepA) == 144, "Type b2TOIInput has unexpected offset.");
		static_assert(offsetof(b2TOIInput, sweepB) == 184, "Type b2TOIInput has unexpected offset.");
		static_assert(offsetof(b2TOIInput, maxFraction) == 224, "Type b2TOIInput has unexpected offset.");
		static_assert(sizeof(b2BodyDef) == 68, "Type b2BodyDef has unexpected size.");
		static_assert(alignof(b2BodyDef) == 4, "Type b2BodyDef has unexpected alignment.");
		static_assert(offsetof(b2BodyDef, type) == 0, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, position) == 4, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, rotation) == 12, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, linearVelocity) == 20, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, angularVelocity) == 28, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, linearDamping) == 32, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, angularDamping) == 36, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, gravityScale) == 40, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, sleepThreshold) == 44, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, name) == 48, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, userData) == 52, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, enableSleep) == 56, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, isAwake) == 57, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, fixedRotation) == 58, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, isBullet) == 59, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, isEnabled) == 60, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, allowFastRotation) == 61, "Type b2BodyDef has unexpected offset.");
		static_assert(offsetof(b2BodyDef, internalValue) == 64, "Type b2BodyDef has unexpected offset.");
		static_assert(sizeof(b2DebugDraw) == 72, "Type b2DebugDraw has unexpected size.");
		static_assert(alignof(b2DebugDraw) == 4, "Type b2DebugDraw has unexpected alignment.");
		static_assert(offsetof(b2DebugDraw, DrawPolygonFcn) == 0, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawSolidPolygonFcn) == 4, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawCircleFcn) == 8, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawSolidCircleFcn) == 12, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawSolidCapsuleFcn) == 16, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawSegmentFcn) == 20, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawTransformFcn) == 24, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawPointFcn) == 28, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, DrawStringFcn) == 32, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawingBounds) == 36, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, useDrawingBounds) == 52, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawShapes) == 53, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawJoints) == 54, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawJointExtras) == 55, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawBounds) == 56, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawMass) == 57, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawBodyNames) == 58, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawContacts) == 59, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawGraphColors) == 60, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawContactNormals) == 61, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawContactImpulses) == 62, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawContactFeatures) == 63, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawFrictionImpulses) == 64, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, drawIslands) == 65, "Type b2DebugDraw has unexpected offset.");
		static_assert(offsetof(b2DebugDraw, context) == 68, "Type b2DebugDraw has unexpected offset.");
		static_assert(sizeof(b2DistanceJointDef) == 84, "Type b2DistanceJointDef has unexpected size.");
		static_assert(alignof(b2DistanceJointDef) == 4, "Type b2DistanceJointDef has unexpected alignment.");
		static_assert(offsetof(b2DistanceJointDef, bodyIdA) == 0, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, bodyIdB) == 8, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, localAnchorA) == 16, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, localAnchorB) == 24, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, length) == 32, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, enableSpring) == 36, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, hertz) == 40, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, dampingRatio) == 44, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, enableLimit) == 48, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, minLength) == 52, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, maxLength) == 56, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, enableMotor) == 60, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, maxMotorForce) == 64, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, motorSpeed) == 68, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, collideConnected) == 72, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, userData) == 76, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(offsetof(b2DistanceJointDef, internalValue) == 80, "Type b2DistanceJointDef has unexpected offset.");
		static_assert(sizeof(b2Circle) == 12, "Type b2Circle has unexpected size.");
		static_assert(alignof(b2Circle) == 4, "Type b2Circle has unexpected alignment.");
		static_assert(offsetof(b2Circle, center) == 0, "Type b2Circle has unexpected offset.");
		static_assert(offsetof(b2Circle, radius) == 8, "Type b2Circle has unexpected offset.");
		static_assert(sizeof(b2QueryFilter) == 16, "Type b2QueryFilter has unexpected size.");
		static_assert(alignof(b2QueryFilter) == 4, "Type b2QueryFilter has unexpected alignment.");
		static_assert(offsetof(b2QueryFilter, categoryBits) == 0, "Type b2QueryFilter has unexpected offset.");
		static_assert(offsetof(b2QueryFilter, maskBits) == 8, "Type b2QueryFilter has unexpected offset.");
		static_assert(sizeof(b2ExplosionDef) == 28, "Type b2ExplosionDef has unexpected size.");
		static_assert(alignof(b2ExplosionDef) == 4, "Type b2ExplosionDef has unexpected alignment.");
		static_assert(offsetof(b2ExplosionDef, maskBits) == 0, "Type b2ExplosionDef has unexpected offset.");
		static_assert(offsetof(b2ExplosionDef, position) == 8, "Type b2ExplosionDef has unexpected offset.");
		static_assert(offsetof(b2ExplosionDef, radius) == 16, "Type b2ExplosionDef has unexpected offset.");
		static_assert(offsetof(b2ExplosionDef, falloff) == 20, "Type b2ExplosionDef has unexpected offset.");
		static_assert(offsetof(b2ExplosionDef, impulsePerLength) == 24, "Type b2ExplosionDef has unexpected offset.");
		#endif // defined(__i386__) && defined(__ANDROID__)
		

		static_assert(IS_UNSIGNED_TYPE(const uint8_t), "Type const uint8_t is expected unsigned.");
		static_assert(IS_UNSIGNED_TYPE(unsigned int), "Type unsigned int is expected unsigned.");
		static_assert(IS_UNSIGNED_TYPE(uint16_t), "Type uint16_t is expected unsigned.");
		static_assert(IS_UNSIGNED_TYPE(bool), "Type bool is expected unsigned.");
		static_assert(IS_UNSIGNED_TYPE(uint64_t), "Type uint64_t is expected unsigned.");
		static_assert(IS_UNSIGNED_TYPE(uint32_t), "Type uint32_t is expected unsigned.");
		static_assert(IS_UNSIGNED_TYPE(uint8_t), "Type uint8_t is expected unsigned.");
		static_assert(IS_SIGNED_TYPE(float), "Type float is expected signed.");
		static_assert(IS_SIGNED_TYPE(int), "Type int is expected signed.");
		static_assert(IS_SIGNED_TYPE(int32_t), "Type int32_t is expected signed.");
*/
    public static void init() {
    }

    private final static HashMap<Integer, CTypeInfo> ffiIdMap = new HashMap<>();

    public static CTypeInfo getCTypeInfo(int id) {
        return ffiIdMap.get(id);
    }

    /*JNI
static native_type* getNativeType(int id) {
native_type* nativeType = (native_type*)malloc(sizeof(native_type));
switch(id) {
	case -2:
		nativeType->type = VOID_TYPE;
		return nativeType;
	case -1:
		nativeType->type = POINTER_TYPE;
		return nativeType;
	case 0:
		GET_NATIVE_TYPE(bool, nativeType);
		return nativeType;
	case 1:
		GET_NATIVE_TYPE(const char, nativeType);
		return nativeType;
	case 2:
		GET_NATIVE_TYPE(const uint8_t, nativeType);
		return nativeType;
	case 3:
		GET_NATIVE_TYPE(float, nativeType);
		return nativeType;
	case 4:
		GET_NATIVE_TYPE(int, nativeType);
		return nativeType;
	case 5:
		GET_NATIVE_TYPE(int32_t, nativeType);
		return nativeType;
	case 6:
		GET_NATIVE_TYPE(uint16_t, nativeType);
		return nativeType;
	case 7:
		GET_NATIVE_TYPE(uint32_t, nativeType);
		return nativeType;
	case 8:
		GET_NATIVE_TYPE(uint64_t, nativeType);
		return nativeType;
	case 9:
		GET_NATIVE_TYPE(uint8_t, nativeType);
		return nativeType;
	case 10:
		GET_NATIVE_TYPE(unsigned int, nativeType);
		return nativeType;
	case 11:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 2;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 2);
		nativeType->fields[0] = getNativeType(77);
		nativeType->fields[1] = getNativeType(77);
		return nativeType;
	case 12:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 18;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 18);
		nativeType->fields[0] = getNativeType(10);
		nativeType->fields[1] = getNativeType(77);
		nativeType->fields[2] = getNativeType(56);
		nativeType->fields[3] = getNativeType(77);
		nativeType->fields[4] = getNativeType(3);
		nativeType->fields[5] = getNativeType(3);
		nativeType->fields[6] = getNativeType(3);
		nativeType->fields[7] = getNativeType(3);
		nativeType->fields[8] = getNativeType(3);
		nativeType->fields[9] = getNativeType(-1);
		nativeType->fields[10] = getNativeType(-1);
		nativeType->fields[11] = getNativeType(0);
		nativeType->fields[12] = getNativeType(0);
		nativeType->fields[13] = getNativeType(0);
		nativeType->fields[14] = getNativeType(0);
		nativeType->fields[15] = getNativeType(0);
		nativeType->fields[16] = getNativeType(0);
		nativeType->fields[17] = getNativeType(4);
		return nativeType;
	case 13:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 2;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 2);
		nativeType->fields[0] = getNativeType(-1);
		nativeType->fields[1] = getNativeType(4);
		return nativeType;
	case 14:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 3;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 3);
		nativeType->fields[0] = getNativeType(5);
		nativeType->fields[1] = getNativeType(6);
		nativeType->fields[2] = getNativeType(6);
		return nativeType;
	case 15:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 4;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 4);
		nativeType->fields[0] = getNativeType(74);
		nativeType->fields[1] = getNativeType(14);
		nativeType->fields[2] = getNativeType(-1);
		nativeType->fields[3] = getNativeType(0);
		return nativeType;
	case 16:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 3;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 3);
		nativeType->fields[0] = getNativeType(77);
		nativeType->fields[1] = getNativeType(77);
		nativeType->fields[2] = getNativeType(3);
		return nativeType;
	case 17:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 5;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 5);
		nativeType->fields[0] = getNativeType(77);
		nativeType->fields[1] = getNativeType(77);
		nativeType->fields[2] = getNativeType(3);
		nativeType->fields[3] = getNativeType(4);
		nativeType->fields[4] = getNativeType(0);
		return nativeType;
	case 18:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 9;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 9);
		nativeType->fields[0] = getNativeType(-1);
		nativeType->fields[1] = getNativeType(-1);
		nativeType->fields[2] = getNativeType(4);
		nativeType->fields[3] = getNativeType(-1);
		nativeType->fields[4] = getNativeType(4);
		nativeType->fields[5] = getNativeType(36);
		nativeType->fields[6] = getNativeType(0);
		nativeType->fields[7] = getNativeType(0);
		nativeType->fields[8] = getNativeType(4);
		return nativeType;
	case 19:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 3;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 3);
		nativeType->fields[0] = getNativeType(5);
		nativeType->fields[1] = getNativeType(6);
		nativeType->fields[2] = getNativeType(6);
		return nativeType;
	case 20:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 4;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 4);
		nativeType->fields[0] = getNativeType(77);
		nativeType->fields[1] = getNativeType(57);
		nativeType->fields[2] = getNativeType(77);
		nativeType->fields[3] = getNativeType(4);
		return nativeType;
	case 21:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 2;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 2);
		nativeType->fields[0] = getNativeType(77);
		nativeType->fields[1] = getNativeType(3);
		return nativeType;
	case 22:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 4;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 4);
		nativeType->fields[0] = getNativeType(46);
		nativeType->fields[1] = getNativeType(3);
		nativeType->fields[2] = getNativeType(3);
		nativeType->fields[3] = getNativeType(0);
		return nativeType;
	case 23:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 3;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 3);
		nativeType->fields[0] = getNativeType(65);
		nativeType->fields[1] = getNativeType(65);
		nativeType->fields[2] = getNativeType(40);
		return nativeType;
	case 24:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 3;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 3);
		nativeType->fields[0] = getNativeType(65);
		nativeType->fields[1] = getNativeType(65);
		nativeType->fields[2] = getNativeType(40);
		return nativeType;
	case 25:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 2;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 2);
		nativeType->fields[0] = getNativeType(65);
		nativeType->fields[1] = getNativeType(65);
		return nativeType;
	case 26:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 6;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 6);
		nativeType->fields[0] = getNativeType(-1);
		nativeType->fields[1] = getNativeType(-1);
		nativeType->fields[2] = getNativeType(-1);
		nativeType->fields[3] = getNativeType(4);
		nativeType->fields[4] = getNativeType(4);
		nativeType->fields[5] = getNativeType(4);
		return nativeType;
	case 27:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 5;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 5);
		nativeType->fields[0] = getNativeType(65);
		nativeType->fields[1] = getNativeType(65);
		nativeType->fields[2] = getNativeType(77);
		nativeType->fields[3] = getNativeType(77);
		nativeType->fields[4] = getNativeType(3);
		return nativeType;
	case 28:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 2;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 2);
		nativeType->fields[0] = getNativeType(3);
		nativeType->fields[1] = getNativeType(3);
		return nativeType;
	case 29:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 22;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 22);
		nativeType->fields[0] = getNativeType(4);
		nativeType->fields[1] = getNativeType(4);
		nativeType->fields[2] = getNativeType(4);
		nativeType->fields[3] = getNativeType(4);
		nativeType->fields[4] = getNativeType(4);
		nativeType->fields[5] = getNativeType(4);
		nativeType->fields[6] = getNativeType(4);
		nativeType->fields[7] = getNativeType(4);
		nativeType->fields[8] = getNativeType(4);
		nativeType->fields[9] = getNativeType(4);
		nativeType->fields[10] = getNativeType(4);
		nativeType->fields[11] = getNativeType(4);
		nativeType->fields[12] = getNativeType(4);
		nativeType->fields[13] = getNativeType(4);
		nativeType->fields[14] = getNativeType(4);
		nativeType->fields[15] = getNativeType(4);
		nativeType->fields[16] = getNativeType(4);
		nativeType->fields[17] = getNativeType(4);
		nativeType->fields[18] = getNativeType(4);
		nativeType->fields[19] = getNativeType(4);
		nativeType->fields[20] = getNativeType(4);
		nativeType->fields[21] = getNativeType(4);
		return nativeType;
	case 30:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 25;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 25);
		nativeType->fields[0] = getNativeType(-1);
		nativeType->fields[1] = getNativeType(-1);
		nativeType->fields[2] = getNativeType(-1);
		nativeType->fields[3] = getNativeType(-1);
		nativeType->fields[4] = getNativeType(-1);
		nativeType->fields[5] = getNativeType(-1);
		nativeType->fields[6] = getNativeType(-1);
		nativeType->fields[7] = getNativeType(-1);
		nativeType->fields[8] = getNativeType(-1);
		nativeType->fields[9] = getNativeType(11);
		nativeType->fields[10] = getNativeType(0);
		nativeType->fields[11] = getNativeType(0);
		nativeType->fields[12] = getNativeType(0);
		nativeType->fields[13] = getNativeType(0);
		nativeType->fields[14] = getNativeType(0);
		nativeType->fields[15] = getNativeType(0);
		nativeType->fields[16] = getNativeType(0);
		nativeType->fields[17] = getNativeType(0);
		nativeType->fields[18] = getNativeType(0);
		nativeType->fields[19] = getNativeType(0);
		nativeType->fields[20] = getNativeType(0);
		nativeType->fields[21] = getNativeType(0);
		nativeType->fields[22] = getNativeType(0);
		nativeType->fields[23] = getNativeType(0);
		nativeType->fields[24] = getNativeType(-1);
		return nativeType;
	case 31:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 5;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 5);
		nativeType->fields[0] = getNativeType(66);
		nativeType->fields[1] = getNativeType(66);
		nativeType->fields[2] = getNativeType(74);
		nativeType->fields[3] = getNativeType(74);
		nativeType->fields[4] = getNativeType(0);
		return nativeType;
	case 32:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 17;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 17);
		nativeType->fields[0] = getNativeType(14);
		nativeType->fields[1] = getNativeType(14);
		nativeType->fields[2] = getNativeType(77);
		nativeType->fields[3] = getNativeType(77);
		nativeType->fields[4] = getNativeType(3);
		nativeType->fields[5] = getNativeType(0);
		nativeType->fields[6] = getNativeType(3);
		nativeType->fields[7] = getNativeType(3);
		nativeType->fields[8] = getNativeType(0);
		nativeType->fields[9] = getNativeType(3);
		nativeType->fields[10] = getNativeType(3);
		nativeType->fields[11] = getNativeType(0);
		nativeType->fields[12] = getNativeType(3);
		nativeType->fields[13] = getNativeType(3);
		nativeType->fields[14] = getNativeType(0);
		nativeType->fields[15] = getNativeType(-1);
		nativeType->fields[16] = getNativeType(4);
		return nativeType;
	case 33:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 6;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 6);
		nativeType->fields[0] = getNativeType(77);
		nativeType->fields[1] = getNativeType(77);
		nativeType->fields[2] = getNativeType(77);
		nativeType->fields[3] = getNativeType(3);
		nativeType->fields[4] = getNativeType(4);
		nativeType->fields[5] = getNativeType(4);
		return nativeType;
	case 34:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 11;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 11);
		nativeType->fields[0] = getNativeType(-1);
		nativeType->fields[1] = getNativeType(4);
		nativeType->fields[2] = getNativeType(4);
		nativeType->fields[3] = getNativeType(4);
		nativeType->fields[4] = getNativeType(4);
		nativeType->fields[5] = getNativeType(4);
		nativeType->fields[6] = getNativeType(-1);
		nativeType->fields[7] = getNativeType(-1);
		nativeType->fields[8] = getNativeType(-1);
		nativeType->fields[9] = getNativeType(-1);
		nativeType->fields[10] = getNativeType(4);
		return nativeType;
	case 35:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 5;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 5);
		nativeType->fields[0] = getNativeType(8);
		nativeType->fields[1] = getNativeType(77);
		nativeType->fields[2] = getNativeType(3);
		nativeType->fields[3] = getNativeType(3);
		nativeType->fields[4] = getNativeType(3);
		return nativeType;
	case 36:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 3;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 3);
		nativeType->fields[0] = getNativeType(8);
		nativeType->fields[1] = getNativeType(8);
		nativeType->fields[2] = getNativeType(4);
		return nativeType;
	case 37:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 4;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 4);
		nativeType->fields[0] = getNativeType(14);
		nativeType->fields[1] = getNativeType(14);
		nativeType->fields[2] = getNativeType(-1);
		nativeType->fields[3] = getNativeType(4);
		return nativeType;
	case 38:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 9;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 9);
		nativeType->fields[0] = getNativeType(77);
		nativeType->fields[1] = getNativeType(77);
		nativeType->fields[2] = getNativeType(77);
		nativeType->fields[3] = getNativeType(77);
		nativeType->fields[4] = getNativeType(77);
		nativeType->fields[5] = getNativeType(77);
		nativeType->fields[6] = getNativeType(77);
		nativeType->fields[7] = getNativeType(77);
		nativeType->fields[8] = getNativeType(4);
		return nativeType;
	case 39:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 3;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 3);
		nativeType->fields[0] = getNativeType(5);
		nativeType->fields[1] = getNativeType(6);
		nativeType->fields[2] = getNativeType(6);
		return nativeType;
	case 40:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 5;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 5);
		nativeType->fields[0] = getNativeType(77);
		nativeType->fields[1] = getNativeType(3);
		nativeType->fields[2] = getNativeType(41);
		nativeType->fields[3] = getNativeType(41);
		nativeType->fields[4] = getNativeType(4);
		return nativeType;
	case 41:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 10;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 10);
		nativeType->fields[0] = getNativeType(77);
		nativeType->fields[1] = getNativeType(77);
		nativeType->fields[2] = getNativeType(77);
		nativeType->fields[3] = getNativeType(3);
		nativeType->fields[4] = getNativeType(3);
		nativeType->fields[5] = getNativeType(3);
		nativeType->fields[6] = getNativeType(3);
		nativeType->fields[7] = getNativeType(3);
		nativeType->fields[8] = getNativeType(6);
		nativeType->fields[9] = getNativeType(0);
		return nativeType;
	case 42:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 3;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 3);
		nativeType->fields[0] = getNativeType(3);
		nativeType->fields[1] = getNativeType(77);
		nativeType->fields[2] = getNativeType(3);
		return nativeType;
	case 43:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 2;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 2);
		nativeType->fields[0] = getNativeType(77);
		nativeType->fields[1] = getNativeType(77);
		return nativeType;
	case 44:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 10;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 10);
		nativeType->fields[0] = getNativeType(14);
		nativeType->fields[1] = getNativeType(14);
		nativeType->fields[2] = getNativeType(77);
		nativeType->fields[3] = getNativeType(3);
		nativeType->fields[4] = getNativeType(3);
		nativeType->fields[5] = getNativeType(3);
		nativeType->fields[6] = getNativeType(3);
		nativeType->fields[7] = getNativeType(0);
		nativeType->fields[8] = getNativeType(-1);
		nativeType->fields[9] = getNativeType(4);
		return nativeType;
	case 45:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 9;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 9);
		nativeType->fields[0] = getNativeType(14);
		nativeType->fields[1] = getNativeType(14);
		nativeType->fields[2] = getNativeType(77);
		nativeType->fields[3] = getNativeType(3);
		nativeType->fields[4] = getNativeType(3);
		nativeType->fields[5] = getNativeType(3);
		nativeType->fields[6] = getNativeType(0);
		nativeType->fields[7] = getNativeType(-1);
		nativeType->fields[8] = getNativeType(4);
		return nativeType;
	case 46:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 2;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 2);
		nativeType->fields[0] = getNativeType(77);
		nativeType->fields[1] = getNativeType(3);
		return nativeType;
	case 47:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 3;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 3);
		nativeType->fields[0] = getNativeType(46);
		nativeType->fields[1] = getNativeType(77);
		nativeType->fields[2] = getNativeType(0);
		return nativeType;
	case 48:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 2;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 2);
		nativeType->fields[0] = getNativeType(77);
		nativeType->fields[1] = getNativeType(4);
		return nativeType;
	case 49:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 19;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 19);
		nativeType->fields[0] = getNativeType(77);
		nativeType->fields[1] = getNativeType(77);
		nativeType->fields[2] = getNativeType(77);
		nativeType->fields[3] = getNativeType(77);
		nativeType->fields[4] = getNativeType(77);
		nativeType->fields[5] = getNativeType(77);
		nativeType->fields[6] = getNativeType(77);
		nativeType->fields[7] = getNativeType(77);
		nativeType->fields[8] = getNativeType(77);
		nativeType->fields[9] = getNativeType(77);
		nativeType->fields[10] = getNativeType(77);
		nativeType->fields[11] = getNativeType(77);
		nativeType->fields[12] = getNativeType(77);
		nativeType->fields[13] = getNativeType(77);
		nativeType->fields[14] = getNativeType(77);
		nativeType->fields[15] = getNativeType(77);
		nativeType->fields[16] = getNativeType(77);
		nativeType->fields[17] = getNativeType(3);
		nativeType->fields[18] = getNativeType(4);
		return nativeType;
	case 50:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 19;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 19);
		nativeType->fields[0] = getNativeType(14);
		nativeType->fields[1] = getNativeType(14);
		nativeType->fields[2] = getNativeType(77);
		nativeType->fields[3] = getNativeType(77);
		nativeType->fields[4] = getNativeType(77);
		nativeType->fields[5] = getNativeType(3);
		nativeType->fields[6] = getNativeType(3);
		nativeType->fields[7] = getNativeType(0);
		nativeType->fields[8] = getNativeType(3);
		nativeType->fields[9] = getNativeType(3);
		nativeType->fields[10] = getNativeType(0);
		nativeType->fields[11] = getNativeType(3);
		nativeType->fields[12] = getNativeType(3);
		nativeType->fields[13] = getNativeType(0);
		nativeType->fields[14] = getNativeType(3);
		nativeType->fields[15] = getNativeType(3);
		nativeType->fields[16] = getNativeType(0);
		nativeType->fields[17] = getNativeType(-1);
		nativeType->fields[18] = getNativeType(4);
		return nativeType;
	case 51:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 22;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 22);
		nativeType->fields[0] = getNativeType(3);
		nativeType->fields[1] = getNativeType(3);
		nativeType->fields[2] = getNativeType(3);
		nativeType->fields[3] = getNativeType(3);
		nativeType->fields[4] = getNativeType(3);
		nativeType->fields[5] = getNativeType(3);
		nativeType->fields[6] = getNativeType(3);
		nativeType->fields[7] = getNativeType(3);
		nativeType->fields[8] = getNativeType(3);
		nativeType->fields[9] = getNativeType(3);
		nativeType->fields[10] = getNativeType(3);
		nativeType->fields[11] = getNativeType(3);
		nativeType->fields[12] = getNativeType(3);
		nativeType->fields[13] = getNativeType(3);
		nativeType->fields[14] = getNativeType(3);
		nativeType->fields[15] = getNativeType(3);
		nativeType->fields[16] = getNativeType(3);
		nativeType->fields[17] = getNativeType(3);
		nativeType->fields[18] = getNativeType(3);
		nativeType->fields[19] = getNativeType(3);
		nativeType->fields[20] = getNativeType(3);
		nativeType->fields[21] = getNativeType(3);
		return nativeType;
	case 52:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 2;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 2);
		nativeType->fields[0] = getNativeType(8);
		nativeType->fields[1] = getNativeType(8);
		return nativeType;
	case 53:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 3;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 3);
		nativeType->fields[0] = getNativeType(77);
		nativeType->fields[1] = getNativeType(77);
		nativeType->fields[2] = getNativeType(3);
		return nativeType;
	case 54:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 7;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 7);
		nativeType->fields[0] = getNativeType(65);
		nativeType->fields[1] = getNativeType(77);
		nativeType->fields[2] = getNativeType(77);
		nativeType->fields[3] = getNativeType(3);
		nativeType->fields[4] = getNativeType(4);
		nativeType->fields[5] = getNativeType(4);
		nativeType->fields[6] = getNativeType(0);
		return nativeType;
	case 55:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 19;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 19);
		nativeType->fields[0] = getNativeType(14);
		nativeType->fields[1] = getNativeType(14);
		nativeType->fields[2] = getNativeType(77);
		nativeType->fields[3] = getNativeType(77);
		nativeType->fields[4] = getNativeType(3);
		nativeType->fields[5] = getNativeType(3);
		nativeType->fields[6] = getNativeType(0);
		nativeType->fields[7] = getNativeType(3);
		nativeType->fields[8] = getNativeType(3);
		nativeType->fields[9] = getNativeType(0);
		nativeType->fields[10] = getNativeType(3);
		nativeType->fields[11] = getNativeType(3);
		nativeType->fields[12] = getNativeType(0);
		nativeType->fields[13] = getNativeType(3);
		nativeType->fields[14] = getNativeType(3);
		nativeType->fields[15] = getNativeType(3);
		nativeType->fields[16] = getNativeType(0);
		nativeType->fields[17] = getNativeType(-1);
		nativeType->fields[18] = getNativeType(4);
		return nativeType;
	case 56:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 2;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 2);
		nativeType->fields[0] = getNativeType(3);
		nativeType->fields[1] = getNativeType(3);
		return nativeType;
	case 57:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 2;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 2);
		nativeType->fields[0] = getNativeType(77);
		nativeType->fields[1] = getNativeType(77);
		return nativeType;
	case 58:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 5;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 5);
		nativeType->fields[0] = getNativeType(77);
		nativeType->fields[1] = getNativeType(77);
		nativeType->fields[2] = getNativeType(3);
		nativeType->fields[3] = getNativeType(3);
		nativeType->fields[4] = getNativeType(3);
		return nativeType;
	case 59:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 2;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 2);
		nativeType->fields[0] = getNativeType(65);
		nativeType->fields[1] = getNativeType(65);
		return nativeType;
	case 60:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 2;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 2);
		nativeType->fields[0] = getNativeType(65);
		nativeType->fields[1] = getNativeType(65);
		return nativeType;
	case 61:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 4;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 4);
		nativeType->fields[0] = getNativeType(-1);
		nativeType->fields[1] = getNativeType(-1);
		nativeType->fields[2] = getNativeType(4);
		nativeType->fields[3] = getNativeType(4);
		return nativeType;
	case 62:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 4;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 4);
		nativeType->fields[0] = getNativeType(66);
		nativeType->fields[1] = getNativeType(77);
		nativeType->fields[2] = getNativeType(3);
		nativeType->fields[3] = getNativeType(0);
		return nativeType;
	case 63:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 7;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 7);
		nativeType->fields[0] = getNativeType(66);
		nativeType->fields[1] = getNativeType(66);
		nativeType->fields[2] = getNativeType(74);
		nativeType->fields[3] = getNativeType(74);
		nativeType->fields[4] = getNativeType(77);
		nativeType->fields[5] = getNativeType(3);
		nativeType->fields[6] = getNativeType(0);
		return nativeType;
	case 64:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 12;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 12);
		nativeType->fields[0] = getNativeType(-1);
		nativeType->fields[1] = getNativeType(70);
		nativeType->fields[2] = getNativeType(3);
		nativeType->fields[3] = getNativeType(36);
		nativeType->fields[4] = getNativeType(0);
		nativeType->fields[5] = getNativeType(0);
		nativeType->fields[6] = getNativeType(0);
		nativeType->fields[7] = getNativeType(0);
		nativeType->fields[8] = getNativeType(0);
		nativeType->fields[9] = getNativeType(0);
		nativeType->fields[10] = getNativeType(0);
		nativeType->fields[11] = getNativeType(4);
		return nativeType;
	case 65:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 3;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 3);
		nativeType->fields[0] = getNativeType(5);
		nativeType->fields[1] = getNativeType(6);
		nativeType->fields[2] = getNativeType(6);
		return nativeType;
	case 66:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 10;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 10);
		nativeType->fields[0] = getNativeType(77);
		nativeType->fields[1] = getNativeType(77);
		nativeType->fields[2] = getNativeType(77);
		nativeType->fields[3] = getNativeType(77);
		nativeType->fields[4] = getNativeType(77);
		nativeType->fields[5] = getNativeType(77);
		nativeType->fields[6] = getNativeType(77);
		nativeType->fields[7] = getNativeType(77);
		nativeType->fields[8] = getNativeType(4);
		nativeType->fields[9] = getNativeType(3);
		return nativeType;
	case 67:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 4;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 4);
		nativeType->fields[0] = getNativeType(69);
		nativeType->fields[1] = getNativeType(69);
		nativeType->fields[2] = getNativeType(69);
		nativeType->fields[3] = getNativeType(4);
		return nativeType;
	case 68:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 7;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 7);
		nativeType->fields[0] = getNativeType(6);
		nativeType->fields[1] = getNativeType(9);
		nativeType->fields[2] = getNativeType(9);
		nativeType->fields[3] = getNativeType(9);
		nativeType->fields[4] = getNativeType(9);
		nativeType->fields[5] = getNativeType(9);
		nativeType->fields[6] = getNativeType(9);
		return nativeType;
	case 69:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 6;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 6);
		nativeType->fields[0] = getNativeType(77);
		nativeType->fields[1] = getNativeType(77);
		nativeType->fields[2] = getNativeType(77);
		nativeType->fields[3] = getNativeType(3);
		nativeType->fields[4] = getNativeType(4);
		nativeType->fields[5] = getNativeType(4);
		return nativeType;
	case 70:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 6;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 6);
		nativeType->fields[0] = getNativeType(3);
		nativeType->fields[1] = getNativeType(3);
		nativeType->fields[2] = getNativeType(3);
		nativeType->fields[3] = getNativeType(3);
		nativeType->fields[4] = getNativeType(4);
		nativeType->fields[5] = getNativeType(7);
		return nativeType;
	case 71:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 5;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 5);
		nativeType->fields[0] = getNativeType(77);
		nativeType->fields[1] = getNativeType(77);
		nativeType->fields[2] = getNativeType(77);
		nativeType->fields[3] = getNativeType(56);
		nativeType->fields[4] = getNativeType(56);
		return nativeType;
	case 72:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 5;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 5);
		nativeType->fields[0] = getNativeType(66);
		nativeType->fields[1] = getNativeType(66);
		nativeType->fields[2] = getNativeType(71);
		nativeType->fields[3] = getNativeType(71);
		nativeType->fields[4] = getNativeType(3);
		return nativeType;
	case 73:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 2;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 2);
		nativeType->fields[0] = getNativeType(10);
		nativeType->fields[1] = getNativeType(3);
		return nativeType;
	case 74:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 2;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 2);
		nativeType->fields[0] = getNativeType(77);
		nativeType->fields[1] = getNativeType(56);
		return nativeType;
	case 75:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 0;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 0);
		return nativeType;
	case 76:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 2;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 2);
		nativeType->fields[0] = getNativeType(4);
		nativeType->fields[1] = getNativeType(4);
		return nativeType;
	case 77:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 2;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 2);
		nativeType->fields[0] = getNativeType(3);
		nativeType->fields[1] = getNativeType(3);
		return nativeType;
	case 78:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 3;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 3);
		nativeType->fields[0] = getNativeType(4);
		nativeType->fields[1] = getNativeType(4);
		nativeType->fields[2] = getNativeType(4);
		return nativeType;
	case 79:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 12;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 12);
		nativeType->fields[0] = getNativeType(14);
		nativeType->fields[1] = getNativeType(14);
		nativeType->fields[2] = getNativeType(77);
		nativeType->fields[3] = getNativeType(77);
		nativeType->fields[4] = getNativeType(3);
		nativeType->fields[5] = getNativeType(3);
		nativeType->fields[6] = getNativeType(3);
		nativeType->fields[7] = getNativeType(3);
		nativeType->fields[8] = getNativeType(3);
		nativeType->fields[9] = getNativeType(0);
		nativeType->fields[10] = getNativeType(-1);
		nativeType->fields[11] = getNativeType(4);
		return nativeType;
	case 80:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 17;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 17);
		nativeType->fields[0] = getNativeType(14);
		nativeType->fields[1] = getNativeType(14);
		nativeType->fields[2] = getNativeType(77);
		nativeType->fields[3] = getNativeType(77);
		nativeType->fields[4] = getNativeType(77);
		nativeType->fields[5] = getNativeType(0);
		nativeType->fields[6] = getNativeType(3);
		nativeType->fields[7] = getNativeType(3);
		nativeType->fields[8] = getNativeType(0);
		nativeType->fields[9] = getNativeType(3);
		nativeType->fields[10] = getNativeType(3);
		nativeType->fields[11] = getNativeType(0);
		nativeType->fields[12] = getNativeType(3);
		nativeType->fields[13] = getNativeType(3);
		nativeType->fields[14] = getNativeType(0);
		nativeType->fields[15] = getNativeType(-1);
		nativeType->fields[16] = getNativeType(4);
		return nativeType;
	case 81:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 17;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 17);
		nativeType->fields[0] = getNativeType(77);
		nativeType->fields[1] = getNativeType(3);
		nativeType->fields[2] = getNativeType(3);
		nativeType->fields[3] = getNativeType(3);
		nativeType->fields[4] = getNativeType(3);
		nativeType->fields[5] = getNativeType(3);
		nativeType->fields[6] = getNativeType(3);
		nativeType->fields[7] = getNativeType(-1);
		nativeType->fields[8] = getNativeType(-1);
		nativeType->fields[9] = getNativeType(0);
		nativeType->fields[10] = getNativeType(0);
		nativeType->fields[11] = getNativeType(4);
		nativeType->fields[12] = getNativeType(-1);
		nativeType->fields[13] = getNativeType(-1);
		nativeType->fields[14] = getNativeType(-1);
		nativeType->fields[15] = getNativeType(-1);
		nativeType->fields[16] = getNativeType(4);
		return nativeType;
	case 82:
		nativeType->type = STRUCT_TYPE;
		nativeType->field_count = 2;
		nativeType->fields = (native_type**)malloc(sizeof(native_type*) * 2);
		nativeType->fields[0] = getNativeType(6);
		nativeType->fields[1] = getNativeType(6);
		return nativeType;
	default:
		return NULL;
	}
}
*/
    private native static long getNativeType(int id);/*
    	return reinterpret_cast<jlong>(getNativeType(id));
    */

    static {
        ffiIdMap.put(-2, CHandler.constructCTypeFromNativeType(getNativeType(-2)));
        ffiIdMap.put(-1, CHandler.constructCTypeFromNativeType(getNativeType(-1)));
        ffiIdMap.put(0, CHandler.constructCTypeFromNativeType(getNativeType(0)));
        ffiIdMap.put(1, CHandler.constructCTypeFromNativeType(getNativeType(1)));
        ffiIdMap.put(2, CHandler.constructCTypeFromNativeType(getNativeType(2)));
        ffiIdMap.put(3, CHandler.constructCTypeFromNativeType(getNativeType(3)));
        ffiIdMap.put(4, CHandler.constructCTypeFromNativeType(getNativeType(4)));
        ffiIdMap.put(5, CHandler.constructCTypeFromNativeType(getNativeType(5)));
        ffiIdMap.put(6, CHandler.constructCTypeFromNativeType(getNativeType(6)));
        ffiIdMap.put(7, CHandler.constructCTypeFromNativeType(getNativeType(7)));
        ffiIdMap.put(8, CHandler.constructCTypeFromNativeType(getNativeType(8)));
        ffiIdMap.put(9, CHandler.constructCTypeFromNativeType(getNativeType(9)));
        ffiIdMap.put(10, CHandler.constructCTypeFromNativeType(getNativeType(10)));
        ffiIdMap.put(11, CHandler.constructCTypeFromNativeType(getNativeType(11)));
        ffiIdMap.put(12, CHandler.constructCTypeFromNativeType(getNativeType(12)));
        ffiIdMap.put(13, CHandler.constructCTypeFromNativeType(getNativeType(13)));
        ffiIdMap.put(14, CHandler.constructCTypeFromNativeType(getNativeType(14)));
        ffiIdMap.put(15, CHandler.constructCTypeFromNativeType(getNativeType(15)));
        ffiIdMap.put(16, CHandler.constructCTypeFromNativeType(getNativeType(16)));
        ffiIdMap.put(17, CHandler.constructCTypeFromNativeType(getNativeType(17)));
        ffiIdMap.put(18, CHandler.constructCTypeFromNativeType(getNativeType(18)));
        ffiIdMap.put(19, CHandler.constructCTypeFromNativeType(getNativeType(19)));
        ffiIdMap.put(20, CHandler.constructCTypeFromNativeType(getNativeType(20)));
        ffiIdMap.put(21, CHandler.constructCTypeFromNativeType(getNativeType(21)));
        ffiIdMap.put(22, CHandler.constructCTypeFromNativeType(getNativeType(22)));
        ffiIdMap.put(23, CHandler.constructCTypeFromNativeType(getNativeType(23)));
        ffiIdMap.put(24, CHandler.constructCTypeFromNativeType(getNativeType(24)));
        ffiIdMap.put(25, CHandler.constructCTypeFromNativeType(getNativeType(25)));
        ffiIdMap.put(26, CHandler.constructCTypeFromNativeType(getNativeType(26)));
        ffiIdMap.put(27, CHandler.constructCTypeFromNativeType(getNativeType(27)));
        ffiIdMap.put(28, CHandler.constructCTypeFromNativeType(getNativeType(28)));
        ffiIdMap.put(29, CHandler.constructCTypeFromNativeType(getNativeType(29)));
        ffiIdMap.put(30, CHandler.constructCTypeFromNativeType(getNativeType(30)));
        ffiIdMap.put(31, CHandler.constructCTypeFromNativeType(getNativeType(31)));
        ffiIdMap.put(32, CHandler.constructCTypeFromNativeType(getNativeType(32)));
        ffiIdMap.put(33, CHandler.constructCTypeFromNativeType(getNativeType(33)));
        ffiIdMap.put(34, CHandler.constructCTypeFromNativeType(getNativeType(34)));
        ffiIdMap.put(35, CHandler.constructCTypeFromNativeType(getNativeType(35)));
        ffiIdMap.put(36, CHandler.constructCTypeFromNativeType(getNativeType(36)));
        ffiIdMap.put(37, CHandler.constructCTypeFromNativeType(getNativeType(37)));
        ffiIdMap.put(38, CHandler.constructCTypeFromNativeType(getNativeType(38)));
        ffiIdMap.put(39, CHandler.constructCTypeFromNativeType(getNativeType(39)));
        ffiIdMap.put(40, CHandler.constructCTypeFromNativeType(getNativeType(40)));
        ffiIdMap.put(41, CHandler.constructCTypeFromNativeType(getNativeType(41)));
        ffiIdMap.put(42, CHandler.constructCTypeFromNativeType(getNativeType(42)));
        ffiIdMap.put(43, CHandler.constructCTypeFromNativeType(getNativeType(43)));
        ffiIdMap.put(44, CHandler.constructCTypeFromNativeType(getNativeType(44)));
        ffiIdMap.put(45, CHandler.constructCTypeFromNativeType(getNativeType(45)));
        ffiIdMap.put(46, CHandler.constructCTypeFromNativeType(getNativeType(46)));
        ffiIdMap.put(47, CHandler.constructCTypeFromNativeType(getNativeType(47)));
        ffiIdMap.put(48, CHandler.constructCTypeFromNativeType(getNativeType(48)));
        ffiIdMap.put(49, CHandler.constructCTypeFromNativeType(getNativeType(49)));
        ffiIdMap.put(50, CHandler.constructCTypeFromNativeType(getNativeType(50)));
        ffiIdMap.put(51, CHandler.constructCTypeFromNativeType(getNativeType(51)));
        ffiIdMap.put(52, CHandler.constructCTypeFromNativeType(getNativeType(52)));
        ffiIdMap.put(53, CHandler.constructCTypeFromNativeType(getNativeType(53)));
        ffiIdMap.put(54, CHandler.constructCTypeFromNativeType(getNativeType(54)));
        ffiIdMap.put(55, CHandler.constructCTypeFromNativeType(getNativeType(55)));
        ffiIdMap.put(56, CHandler.constructCTypeFromNativeType(getNativeType(56)));
        ffiIdMap.put(57, CHandler.constructCTypeFromNativeType(getNativeType(57)));
        ffiIdMap.put(58, CHandler.constructCTypeFromNativeType(getNativeType(58)));
        ffiIdMap.put(59, CHandler.constructCTypeFromNativeType(getNativeType(59)));
        ffiIdMap.put(60, CHandler.constructCTypeFromNativeType(getNativeType(60)));
        ffiIdMap.put(61, CHandler.constructCTypeFromNativeType(getNativeType(61)));
        ffiIdMap.put(62, CHandler.constructCTypeFromNativeType(getNativeType(62)));
        ffiIdMap.put(63, CHandler.constructCTypeFromNativeType(getNativeType(63)));
        ffiIdMap.put(64, CHandler.constructCTypeFromNativeType(getNativeType(64)));
        ffiIdMap.put(65, CHandler.constructCTypeFromNativeType(getNativeType(65)));
        ffiIdMap.put(66, CHandler.constructCTypeFromNativeType(getNativeType(66)));
        ffiIdMap.put(67, CHandler.constructCTypeFromNativeType(getNativeType(67)));
        ffiIdMap.put(68, CHandler.constructCTypeFromNativeType(getNativeType(68)));
        ffiIdMap.put(69, CHandler.constructCTypeFromNativeType(getNativeType(69)));
        ffiIdMap.put(70, CHandler.constructCTypeFromNativeType(getNativeType(70)));
        ffiIdMap.put(71, CHandler.constructCTypeFromNativeType(getNativeType(71)));
        ffiIdMap.put(72, CHandler.constructCTypeFromNativeType(getNativeType(72)));
        ffiIdMap.put(73, CHandler.constructCTypeFromNativeType(getNativeType(73)));
        ffiIdMap.put(74, CHandler.constructCTypeFromNativeType(getNativeType(74)));
        ffiIdMap.put(75, CHandler.constructCTypeFromNativeType(getNativeType(75)));
        ffiIdMap.put(76, CHandler.constructCTypeFromNativeType(getNativeType(76)));
        ffiIdMap.put(77, CHandler.constructCTypeFromNativeType(getNativeType(77)));
        ffiIdMap.put(78, CHandler.constructCTypeFromNativeType(getNativeType(78)));
        ffiIdMap.put(79, CHandler.constructCTypeFromNativeType(getNativeType(79)));
        ffiIdMap.put(80, CHandler.constructCTypeFromNativeType(getNativeType(80)));
        ffiIdMap.put(81, CHandler.constructCTypeFromNativeType(getNativeType(81)));
        ffiIdMap.put(82, CHandler.constructCTypeFromNativeType(getNativeType(82)));
    }
}
